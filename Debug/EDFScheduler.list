
EDFScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d67c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800d78c  0800d78c  0000e78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d954  0800d954  0000f1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d95c  0800d95c  0000f1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d95c  0800d95c  0000e95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d960  0800d960  0000e960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800d964  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e18  200001fc  0800db60  0000f1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003014  0800db60  00010014  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff0f  00000000  00000000  0000f225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe6  00000000  00000000  0002f134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c00  00000000  00000000  00034120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001578  00000000  00000000  00035d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce9e  00000000  00000000  00037298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021901  00000000  00000000  00054136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c698  00000000  00000000  00075a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001120cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e38  00000000  00000000  00112114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00119f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d774 	.word	0x0800d774

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800d774 	.word	0x0800d774

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_frsub>:
 8000164:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000168:	e002      	b.n	8000170 <__addsf3>
 800016a:	bf00      	nop

0800016c <__aeabi_fsub>:
 800016c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000170 <__addsf3>:
 8000170:	0042      	lsls	r2, r0, #1
 8000172:	bf1f      	itttt	ne
 8000174:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000178:	ea92 0f03 	teqne	r2, r3
 800017c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000180:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000184:	d06a      	beq.n	800025c <__addsf3+0xec>
 8000186:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800018a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018e:	bfc1      	itttt	gt
 8000190:	18d2      	addgt	r2, r2, r3
 8000192:	4041      	eorgt	r1, r0
 8000194:	4048      	eorgt	r0, r1
 8000196:	4041      	eorgt	r1, r0
 8000198:	bfb8      	it	lt
 800019a:	425b      	neglt	r3, r3
 800019c:	2b19      	cmp	r3, #25
 800019e:	bf88      	it	hi
 80001a0:	4770      	bxhi	lr
 80001a2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001aa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001ae:	bf18      	it	ne
 80001b0:	4240      	negne	r0, r0
 80001b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001ba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001be:	bf18      	it	ne
 80001c0:	4249      	negne	r1, r1
 80001c2:	ea92 0f03 	teq	r2, r3
 80001c6:	d03f      	beq.n	8000248 <__addsf3+0xd8>
 80001c8:	f1a2 0201 	sub.w	r2, r2, #1
 80001cc:	fa41 fc03 	asr.w	ip, r1, r3
 80001d0:	eb10 000c 	adds.w	r0, r0, ip
 80001d4:	f1c3 0320 	rsb	r3, r3, #32
 80001d8:	fa01 f103 	lsl.w	r1, r1, r3
 80001dc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001e0:	d502      	bpl.n	80001e8 <__addsf3+0x78>
 80001e2:	4249      	negs	r1, r1
 80001e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001ec:	d313      	bcc.n	8000216 <__addsf3+0xa6>
 80001ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001f2:	d306      	bcc.n	8000202 <__addsf3+0x92>
 80001f4:	0840      	lsrs	r0, r0, #1
 80001f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80001fa:	f102 0201 	add.w	r2, r2, #1
 80001fe:	2afe      	cmp	r2, #254	@ 0xfe
 8000200:	d251      	bcs.n	80002a6 <__addsf3+0x136>
 8000202:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000206:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800020a:	bf08      	it	eq
 800020c:	f020 0001 	biceq.w	r0, r0, #1
 8000210:	ea40 0003 	orr.w	r0, r0, r3
 8000214:	4770      	bx	lr
 8000216:	0049      	lsls	r1, r1, #1
 8000218:	eb40 0000 	adc.w	r0, r0, r0
 800021c:	3a01      	subs	r2, #1
 800021e:	bf28      	it	cs
 8000220:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000224:	d2ed      	bcs.n	8000202 <__addsf3+0x92>
 8000226:	fab0 fc80 	clz	ip, r0
 800022a:	f1ac 0c08 	sub.w	ip, ip, #8
 800022e:	ebb2 020c 	subs.w	r2, r2, ip
 8000232:	fa00 f00c 	lsl.w	r0, r0, ip
 8000236:	bfaa      	itet	ge
 8000238:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800023c:	4252      	neglt	r2, r2
 800023e:	4318      	orrge	r0, r3
 8000240:	bfbc      	itt	lt
 8000242:	40d0      	lsrlt	r0, r2
 8000244:	4318      	orrlt	r0, r3
 8000246:	4770      	bx	lr
 8000248:	f092 0f00 	teq	r2, #0
 800024c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000250:	bf06      	itte	eq
 8000252:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000256:	3201      	addeq	r2, #1
 8000258:	3b01      	subne	r3, #1
 800025a:	e7b5      	b.n	80001c8 <__addsf3+0x58>
 800025c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000260:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000264:	bf18      	it	ne
 8000266:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800026a:	d021      	beq.n	80002b0 <__addsf3+0x140>
 800026c:	ea92 0f03 	teq	r2, r3
 8000270:	d004      	beq.n	800027c <__addsf3+0x10c>
 8000272:	f092 0f00 	teq	r2, #0
 8000276:	bf08      	it	eq
 8000278:	4608      	moveq	r0, r1
 800027a:	4770      	bx	lr
 800027c:	ea90 0f01 	teq	r0, r1
 8000280:	bf1c      	itt	ne
 8000282:	2000      	movne	r0, #0
 8000284:	4770      	bxne	lr
 8000286:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800028a:	d104      	bne.n	8000296 <__addsf3+0x126>
 800028c:	0040      	lsls	r0, r0, #1
 800028e:	bf28      	it	cs
 8000290:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000294:	4770      	bx	lr
 8000296:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800029a:	bf3c      	itt	cc
 800029c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80002a0:	4770      	bxcc	lr
 80002a2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ae:	4770      	bx	lr
 80002b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b4:	bf16      	itet	ne
 80002b6:	4608      	movne	r0, r1
 80002b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002bc:	4601      	movne	r1, r0
 80002be:	0242      	lsls	r2, r0, #9
 80002c0:	bf06      	itte	eq
 80002c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c6:	ea90 0f01 	teqeq	r0, r1
 80002ca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_ui2f>:
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	e004      	b.n	80002e0 <__aeabi_i2f+0x8>
 80002d6:	bf00      	nop

080002d8 <__aeabi_i2f>:
 80002d8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002dc:	bf48      	it	mi
 80002de:	4240      	negmi	r0, r0
 80002e0:	ea5f 0c00 	movs.w	ip, r0
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002ec:	4601      	mov	r1, r0
 80002ee:	f04f 0000 	mov.w	r0, #0
 80002f2:	e01c      	b.n	800032e <__aeabi_l2f+0x2a>

080002f4 <__aeabi_ul2f>:
 80002f4:	ea50 0201 	orrs.w	r2, r0, r1
 80002f8:	bf08      	it	eq
 80002fa:	4770      	bxeq	lr
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	e00a      	b.n	8000318 <__aeabi_l2f+0x14>
 8000302:	bf00      	nop

08000304 <__aeabi_l2f>:
 8000304:	ea50 0201 	orrs.w	r2, r0, r1
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000310:	d502      	bpl.n	8000318 <__aeabi_l2f+0x14>
 8000312:	4240      	negs	r0, r0
 8000314:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000318:	ea5f 0c01 	movs.w	ip, r1
 800031c:	bf02      	ittt	eq
 800031e:	4684      	moveq	ip, r0
 8000320:	4601      	moveq	r1, r0
 8000322:	2000      	moveq	r0, #0
 8000324:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000328:	bf08      	it	eq
 800032a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000332:	fabc f28c 	clz	r2, ip
 8000336:	3a08      	subs	r2, #8
 8000338:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800033c:	db10      	blt.n	8000360 <__aeabi_l2f+0x5c>
 800033e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000342:	4463      	add	r3, ip
 8000344:	fa00 fc02 	lsl.w	ip, r0, r2
 8000348:	f1c2 0220 	rsb	r2, r2, #32
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000350:	fa20 f202 	lsr.w	r2, r0, r2
 8000354:	eb43 0002 	adc.w	r0, r3, r2
 8000358:	bf08      	it	eq
 800035a:	f020 0001 	biceq.w	r0, r0, #1
 800035e:	4770      	bx	lr
 8000360:	f102 0220 	add.w	r2, r2, #32
 8000364:	fa01 fc02 	lsl.w	ip, r1, r2
 8000368:	f1c2 0220 	rsb	r2, r2, #32
 800036c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000370:	fa21 f202 	lsr.w	r2, r1, r2
 8000374:	eb43 0002 	adc.w	r0, r3, r2
 8000378:	bf08      	it	eq
 800037a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037e:	4770      	bx	lr

08000380 <__aeabi_fmul>:
 8000380:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000384:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000388:	bf1e      	ittt	ne
 800038a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038e:	ea92 0f0c 	teqne	r2, ip
 8000392:	ea93 0f0c 	teqne	r3, ip
 8000396:	d06f      	beq.n	8000478 <__aeabi_fmul+0xf8>
 8000398:	441a      	add	r2, r3
 800039a:	ea80 0c01 	eor.w	ip, r0, r1
 800039e:	0240      	lsls	r0, r0, #9
 80003a0:	bf18      	it	ne
 80003a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a6:	d01e      	beq.n	80003e6 <__aeabi_fmul+0x66>
 80003a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b4:	fba0 3101 	umull	r3, r1, r0, r1
 80003b8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003bc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003c0:	bf3e      	ittt	cc
 80003c2:	0049      	lslcc	r1, r1, #1
 80003c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c8:	005b      	lslcc	r3, r3, #1
 80003ca:	ea40 0001 	orr.w	r0, r0, r1
 80003ce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003d2:	2afd      	cmp	r2, #253	@ 0xfd
 80003d4:	d81d      	bhi.n	8000412 <__aeabi_fmul+0x92>
 80003d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003de:	bf08      	it	eq
 80003e0:	f020 0001 	biceq.w	r0, r0, #1
 80003e4:	4770      	bx	lr
 80003e6:	f090 0f00 	teq	r0, #0
 80003ea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ee:	bf08      	it	eq
 80003f0:	0249      	lsleq	r1, r1, #9
 80003f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003fa:	3a7f      	subs	r2, #127	@ 0x7f
 80003fc:	bfc2      	ittt	gt
 80003fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000402:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000406:	4770      	bxgt	lr
 8000408:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800040c:	f04f 0300 	mov.w	r3, #0
 8000410:	3a01      	subs	r2, #1
 8000412:	dc5d      	bgt.n	80004d0 <__aeabi_fmul+0x150>
 8000414:	f112 0f19 	cmn.w	r2, #25
 8000418:	bfdc      	itt	le
 800041a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041e:	4770      	bxle	lr
 8000420:	f1c2 0200 	rsb	r2, r2, #0
 8000424:	0041      	lsls	r1, r0, #1
 8000426:	fa21 f102 	lsr.w	r1, r1, r2
 800042a:	f1c2 0220 	rsb	r2, r2, #32
 800042e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000432:	ea5f 0031 	movs.w	r0, r1, rrx
 8000436:	f140 0000 	adc.w	r0, r0, #0
 800043a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043e:	bf08      	it	eq
 8000440:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000444:	4770      	bx	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0040      	lsleq	r0, r0, #1
 8000452:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000456:	3a01      	subeq	r2, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xce>
 800045a:	ea40 000c 	orr.w	r0, r0, ip
 800045e:	f093 0f00 	teq	r3, #0
 8000462:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000466:	bf02      	ittt	eq
 8000468:	0049      	lsleq	r1, r1, #1
 800046a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046e:	3b01      	subeq	r3, #1
 8000470:	d0f9      	beq.n	8000466 <__aeabi_fmul+0xe6>
 8000472:	ea41 010c 	orr.w	r1, r1, ip
 8000476:	e78f      	b.n	8000398 <__aeabi_fmul+0x18>
 8000478:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800047c:	ea92 0f0c 	teq	r2, ip
 8000480:	bf18      	it	ne
 8000482:	ea93 0f0c 	teqne	r3, ip
 8000486:	d00a      	beq.n	800049e <__aeabi_fmul+0x11e>
 8000488:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800048c:	bf18      	it	ne
 800048e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000492:	d1d8      	bne.n	8000446 <__aeabi_fmul+0xc6>
 8000494:	ea80 0001 	eor.w	r0, r0, r1
 8000498:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800049c:	4770      	bx	lr
 800049e:	f090 0f00 	teq	r0, #0
 80004a2:	bf17      	itett	ne
 80004a4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a8:	4608      	moveq	r0, r1
 80004aa:	f091 0f00 	teqne	r1, #0
 80004ae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004b2:	d014      	beq.n	80004de <__aeabi_fmul+0x15e>
 80004b4:	ea92 0f0c 	teq	r2, ip
 80004b8:	d101      	bne.n	80004be <__aeabi_fmul+0x13e>
 80004ba:	0242      	lsls	r2, r0, #9
 80004bc:	d10f      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004be:	ea93 0f0c 	teq	r3, ip
 80004c2:	d103      	bne.n	80004cc <__aeabi_fmul+0x14c>
 80004c4:	024b      	lsls	r3, r1, #9
 80004c6:	bf18      	it	ne
 80004c8:	4608      	movne	r0, r1
 80004ca:	d108      	bne.n	80004de <__aeabi_fmul+0x15e>
 80004cc:	ea80 0001 	eor.w	r0, r0, r1
 80004d0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004dc:	4770      	bx	lr
 80004de:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004e2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_fdiv>:
 80004e8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004f0:	bf1e      	ittt	ne
 80004f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f6:	ea92 0f0c 	teqne	r2, ip
 80004fa:	ea93 0f0c 	teqne	r3, ip
 80004fe:	d069      	beq.n	80005d4 <__aeabi_fdiv+0xec>
 8000500:	eba2 0203 	sub.w	r2, r2, r3
 8000504:	ea80 0c01 	eor.w	ip, r0, r1
 8000508:	0249      	lsls	r1, r1, #9
 800050a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050e:	d037      	beq.n	8000580 <__aeabi_fdiv+0x98>
 8000510:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000514:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000518:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800051c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000520:	428b      	cmp	r3, r1
 8000522:	bf38      	it	cc
 8000524:	005b      	lslcc	r3, r3, #1
 8000526:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800052a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052e:	428b      	cmp	r3, r1
 8000530:	bf24      	itt	cs
 8000532:	1a5b      	subcs	r3, r3, r1
 8000534:	ea40 000c 	orrcs.w	r0, r0, ip
 8000538:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800053c:	bf24      	itt	cs
 800053e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000542:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000546:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800054a:	bf24      	itt	cs
 800054c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000550:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000554:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000558:	bf24      	itt	cs
 800055a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	bf18      	it	ne
 8000566:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800056a:	d1e0      	bne.n	800052e <__aeabi_fdiv+0x46>
 800056c:	2afd      	cmp	r2, #253	@ 0xfd
 800056e:	f63f af50 	bhi.w	8000412 <__aeabi_fmul+0x92>
 8000572:	428b      	cmp	r3, r1
 8000574:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000584:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000588:	327f      	adds	r2, #127	@ 0x7f
 800058a:	bfc2      	ittt	gt
 800058c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000590:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000594:	4770      	bxgt	lr
 8000596:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	3a01      	subs	r2, #1
 80005a0:	e737      	b.n	8000412 <__aeabi_fmul+0x92>
 80005a2:	f092 0f00 	teq	r2, #0
 80005a6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0040      	lsleq	r0, r0, #1
 80005ae:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005b2:	3a01      	subeq	r2, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xc2>
 80005b6:	ea40 000c 	orr.w	r0, r0, ip
 80005ba:	f093 0f00 	teq	r3, #0
 80005be:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005c2:	bf02      	ittt	eq
 80005c4:	0049      	lsleq	r1, r1, #1
 80005c6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005ca:	3b01      	subeq	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <__aeabi_fdiv+0xda>
 80005ce:	ea41 010c 	orr.w	r1, r1, ip
 80005d2:	e795      	b.n	8000500 <__aeabi_fdiv+0x18>
 80005d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d8:	ea92 0f0c 	teq	r2, ip
 80005dc:	d108      	bne.n	80005f0 <__aeabi_fdiv+0x108>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	f47f af7d 	bne.w	80004de <__aeabi_fmul+0x15e>
 80005e4:	ea93 0f0c 	teq	r3, ip
 80005e8:	f47f af70 	bne.w	80004cc <__aeabi_fmul+0x14c>
 80005ec:	4608      	mov	r0, r1
 80005ee:	e776      	b.n	80004de <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	d104      	bne.n	8000600 <__aeabi_fdiv+0x118>
 80005f6:	024b      	lsls	r3, r1, #9
 80005f8:	f43f af4c 	beq.w	8000494 <__aeabi_fmul+0x114>
 80005fc:	4608      	mov	r0, r1
 80005fe:	e76e      	b.n	80004de <__aeabi_fmul+0x15e>
 8000600:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000604:	bf18      	it	ne
 8000606:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800060a:	d1ca      	bne.n	80005a2 <__aeabi_fdiv+0xba>
 800060c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000610:	f47f af5c 	bne.w	80004cc <__aeabi_fmul+0x14c>
 8000614:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000618:	f47f af3c 	bne.w	8000494 <__aeabi_fmul+0x114>
 800061c:	e75f      	b.n	80004de <__aeabi_fmul+0x15e>
 800061e:	bf00      	nop

08000620 <__gesf2>:
 8000620:	f04f 3cff 	mov.w	ip, #4294967295
 8000624:	e006      	b.n	8000634 <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__lesf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	e002      	b.n	8000634 <__cmpsf2+0x4>
 800062e:	bf00      	nop

08000630 <__cmpsf2>:
 8000630:	f04f 0c01 	mov.w	ip, #1
 8000634:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000638:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800063c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000640:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000644:	bf18      	it	ne
 8000646:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800064a:	d011      	beq.n	8000670 <__cmpsf2+0x40>
 800064c:	b001      	add	sp, #4
 800064e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000652:	bf18      	it	ne
 8000654:	ea90 0f01 	teqne	r0, r1
 8000658:	bf58      	it	pl
 800065a:	ebb2 0003 	subspl.w	r0, r2, r3
 800065e:	bf88      	it	hi
 8000660:	17c8      	asrhi	r0, r1, #31
 8000662:	bf38      	it	cc
 8000664:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000668:	bf18      	it	ne
 800066a:	f040 0001 	orrne.w	r0, r0, #1
 800066e:	4770      	bx	lr
 8000670:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000674:	d102      	bne.n	800067c <__cmpsf2+0x4c>
 8000676:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800067a:	d105      	bne.n	8000688 <__cmpsf2+0x58>
 800067c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000680:	d1e4      	bne.n	800064c <__cmpsf2+0x1c>
 8000682:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000686:	d0e1      	beq.n	800064c <__cmpsf2+0x1c>
 8000688:	f85d 0b04 	ldr.w	r0, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <__aeabi_cfrcmple>:
 8000690:	4684      	mov	ip, r0
 8000692:	4608      	mov	r0, r1
 8000694:	4661      	mov	r1, ip
 8000696:	e7ff      	b.n	8000698 <__aeabi_cfcmpeq>

08000698 <__aeabi_cfcmpeq>:
 8000698:	b50f      	push	{r0, r1, r2, r3, lr}
 800069a:	f7ff ffc9 	bl	8000630 <__cmpsf2>
 800069e:	2800      	cmp	r0, #0
 80006a0:	bf48      	it	mi
 80006a2:	f110 0f00 	cmnmi.w	r0, #0
 80006a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a8 <__aeabi_fcmpeq>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff fff4 	bl	8000698 <__aeabi_cfcmpeq>
 80006b0:	bf0c      	ite	eq
 80006b2:	2001      	moveq	r0, #1
 80006b4:	2000      	movne	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmplt>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffea 	bl	8000698 <__aeabi_cfcmpeq>
 80006c4:	bf34      	ite	cc
 80006c6:	2001      	movcc	r0, #1
 80006c8:	2000      	movcs	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmple>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffe0 	bl	8000698 <__aeabi_cfcmpeq>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpge>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffd2 	bl	8000690 <__aeabi_cfrcmple>
 80006ec:	bf94      	ite	ls
 80006ee:	2001      	movls	r0, #1
 80006f0:	2000      	movhi	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmpgt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffc8 	bl	8000690 <__aeabi_cfrcmple>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <__aeabi_f2iz>:
 800070c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000710:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000714:	d30f      	bcc.n	8000736 <__aeabi_f2iz+0x2a>
 8000716:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800071a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800071e:	d90d      	bls.n	800073c <__aeabi_f2iz+0x30>
 8000720:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000724:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000728:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800072c:	fa23 f002 	lsr.w	r0, r3, r2
 8000730:	bf18      	it	ne
 8000732:	4240      	negne	r0, r0
 8000734:	4770      	bx	lr
 8000736:	f04f 0000 	mov.w	r0, #0
 800073a:	4770      	bx	lr
 800073c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000740:	d101      	bne.n	8000746 <__aeabi_f2iz+0x3a>
 8000742:	0242      	lsls	r2, r0, #9
 8000744:	d105      	bne.n	8000752 <__aeabi_f2iz+0x46>
 8000746:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800074a:	bf08      	it	eq
 800074c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000750:	4770      	bx	lr
 8000752:	f04f 0000 	mov.w	r0, #0
 8000756:	4770      	bx	lr

08000758 <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000760:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <DelayMicro+0x34>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <DelayMicro+0x38>)
 8000766:	fba2 2303 	umull	r2, r3, r2, r3
 800076a:	0ddb      	lsrs	r3, r3, #23
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000774:	bf00      	nop
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1fa      	bne.n	8000776 <DelayMicro+0x1e>
}
 8000780:	bf00      	nop
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	20000020 	.word	0x20000020
 8000790:	ee9bfab5 	.word	0xee9bfab5

08000794 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 80007a6:	2104      	movs	r1, #4
 80007a8:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <dht22_init+0x50>)
 80007aa:	f001 f8df 	bl	800196c <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 80007ae:	2304      	movs	r3, #4
 80007b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007b2:	2311      	movs	r3, #17
 80007b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 80007be:	463b      	mov	r3, r7
 80007c0:	4619      	mov	r1, r3
 80007c2:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <dht22_init+0x50>)
 80007c4:	f000 ff4e 	bl	8001664 <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007cc:	f000 fe46 	bl	800145c <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2104      	movs	r1, #4
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <dht22_init+0x50>)
 80007d6:	f001 f99c 	bl	8001b12 <HAL_GPIO_WritePin>

}
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010800 	.word	0x40010800

080007e8 <DHT22_Get_Temp>:

uint8_t DHT22_Get_Temp(float *Temp)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16;
	uint8_t i, j = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2104      	movs	r1, #4
 80007f8:	4854      	ldr	r0, [pc, #336]	@ (800094c <DHT22_Get_Temp+0x164>)
 80007fa:	f001 f98a 	bl	8001b12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2104      	movs	r1, #4
 8000802:	4852      	ldr	r0, [pc, #328]	@ (800094c <DHT22_Get_Temp+0x164>)
 8000804:	f001 f985 	bl	8001b12 <HAL_GPIO_WritePin>
	DelayMicro(2000);
 8000808:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800080c:	f7ff ffa4 	bl	8000758 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2104      	movs	r1, #4
 8000814:	484d      	ldr	r0, [pc, #308]	@ (800094c <DHT22_Get_Temp+0x164>)
 8000816:	f001 f97c 	bl	8001b12 <HAL_GPIO_WritePin>
	DelayMicro(1200);
 800081a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800081e:	f7ff ff9b 	bl	8000758 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2104      	movs	r1, #4
 8000826:	4849      	ldr	r0, [pc, #292]	@ (800094c <DHT22_Get_Temp+0x164>)
 8000828:	f001 f973 	bl	8001b12 <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40
 800082c:	2027      	movs	r0, #39	@ 0x27
 800082e:	f7ff ff93 	bl	8000758 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 8000832:	2104      	movs	r1, #4
 8000834:	4845      	ldr	r0, [pc, #276]	@ (800094c <DHT22_Get_Temp+0x164>)
 8000836:	f001 f955 	bl	8001ae4 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d101      	bne.n	8000844 <DHT22_Get_Temp+0x5c>
	{
		return 0;
 8000840:	2300      	movs	r3, #0
 8000842:	e07e      	b.n	8000942 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 8000844:	2050      	movs	r0, #80	@ 0x50
 8000846:	f7ff ff87 	bl	8000758 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 800084a:	2104      	movs	r1, #4
 800084c:	483f      	ldr	r0, [pc, #252]	@ (800094c <DHT22_Get_Temp+0x164>)
 800084e:	f001 f949 	bl	8001ae4 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d101      	bne.n	800085c <DHT22_Get_Temp+0x74>
	{
		return 0;
 8000858:	2300      	movs	r3, #0
 800085a:	e072      	b.n	8000942 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 800085c:	2050      	movs	r0, #80	@ 0x50
 800085e:	f7ff ff7b 	bl	8000758 <DelayMicro>

	for (j=0; j<5; j++)
 8000862:	2300      	movs	r3, #0
 8000864:	757b      	strb	r3, [r7, #21]
 8000866:	e040      	b.n	80008ea <DHT22_Get_Temp+0x102>
	{
		dataArray[j]=0;
 8000868:	7d7b      	ldrb	r3, [r7, #21]
 800086a:	3318      	adds	r3, #24
 800086c:	443b      	add	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 8000874:	2300      	movs	r3, #0
 8000876:	75bb      	strb	r3, [r7, #22]
 8000878:	e031      	b.n	80008de <DHT22_Get_Temp+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);
 800087a:	bf00      	nop
 800087c:	2104      	movs	r1, #4
 800087e:	4833      	ldr	r0, [pc, #204]	@ (800094c <DHT22_Get_Temp+0x164>)
 8000880:	f001 f930 	bl	8001ae4 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d0f8      	beq.n	800087c <DHT22_Get_Temp+0x94>
			DelayMicro(30);
 800088a:	201e      	movs	r0, #30
 800088c:	f7ff ff64 	bl	8000758 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 8000890:	2104      	movs	r1, #4
 8000892:	482e      	ldr	r0, [pc, #184]	@ (800094c <DHT22_Get_Temp+0x164>)
 8000894:	f001 f926 	bl	8001ae4 <HAL_GPIO_ReadPin>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d014      	beq.n	80008c8 <DHT22_Get_Temp+0xe0>
				dataArray[j] |= (1<<(7-i));
 800089e:	7d7b      	ldrb	r3, [r7, #21]
 80008a0:	3318      	adds	r3, #24
 80008a2:	443b      	add	r3, r7
 80008a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80008a8:	b25a      	sxtb	r2, r3
 80008aa:	7dbb      	ldrb	r3, [r7, #22]
 80008ac:	f1c3 0307 	rsb	r3, r3, #7
 80008b0:	2101      	movs	r1, #1
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25a      	sxtb	r2, r3
 80008bc:	7d7b      	ldrb	r3, [r7, #21]
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	3318      	adds	r3, #24
 80008c2:	443b      	add	r3, r7
 80008c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);
 80008c8:	bf00      	nop
 80008ca:	2104      	movs	r1, #4
 80008cc:	481f      	ldr	r0, [pc, #124]	@ (800094c <DHT22_Get_Temp+0x164>)
 80008ce:	f001 f909 	bl	8001ae4 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d0f8      	beq.n	80008ca <DHT22_Get_Temp+0xe2>
		for(i=0; i<8; i++)
 80008d8:	7dbb      	ldrb	r3, [r7, #22]
 80008da:	3301      	adds	r3, #1
 80008dc:	75bb      	strb	r3, [r7, #22]
 80008de:	7dbb      	ldrb	r3, [r7, #22]
 80008e0:	2b07      	cmp	r3, #7
 80008e2:	d9ca      	bls.n	800087a <DHT22_Get_Temp+0x92>
	for (j=0; j<5; j++)
 80008e4:	7d7b      	ldrb	r3, [r7, #21]
 80008e6:	3301      	adds	r3, #1
 80008e8:	757b      	strb	r3, [r7, #21]
 80008ea:	7d7b      	ldrb	r3, [r7, #21]
 80008ec:	2b04      	cmp	r3, #4
 80008ee:	d9bb      	bls.n	8000868 <DHT22_Get_Temp+0x80>
		}
	}
	myChecksum = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	753b      	strb	r3, [r7, #20]
 80008f8:	e00a      	b.n	8000910 <DHT22_Get_Temp+0x128>
	{
		myChecksum += dataArray[k];
 80008fa:	7d3b      	ldrb	r3, [r7, #20]
 80008fc:	3318      	adds	r3, #24
 80008fe:	443b      	add	r3, r7
 8000900:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000904:	7dfb      	ldrb	r3, [r7, #23]
 8000906:	4413      	add	r3, r2
 8000908:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 800090a:	7d3b      	ldrb	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	753b      	strb	r3, [r7, #20]
 8000910:	7d3b      	ldrb	r3, [r7, #20]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d9f1      	bls.n	80008fa <DHT22_Get_Temp+0x112>
	}
		Temp16 = (dataArray[2] <<8) | dataArray[3];
 8000916:	7bbb      	ldrb	r3, [r7, #14]
 8000918:	021b      	lsls	r3, r3, #8
 800091a:	b21a      	sxth	r2, r3
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21b      	sxth	r3, r3
 8000924:	827b      	strh	r3, [r7, #18]

		*Temp = Temp16/10.0f;
 8000926:	8a7b      	ldrh	r3, [r7, #18]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fcd5 	bl	80002d8 <__aeabi_i2f>
 800092e:	4603      	mov	r3, r0
 8000930:	4907      	ldr	r1, [pc, #28]	@ (8000950 <DHT22_Get_Temp+0x168>)
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fdd8 	bl	80004e8 <__aeabi_fdiv>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	601a      	str	r2, [r3, #0]
		return 1;
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010800 	.word	0x40010800
 8000950:	41200000 	.word	0x41200000

08000954 <__io_putchar>:
// ************** DEFINE ****************

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    while (CDC_Transmit_FS((uint8_t *)&ch, 1) == USBD_BUSY);
 800095c:	bf00      	nop
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f00b fb2c 	bl	800bfc0 <CDC_Transmit_FS>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d0f7      	beq.n	800095e <__io_putchar+0xa>
    return ch;
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <MPU6050_Init>:
 * Reference to initialized common hi2c1 variable in main.c
 *
 * */
extern I2C_HandleTypeDef hi2c1;

inline void MPU6050_Init (void){
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af04      	add	r7, sp, #16
	uint8_t check,Data;
	// check the sensor ID (SEE WHO AM I DATASHEET)
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	9302      	str	r3, [sp, #8]
 8000984:	2301      	movs	r3, #1
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2301      	movs	r3, #1
 800098e:	2275      	movs	r2, #117	@ 0x75
 8000990:	21d0      	movs	r1, #208	@ 0xd0
 8000992:	4823      	ldr	r0, [pc, #140]	@ (8000a20 <MPU6050_Init+0xa8>)
 8000994:	f001 fb14 	bl	8001fc0 <HAL_I2C_Mem_Read>
	if (check == 104) // the sensor is present
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b68      	cmp	r3, #104	@ 0x68
 800099c:	d13b      	bne.n	8000a16 <MPU6050_Init+0x9e>
	{
		// setting PWR Registers
		Data = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80009a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	1dbb      	adds	r3, r7, #6
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	226b      	movs	r2, #107	@ 0x6b
 80009b4:	21d0      	movs	r1, #208	@ 0xd0
 80009b6:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <MPU6050_Init+0xa8>)
 80009b8:	f001 fa08 	bl	8001dcc <HAL_I2C_Mem_Write>
		// var sample rate with SMPLRT_DIV_REG
		Data = 0x07;
 80009bc:	2307      	movs	r3, #7
 80009be:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80009c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2301      	movs	r3, #1
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	1dbb      	adds	r3, r7, #6
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2219      	movs	r2, #25
 80009d2:	21d0      	movs	r1, #208	@ 0xd0
 80009d4:	4812      	ldr	r0, [pc, #72]	@ (8000a20 <MPU6050_Init+0xa8>)
 80009d6:	f001 f9f9 	bl	8001dcc <HAL_I2C_Mem_Write>
		// var accelerometer config with ACCEL_CONFIG_REG
		Data = 0x00;
 80009da:	2300      	movs	r3, #0
 80009dc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80009de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	2301      	movs	r3, #1
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	221c      	movs	r2, #28
 80009f0:	21d0      	movs	r1, #208	@ 0xd0
 80009f2:	480b      	ldr	r0, [pc, #44]	@ (8000a20 <MPU6050_Init+0xa8>)
 80009f4:	f001 f9ea 	bl	8001dcc <HAL_I2C_Mem_Write>
		// var Gyro config with GYRO_CONFIG_REG
		Data = 0x00;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80009fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	2301      	movs	r3, #1
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	1dbb      	adds	r3, r7, #6
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	221b      	movs	r2, #27
 8000a0e:	21d0      	movs	r1, #208	@ 0xd0
 8000a10:	4803      	ldr	r0, [pc, #12]	@ (8000a20 <MPU6050_Init+0xa8>)
 8000a12:	f001 f9db 	bl	8001dcc <HAL_I2C_Mem_Write>
	}
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000274 	.word	0x20000274

08000a24 <MPU6050_Read_Accel>:


inline void MPU6050_Read_Accel ( void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 8000a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2e:	9302      	str	r3, [sp, #8]
 8000a30:	2306      	movs	r3, #6
 8000a32:	9301      	str	r3, [sp, #4]
 8000a34:	463b      	mov	r3, r7
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	223b      	movs	r2, #59	@ 0x3b
 8000a3c:	21d0      	movs	r1, #208	@ 0xd0
 8000a3e:	4829      	ldr	r0, [pc, #164]	@ (8000ae4 <MPU6050_Read_Accel+0xc0>)
 8000a40:	f001 fabe 	bl	8001fc0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000a44:	783b      	ldrb	r3, [r7, #0]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	787b      	ldrb	r3, [r7, #1]
 8000a4c:	b21b      	sxth	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	4b25      	ldr	r3, [pc, #148]	@ (8000ae8 <MPU6050_Read_Accel+0xc4>)
 8000a54:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000a56:	78bb      	ldrb	r3, [r7, #2]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	4b21      	ldr	r3, [pc, #132]	@ (8000aec <MPU6050_Read_Accel+0xc8>)
 8000a66:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000a68:	793b      	ldrb	r3, [r7, #4]
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	797b      	ldrb	r3, [r7, #5]
 8000a70:	b21b      	sxth	r3, r3
 8000a72:	4313      	orrs	r3, r2
 8000a74:	b21a      	sxth	r2, r3
 8000a76:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <MPU6050_Read_Accel+0xcc>)
 8000a78:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <MPU6050_Read_Accel+0xc4>)
 8000a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fc29 	bl	80002d8 <__aeabi_i2f>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd2b 	bl	80004e8 <__aeabi_fdiv>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <MPU6050_Read_Accel+0xd0>)
 8000a98:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MPU6050_Read_Accel+0xc8>)
 8000a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fc19 	bl	80002d8 <__aeabi_i2f>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd1b 	bl	80004e8 <__aeabi_fdiv>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MPU6050_Read_Accel+0xd4>)
 8000ab8:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <MPU6050_Read_Accel+0xcc>)
 8000abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fc09 	bl	80002d8 <__aeabi_i2f>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd0b 	bl	80004e8 <__aeabi_fdiv>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MPU6050_Read_Accel+0xd8>)
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000274 	.word	0x20000274
 8000ae8:	20000218 	.word	0x20000218
 8000aec:	2000021a 	.word	0x2000021a
 8000af0:	2000021c 	.word	0x2000021c
 8000af4:	20000220 	.word	0x20000220
 8000af8:	20000224 	.word	0x20000224
 8000afc:	20000228 	.word	0x20000228

08000b00 <CDC_ReceiveCallback>:
  .priority = (osPriority_t) osPriorityNormal1,
};
/* USER CODE BEGIN PV */


void CDC_ReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
    // Copy dữ liệu nhận vào bộ đệm và thêm ký tự kết thúc chuỗi
    memcpy(usb_rx_buffer, Buf, Len);
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	4813      	ldr	r0, [pc, #76]	@ (8000b5c <CDC_ReceiveCallback+0x5c>)
 8000b10:	f00c f90f 	bl	800cd32 <memcpy>
    usb_rx_buffer[Len] = '\0'; // Đảm bảo chuỗi kết thúc
 8000b14:	4a11      	ldr	r2, [pc, #68]	@ (8000b5c <CDC_ReceiveCallback+0x5c>)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
     if (strcmp(usb_rx_buffer, "start") == 0) {
 8000b1e:	4910      	ldr	r1, [pc, #64]	@ (8000b60 <CDC_ReceiveCallback+0x60>)
 8000b20:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <CDC_ReceiveCallback+0x5c>)
 8000b22:	f7ff fb15 	bl	8000150 <strcmp>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d106      	bne.n	8000b3a <CDC_ReceiveCallback+0x3a>
            status1 = true; // Bắt đầu hệ thống
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <CDC_ReceiveCallback+0x64>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
            status2 = true;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <CDC_ReceiveCallback+0x68>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
            status1 = false; // Dừng hệ thống
            status2 = false;
        }


}
 8000b38:	e00c      	b.n	8000b54 <CDC_ReceiveCallback+0x54>
        } else if (strcmp(usb_rx_buffer, "stop") == 0) {
 8000b3a:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <CDC_ReceiveCallback+0x6c>)
 8000b3c:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <CDC_ReceiveCallback+0x5c>)
 8000b3e:	f7ff fb07 	bl	8000150 <strcmp>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d105      	bne.n	8000b54 <CDC_ReceiveCallback+0x54>
            status1 = false; // Dừng hệ thống
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <CDC_ReceiveCallback+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
            status2 = false;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <CDC_ReceiveCallback+0x68>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000234 	.word	0x20000234
 8000b60:	0800d7a0 	.word	0x0800d7a0
 8000b64:	20000230 	.word	0x20000230
 8000b68:	20000231 	.word	0x20000231
 8000b6c:	0800d7a8 	.word	0x0800d7a8

08000b70 <getCurrentTimeMs>:

uint32_t getCurrentTimeMs() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8000b74:	f000 fc68 	bl	8001448 <HAL_GetTick>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <updateTaskDeadlines>:

void updateTaskDeadlines(uint32_t current_time) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NUM_TASKS; i++) {
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	e030      	b.n	8000bf0 <updateTaskDeadlines+0x70>
        if (current_time >= tasks[i].end_cycle) {
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c04 <updateTaskDeadlines+0x84>)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4413      	add	r3, r2
 8000b96:	3304      	adds	r3, #4
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d324      	bcc.n	8000bea <updateTaskDeadlines+0x6a>
            tasks[i].end_cycle += tasks[i].period;
 8000ba0:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <updateTaskDeadlines+0x84>)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3304      	adds	r3, #4
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4915      	ldr	r1, [pc, #84]	@ (8000c04 <updateTaskDeadlines+0x84>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	440b      	add	r3, r1
 8000bb4:	330c      	adds	r3, #12
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	441a      	add	r2, r3
 8000bba:	4912      	ldr	r1, [pc, #72]	@ (8000c04 <updateTaskDeadlines+0x84>)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	011b      	lsls	r3, r3, #4
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	601a      	str	r2, [r3, #0]
            tasks[i].earliest_deadline = tasks[i].end_cycle - tasks[i].deadline;
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <updateTaskDeadlines+0x84>)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	4413      	add	r3, r2
 8000bce:	3304      	adds	r3, #4
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	490c      	ldr	r1, [pc, #48]	@ (8000c04 <updateTaskDeadlines+0x84>)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	440b      	add	r3, r1
 8000bda:	3308      	adds	r3, #8
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	1ad2      	subs	r2, r2, r3
 8000be0:	4908      	ldr	r1, [pc, #32]	@ (8000c04 <updateTaskDeadlines+0x84>)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	440b      	add	r3, r1
 8000be8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_TASKS; i++) {
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	ddcb      	ble.n	8000b8e <updateTaskDeadlines+0xe>
        }
    }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000000 	.word	0x20000000

08000c08 <getNextTask>:

int getNextTask() {
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
    int next_task = -1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	60fb      	str	r3, [r7, #12]
    uint32_t earliest_deadline = UINT32_MAX;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < NUM_TASKS; i++) {
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	e012      	b.n	8000c46 <getNextTask+0x3e>
        if (tasks[i].earliest_deadline < earliest_deadline) {
 8000c20:	4a0d      	ldr	r2, [pc, #52]	@ (8000c58 <getNextTask+0x50>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	4413      	add	r3, r2
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d907      	bls.n	8000c40 <getNextTask+0x38>
            earliest_deadline = tasks[i].earliest_deadline;
 8000c30:	4a09      	ldr	r2, [pc, #36]	@ (8000c58 <getNextTask+0x50>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	011b      	lsls	r3, r3, #4
 8000c36:	4413      	add	r3, r2
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	60bb      	str	r3, [r7, #8]
            next_task = i;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < NUM_TASKS; i++) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3301      	adds	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	dde9      	ble.n	8000c20 <getNextTask+0x18>
        }
    }
    return next_task;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000000 	.word	0x20000000

08000c5c <runEDF>:
static void MX_I2C1_Init(void);
void GetTempTask(void *argument);
void GetAccTask(void *argument);

/* USER CODE BEGIN PFP */
void runEDF() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af02      	add	r7, sp, #8
    uint32_t current_time;
    while (1) {
        if (!status1) {
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <runEDF+0xa8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	f083 0301 	eor.w	r3, r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <runEDF+0x1c>
            osDelay(100); // Tạm dừng nếu hệ thống không hoạt động
 8000c70:	2064      	movs	r0, #100	@ 0x64
 8000c72:	f008 fc7f 	bl	8009574 <osDelay>
            continue;
 8000c76:	e043      	b.n	8000d00 <runEDF+0xa4>
        }

        current_time = getCurrentTimeMs();
 8000c78:	f7ff ff7a 	bl	8000b70 <getCurrentTimeMs>
 8000c7c:	60b8      	str	r0, [r7, #8]
        updateTaskDeadlines(current_time);
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f7ff ff7e 	bl	8000b80 <updateTaskDeadlines>
        printf("Current Time: %lu ms\n", current_time); // In thời gian hiện tại
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	4820      	ldr	r0, [pc, #128]	@ (8000d08 <runEDF+0xac>)
 8000c88:	f00b fe3a 	bl	800c900 <iprintf>
        for (int i = 0; i < NUM_TASKS; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e019      	b.n	8000cc6 <runEDF+0x6a>
                    printf("Task %d -> Deadline: %lu ms, End Cycle: %lu ms, Period: %lu ms\n",
 8000c92:	4a1e      	ldr	r2, [pc, #120]	@ (8000d0c <runEDF+0xb0>)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	4413      	add	r3, r2
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	491b      	ldr	r1, [pc, #108]	@ (8000d0c <runEDF+0xb0>)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	011b      	lsls	r3, r3, #4
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	6819      	ldr	r1, [r3, #0]
 8000ca8:	4818      	ldr	r0, [pc, #96]	@ (8000d0c <runEDF+0xb0>)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	4403      	add	r3, r0
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	68f9      	ldr	r1, [r7, #12]
 8000cba:	4815      	ldr	r0, [pc, #84]	@ (8000d10 <runEDF+0xb4>)
 8000cbc:	f00b fe20 	bl	800c900 <iprintf>
        for (int i = 0; i < NUM_TASKS; i++) {
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	dde2      	ble.n	8000c92 <runEDF+0x36>
                        i, tasks[i].earliest_deadline, tasks[i].end_cycle, tasks[i].period);
                }
        int next_task = getNextTask();
 8000ccc:	f7ff ff9c 	bl	8000c08 <getNextTask>
 8000cd0:	6078      	str	r0, [r7, #4]
        if (next_task == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d106      	bne.n	8000ce6 <runEDF+0x8a>
        	 printf("Next Task: GetTempTask\n"); // In ra thông báo về task tiếp theo
 8000cd8:	480e      	ldr	r0, [pc, #56]	@ (8000d14 <runEDF+0xb8>)
 8000cda:	f00b fe79 	bl	800c9d0 <puts>
            GetTempTask(NULL);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f924 	bl	8000f2c <GetTempTask>
 8000ce4:	e008      	b.n	8000cf8 <runEDF+0x9c>
        } else if (next_task == 1) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d105      	bne.n	8000cf8 <runEDF+0x9c>
        	 printf("Next Task: GetAccTask\n"); // In ra thông báo về task tiếp theo
 8000cec:	480a      	ldr	r0, [pc, #40]	@ (8000d18 <runEDF+0xbc>)
 8000cee:	f00b fe6f 	bl	800c9d0 <puts>
            GetAccTask(NULL);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f93c 	bl	8000f70 <GetAccTask>
        }

        osDelay(1000); // Tránh sử dụng quá nhiều CPU
 8000cf8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cfc:	f008 fc3a 	bl	8009574 <osDelay>
    while (1) {
 8000d00:	e7af      	b.n	8000c62 <runEDF+0x6>
 8000d02:	bf00      	nop
 8000d04:	20000230 	.word	0x20000230
 8000d08:	0800d7b0 	.word	0x0800d7b0
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	0800d7c8 	.word	0x0800d7c8
 8000d14:	0800d808 	.word	0x0800d808
 8000d18:	0800d820 	.word	0x0800d820

08000d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d20:	f000 fb6a 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d24:	f000 f82e 	bl	8000d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d28:	f000 f8b6 	bl	8000e98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d2c:	f000 f886 	bl	8000e3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 8000d30:	f00b f882 	bl	800be38 <MX_USB_DEVICE_Init>
  dht22_init();
 8000d34:	f7ff fd2e 	bl	8000794 <dht22_init>
 MPU6050_Init();
 8000d38:	f7ff fe1e 	bl	8000978 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d3c:	f008 fb40 	bl	80093c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TempTask */
  TempTaskHandle = osThreadNew(GetTempTask, NULL, &TempTask_attributes);
 8000d40:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <main+0x50>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	480a      	ldr	r0, [pc, #40]	@ (8000d70 <main+0x54>)
 8000d46:	f008 fb83 	bl	8009450 <osThreadNew>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a09      	ldr	r2, [pc, #36]	@ (8000d74 <main+0x58>)
 8000d4e:	6013      	str	r3, [r2, #0]

  /* creation of AccTask */
  AccTaskHandle = osThreadNew(GetAccTask, NULL, &AccTask_attributes);
 8000d50:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <main+0x5c>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <main+0x60>)
 8000d56:	f008 fb7b 	bl	8009450 <osThreadNew>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a08      	ldr	r2, [pc, #32]	@ (8000d80 <main+0x64>)
 8000d5e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d60:	f008 fb50 	bl	8009404 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  runEDF(); // Chạy EDF scheduler
 8000d64:	f7ff ff7a 	bl	8000c5c <runEDF>

      while (1) {}
 8000d68:	bf00      	nop
 8000d6a:	e7fd      	b.n	8000d68 <main+0x4c>
 8000d6c:	0800d8ac 	.word	0x0800d8ac
 8000d70:	08000f2d 	.word	0x08000f2d
 8000d74:	200002c8 	.word	0x200002c8
 8000d78:	0800d8d0 	.word	0x0800d8d0
 8000d7c:	08000f71 	.word	0x08000f71
 8000d80:	200002cc 	.word	0x200002cc

08000d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b094      	sub	sp, #80	@ 0x50
 8000d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d8e:	2228      	movs	r2, #40	@ 0x28
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00b fefc 	bl	800cb90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000dd0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 fc78 	bl	80046d0 <HAL_RCC_OscConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000de6:	f000 f91f 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dea:	230f      	movs	r3, #15
 8000dec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dfa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2101      	movs	r1, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fee4 	bl	8004bd4 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e12:	f000 f909 	bl	8001028 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e16:	2310      	movs	r3, #16
 8000e18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000e1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e1e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 f894 	bl	8004f50 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e2e:	f000 f8fb 	bl	8001028 <Error_Handler>
  }
}
 8000e32:	bf00      	nop
 8000e34:	3750      	adds	r7, #80	@ 0x50
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e42:	4a13      	ldr	r2, [pc, #76]	@ (8000e90 <MX_I2C1_Init+0x54>)
 8000e44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e48:	4a12      	ldr	r2, [pc, #72]	@ (8000e94 <MX_I2C1_Init+0x58>)
 8000e4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_I2C1_Init+0x50>)
 8000e7a:	f000 fe63 	bl	8001b44 <HAL_I2C_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e84:	f000 f8d0 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000274 	.word	0x20000274
 8000e90:	40005400 	.word	0x40005400
 8000e94:	000186a0 	.word	0x000186a0

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000eb2:	f043 0320 	orr.w	r3, r3, #32
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a16      	ldr	r2, [pc, #88]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b14      	ldr	r3, [pc, #80]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a10      	ldr	r2, [pc, #64]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_GPIO_Init+0x8c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <MX_GPIO_Init+0x90>)
 8000efa:	f000 fe0a 	bl	8001b12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000efe:	2304      	movs	r3, #4
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <MX_GPIO_Init+0x90>)
 8000f16:	f000 fba5 	bl	8001664 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010800 	.word	0x40010800

08000f2c <GetTempTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_GetTempTask */
void GetTempTask(void *argument)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f34:	f00a ff80 	bl	800be38 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (status1) {
 8000f38:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <GetTempTask+0x38>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00c      	beq.n	8000f5a <GetTempTask+0x2e>
		  DHT22_Get_Temp(&temp);
 8000f40:	4809      	ldr	r0, [pc, #36]	@ (8000f68 <GetTempTask+0x3c>)
 8000f42:	f7ff fc51 	bl	80007e8 <DHT22_Get_Temp>

		  	  printf("t=%d\n", (int) temp);
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <GetTempTask+0x3c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fbde 	bl	800070c <__aeabi_f2iz>
 8000f50:	4603      	mov	r3, r0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <GetTempTask+0x40>)
 8000f56:	f00b fcd3 	bl	800c900 <iprintf>
	  }

    osDelay(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5e:	f008 fb09 	bl	8009574 <osDelay>
	  if (status1) {
 8000f62:	e7e9      	b.n	8000f38 <GetTempTask+0xc>
 8000f64:	20000230 	.word	0x20000230
 8000f68:	2000022c 	.word	0x2000022c
 8000f6c:	0800d838 	.word	0x0800d838

08000f70 <GetAccTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GetAccTask */
void GetAccTask(void *argument)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetAccTask */
  /* Infinite loop */
  for(;;)
  {

	  if (status2) {
 8000f78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff0 <GetAccTask+0x80>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d032      	beq.n	8000fe6 <GetAccTask+0x76>
		  MPU6050_Read_Accel();
 8000f80:	f7ff fd50 	bl	8000a24 <MPU6050_Read_Accel>
		    //	  intPart = (int)floorf(Ax * 100);
	  	  printf("ax=%c%d.%d\n", (Ax < 0) ? '-': '+',(int) Ax, abs( ((int)(Ax * 10000)) % 10000)  );
 8000f84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <GetAccTask+0x84>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f04f 0100 	mov.w	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fb95 	bl	80006bc <__aeabi_fcmplt>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <GetAccTask+0x2c>
 8000f98:	242d      	movs	r4, #45	@ 0x2d
 8000f9a:	e000      	b.n	8000f9e <GetAccTask+0x2e>
 8000f9c:	242b      	movs	r4, #43	@ 0x2b
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <GetAccTask+0x84>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fbb2 	bl	800070c <__aeabi_f2iz>
 8000fa8:	4605      	mov	r5, r0
 8000faa:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <GetAccTask+0x84>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4912      	ldr	r1, [pc, #72]	@ (8000ff8 <GetAccTask+0x88>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f9e5 	bl	8000380 <__aeabi_fmul>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fba7 	bl	800070c <__aeabi_f2iz>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <GetAccTask+0x8c>)
 8000fc2:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc6:	1319      	asrs	r1, r3, #12
 8000fc8:	17d3      	asrs	r3, r2, #31
 8000fca:	1acb      	subs	r3, r1, r3
 8000fcc:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	bfb8      	it	lt
 8000fda:	425b      	neglt	r3, r3
 8000fdc:	462a      	mov	r2, r5
 8000fde:	4621      	mov	r1, r4
 8000fe0:	4807      	ldr	r0, [pc, #28]	@ (8001000 <GetAccTask+0x90>)
 8000fe2:	f00b fc8d 	bl	800c900 <iprintf>
	  }

    osDelay(1000);
 8000fe6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fea:	f008 fac3 	bl	8009574 <osDelay>
	  if (status2) {
 8000fee:	e7c3      	b.n	8000f78 <GetAccTask+0x8>
 8000ff0:	20000231 	.word	0x20000231
 8000ff4:	20000220 	.word	0x20000220
 8000ff8:	461c4000 	.word	0x461c4000
 8000ffc:	68db8bad 	.word	0x68db8bad
 8001000:	0800d840 	.word	0x0800d840

08001004 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d101      	bne.n	800101a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001016:	f000 fa05 	bl	8001424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40012c00 	.word	0x40012c00

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <Error_Handler+0x8>

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800103a:	4b18      	ldr	r3, [pc, #96]	@ (800109c <HAL_MspInit+0x68>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a17      	ldr	r2, [pc, #92]	@ (800109c <HAL_MspInit+0x68>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_MspInit+0x68>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_MspInit+0x68>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	4a11      	ldr	r2, [pc, #68]	@ (800109c <HAL_MspInit+0x68>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105c:	61d3      	str	r3, [r2, #28]
 800105e:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <HAL_MspInit+0x68>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	210f      	movs	r1, #15
 800106e:	f06f 0001 	mvn.w	r0, #1
 8001072:	f000 facc 	bl	800160e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001076:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <HAL_MspInit+0x6c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_MspInit+0x6c>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000

080010a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a15      	ldr	r2, [pc, #84]	@ (8001114 <HAL_I2C_MspInit+0x70>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d123      	bne.n	800110c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <HAL_I2C_MspInit+0x74>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <HAL_I2C_MspInit+0x74>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_I2C_MspInit+0x74>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010dc:	23c0      	movs	r3, #192	@ 0xc0
 80010de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e0:	2312      	movs	r3, #18
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	480b      	ldr	r0, [pc, #44]	@ (800111c <HAL_I2C_MspInit+0x78>)
 80010f0:	f000 fab8 	bl	8001664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <HAL_I2C_MspInit+0x74>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <HAL_I2C_MspInit+0x74>)
 80010fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010fe:	61d3      	str	r3, [r2, #28]
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <HAL_I2C_MspInit+0x74>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40005400 	.word	0x40005400
 8001118:	40021000 	.word	0x40021000
 800111c:	40010c00 	.word	0x40010c00

08001120 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001136:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <HAL_InitTick+0xd0>)
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	4a2d      	ldr	r2, [pc, #180]	@ (80011f0 <HAL_InitTick+0xd0>)
 800113c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001140:	6193      	str	r3, [r2, #24]
 8001142:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <HAL_InitTick+0xd0>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114e:	f107 020c 	add.w	r2, r7, #12
 8001152:	f107 0310 	add.w	r3, r7, #16
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f003 feab 	bl	8004eb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800115e:	f003 fe95 	bl	8004e8c <HAL_RCC_GetPCLK2Freq>
 8001162:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001166:	4a23      	ldr	r2, [pc, #140]	@ (80011f4 <HAL_InitTick+0xd4>)
 8001168:	fba2 2303 	umull	r2, r3, r2, r3
 800116c:	0c9b      	lsrs	r3, r3, #18
 800116e:	3b01      	subs	r3, #1
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001172:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <HAL_InitTick+0xd8>)
 8001174:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <HAL_InitTick+0xdc>)
 8001176:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <HAL_InitTick+0xd8>)
 800117a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800117e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001180:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <HAL_InitTick+0xd8>)
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001186:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <HAL_InitTick+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <HAL_InitTick+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_InitTick+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001198:	4817      	ldr	r0, [pc, #92]	@ (80011f8 <HAL_InitTick+0xd8>)
 800119a:	f003 ff8f 	bl	80050bc <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80011a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d11b      	bne.n	80011e4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011ac:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <HAL_InitTick+0xd8>)
 80011ae:	f003 ffdd 	bl	800516c <HAL_TIM_Base_Start_IT>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80011b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d111      	bne.n	80011e4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011c0:	2019      	movs	r0, #25
 80011c2:	f000 fa40 	bl	8001646 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d808      	bhi.n	80011de <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	2019      	movs	r0, #25
 80011d2:	f000 fa1c 	bl	800160e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <HAL_InitTick+0xe0>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	e002      	b.n	80011e4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3730      	adds	r7, #48	@ 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000
 80011f4:	431bde83 	.word	0x431bde83
 80011f8:	200002d0 	.word	0x200002d0
 80011fc:	40012c00 	.word	0x40012c00
 8001200:	20000024 	.word	0x20000024

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <MemManage_Handler+0x4>

0800121c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <UsageFault_Handler+0x4>

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800123e:	f001 fe02 	bl	8002e46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200029d0 	.word	0x200029d0

0800124c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <TIM1_UP_IRQHandler+0x10>)
 8001252:	f003 ffdd 	bl	8005210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002d0 	.word	0x200002d0

08001260 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e00a      	b.n	8001288 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001272:	f3af 8000 	nop.w
 8001276:	4601      	mov	r1, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf0      	blt.n	8001272 <_read+0x12>
  }

  return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e009      	b.n	80012c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	60ba      	str	r2, [r7, #8]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fb4d 	bl	8000954 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbf1      	blt.n	80012ac <_write+0x12>
  }
  return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_close>:

int _close(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012f8:	605a      	str	r2, [r3, #4]
  return 0;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr

08001306 <_isatty>:

int _isatty(int file)
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131a:	b480      	push	{r7}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
	...

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	@ (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f00b fcb8 	bl	800ccd8 <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20005000 	.word	0x20005000
 8001394:	00000400 	.word	0x00000400
 8001398:	20000318 	.word	0x20000318
 800139c:	20003018 	.word	0x20003018

080013a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ac:	f7ff fff8 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013b2:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b4:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013c8:	4c09      	ldr	r4, [pc, #36]	@ (80013f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f00b fc85 	bl	800cce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fc9f 	bl	8000d1c <main>
  bx lr
 80013de:	4770      	bx	lr
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80013e8:	0800d964 	.word	0x0800d964
  ldr r2, =_sbss
 80013ec:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80013f0:	20003014 	.word	0x20003014

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <HAL_Init+0x28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <HAL_Init+0x28>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f8f5 	bl	80015f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	200f      	movs	r0, #15
 8001410:	f7ff fe86 	bl	8001120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fe0e 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x1c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_IncTick+0x20>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a03      	ldr	r2, [pc, #12]	@ (8001444 <HAL_IncTick+0x20>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000028 	.word	0x20000028
 8001444:	2000031c 	.word	0x2000031c

08001448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b02      	ldr	r3, [pc, #8]	@ (8001458 <HAL_GetTick+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	2000031c 	.word	0x2000031c

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fff0 	bl	8001448 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffe0 	bl	8001448 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000028 	.word	0x20000028

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4906      	ldr	r1, [pc, #24]	@ (800153c <__NVIC_EnableIRQ+0x34>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100

08001540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	db0a      	blt.n	800156a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	b2da      	uxtb	r2, r3
 8001558:	490c      	ldr	r1, [pc, #48]	@ (800158c <__NVIC_SetPriority+0x4c>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	0112      	lsls	r2, r2, #4
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	440b      	add	r3, r1
 8001564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001568:	e00a      	b.n	8001580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4908      	ldr	r1, [pc, #32]	@ (8001590 <__NVIC_SetPriority+0x50>)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	3b04      	subs	r3, #4
 8001578:	0112      	lsls	r2, r2, #4
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	440b      	add	r3, r1
 800157e:	761a      	strb	r2, [r3, #24]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f1c3 0307 	rsb	r3, r3, #7
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	bf28      	it	cs
 80015b2:	2304      	movcs	r3, #4
 80015b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3304      	adds	r3, #4
 80015ba:	2b06      	cmp	r3, #6
 80015bc:	d902      	bls.n	80015c4 <NVIC_EncodePriority+0x30>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3b03      	subs	r3, #3
 80015c2:	e000      	b.n	80015c6 <NVIC_EncodePriority+0x32>
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c8:	f04f 32ff 	mov.w	r2, #4294967295
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43da      	mvns	r2, r3
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	401a      	ands	r2, r3
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	4313      	orrs	r3, r2
         );
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3724      	adds	r7, #36	@ 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff ff4f 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800160e:	b580      	push	{r7, lr}
 8001610:	b086      	sub	sp, #24
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	607a      	str	r2, [r7, #4]
 800161a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001620:	f7ff ff64 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68b9      	ldr	r1, [r7, #8]
 800162a:	6978      	ldr	r0, [r7, #20]
 800162c:	f7ff ffb2 	bl	8001594 <NVIC_EncodePriority>
 8001630:	4602      	mov	r2, r0
 8001632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff81 	bl	8001540 <__NVIC_SetPriority>
}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff57 	bl	8001508 <__NVIC_EnableIRQ>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b08b      	sub	sp, #44	@ 0x2c
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001676:	e169      	b.n	800194c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001678:	2201      	movs	r2, #1
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8158 	bne.w	8001946 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a9a      	ldr	r2, [pc, #616]	@ (8001904 <HAL_GPIO_Init+0x2a0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d05e      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016a0:	4a98      	ldr	r2, [pc, #608]	@ (8001904 <HAL_GPIO_Init+0x2a0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d875      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016a6:	4a98      	ldr	r2, [pc, #608]	@ (8001908 <HAL_GPIO_Init+0x2a4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d058      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016ac:	4a96      	ldr	r2, [pc, #600]	@ (8001908 <HAL_GPIO_Init+0x2a4>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d86f      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016b2:	4a96      	ldr	r2, [pc, #600]	@ (800190c <HAL_GPIO_Init+0x2a8>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d052      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016b8:	4a94      	ldr	r2, [pc, #592]	@ (800190c <HAL_GPIO_Init+0x2a8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d869      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016be:	4a94      	ldr	r2, [pc, #592]	@ (8001910 <HAL_GPIO_Init+0x2ac>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d04c      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016c4:	4a92      	ldr	r2, [pc, #584]	@ (8001910 <HAL_GPIO_Init+0x2ac>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d863      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016ca:	4a92      	ldr	r2, [pc, #584]	@ (8001914 <HAL_GPIO_Init+0x2b0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d046      	beq.n	800175e <HAL_GPIO_Init+0xfa>
 80016d0:	4a90      	ldr	r2, [pc, #576]	@ (8001914 <HAL_GPIO_Init+0x2b0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d85d      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016d6:	2b12      	cmp	r3, #18
 80016d8:	d82a      	bhi.n	8001730 <HAL_GPIO_Init+0xcc>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d859      	bhi.n	8001792 <HAL_GPIO_Init+0x12e>
 80016de:	a201      	add	r2, pc, #4	@ (adr r2, 80016e4 <HAL_GPIO_Init+0x80>)
 80016e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e4:	0800175f 	.word	0x0800175f
 80016e8:	08001739 	.word	0x08001739
 80016ec:	0800174b 	.word	0x0800174b
 80016f0:	0800178d 	.word	0x0800178d
 80016f4:	08001793 	.word	0x08001793
 80016f8:	08001793 	.word	0x08001793
 80016fc:	08001793 	.word	0x08001793
 8001700:	08001793 	.word	0x08001793
 8001704:	08001793 	.word	0x08001793
 8001708:	08001793 	.word	0x08001793
 800170c:	08001793 	.word	0x08001793
 8001710:	08001793 	.word	0x08001793
 8001714:	08001793 	.word	0x08001793
 8001718:	08001793 	.word	0x08001793
 800171c:	08001793 	.word	0x08001793
 8001720:	08001793 	.word	0x08001793
 8001724:	08001793 	.word	0x08001793
 8001728:	08001741 	.word	0x08001741
 800172c:	08001755 	.word	0x08001755
 8001730:	4a79      	ldr	r2, [pc, #484]	@ (8001918 <HAL_GPIO_Init+0x2b4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001736:	e02c      	b.n	8001792 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e029      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e024      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e01f      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e01a      	b.n	8001794 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001766:	2304      	movs	r3, #4
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e013      	b.n	8001794 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]
          break;
 800177e:	e009      	b.n	8001794 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	615a      	str	r2, [r3, #20]
          break;
 800178a:	e003      	b.n	8001794 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x130>
          break;
 8001792:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2bff      	cmp	r3, #255	@ 0xff
 8001798:	d801      	bhi.n	800179e <HAL_GPIO_Init+0x13a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	e001      	b.n	80017a2 <HAL_GPIO_Init+0x13e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	@ 0xff
 80017a8:	d802      	bhi.n	80017b0 <HAL_GPIO_Init+0x14c>
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_Init+0x152>
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	3b08      	subs	r3, #8
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	210f      	movs	r1, #15
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	6a39      	ldr	r1, [r7, #32]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	431a      	orrs	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80b1 	beq.w	8001946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e4:	4b4d      	ldr	r3, [pc, #308]	@ (800191c <HAL_GPIO_Init+0x2b8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a4c      	ldr	r2, [pc, #304]	@ (800191c <HAL_GPIO_Init+0x2b8>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b4a      	ldr	r3, [pc, #296]	@ (800191c <HAL_GPIO_Init+0x2b8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017fc:	4a48      	ldr	r2, [pc, #288]	@ (8001920 <HAL_GPIO_Init+0x2bc>)
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001808:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a40      	ldr	r2, [pc, #256]	@ (8001924 <HAL_GPIO_Init+0x2c0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_Init+0x1ec>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3f      	ldr	r2, [pc, #252]	@ (8001928 <HAL_GPIO_Init+0x2c4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_Init+0x1e8>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a3e      	ldr	r2, [pc, #248]	@ (800192c <HAL_GPIO_Init+0x2c8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1e4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3d      	ldr	r2, [pc, #244]	@ (8001930 <HAL_GPIO_Init+0x2cc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_Init+0x1e0>
 8001840:	2303      	movs	r3, #3
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001844:	2304      	movs	r3, #4
 8001846:	e004      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001848:	2302      	movs	r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_Init+0x1ee>
 8001850:	2300      	movs	r3, #0
 8001852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001862:	492f      	ldr	r1, [pc, #188]	@ (8001920 <HAL_GPIO_Init+0x2bc>)
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800187c:	4b2d      	ldr	r3, [pc, #180]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	492c      	ldr	r1, [pc, #176]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188a:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4928      	ldr	r1, [pc, #160]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 8001894:	4013      	ands	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a4:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	4922      	ldr	r1, [pc, #136]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	491e      	ldr	r1, [pc, #120]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4918      	ldr	r1, [pc, #96]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4914      	ldr	r1, [pc, #80]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d021      	beq.n	8001938 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	490e      	ldr	r1, [pc, #56]	@ (8001934 <HAL_GPIO_Init+0x2d0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
 8001900:	e021      	b.n	8001946 <HAL_GPIO_Init+0x2e2>
 8001902:	bf00      	nop
 8001904:	10320000 	.word	0x10320000
 8001908:	10310000 	.word	0x10310000
 800190c:	10220000 	.word	0x10220000
 8001910:	10210000 	.word	0x10210000
 8001914:	10120000 	.word	0x10120000
 8001918:	10110000 	.word	0x10110000
 800191c:	40021000 	.word	0x40021000
 8001920:	40010000 	.word	0x40010000
 8001924:	40010800 	.word	0x40010800
 8001928:	40010c00 	.word	0x40010c00
 800192c:	40011000 	.word	0x40011000
 8001930:	40011400 	.word	0x40011400
 8001934:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_GPIO_Init+0x304>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	43db      	mvns	r3, r3
 8001940:	4909      	ldr	r1, [pc, #36]	@ (8001968 <HAL_GPIO_Init+0x304>)
 8001942:	4013      	ands	r3, r2
 8001944:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	3301      	adds	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	fa22 f303 	lsr.w	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	f47f ae8e 	bne.w	8001678 <HAL_GPIO_Init+0x14>
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	372c      	adds	r7, #44	@ 0x2c
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800197a:	e09a      	b.n	8001ab2 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800197c:	2201      	movs	r2, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 808d 	beq.w	8001aac <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001992:	4a4e      	ldr	r2, [pc, #312]	@ (8001acc <HAL_GPIO_DeInit+0x160>)
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	3302      	adds	r3, #2
 800199a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4013      	ands	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a46      	ldr	r2, [pc, #280]	@ (8001ad0 <HAL_GPIO_DeInit+0x164>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d013      	beq.n	80019e4 <HAL_GPIO_DeInit+0x78>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a45      	ldr	r2, [pc, #276]	@ (8001ad4 <HAL_GPIO_DeInit+0x168>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_DeInit+0x74>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a44      	ldr	r2, [pc, #272]	@ (8001ad8 <HAL_GPIO_DeInit+0x16c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_DeInit+0x70>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a43      	ldr	r2, [pc, #268]	@ (8001adc <HAL_GPIO_DeInit+0x170>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_DeInit+0x6c>
 80019d4:	2303      	movs	r3, #3
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_DeInit+0x7a>
 80019d8:	2304      	movs	r3, #4
 80019da:	e004      	b.n	80019e6 <HAL_GPIO_DeInit+0x7a>
 80019dc:	2302      	movs	r3, #2
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_DeInit+0x7a>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_GPIO_DeInit+0x7a>
 80019e4:	2300      	movs	r3, #0
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	f002 0203 	and.w	r2, r2, #3
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d132      	bne.n	8001a5c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80019f6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4938      	ldr	r1, [pc, #224]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4934      	ldr	r1, [pc, #208]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001a12:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4931      	ldr	r1, [pc, #196]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001a20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	492d      	ldr	r1, [pc, #180]	@ (8001ae0 <HAL_GPIO_DeInit+0x174>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001a3e:	4a23      	ldr	r2, [pc, #140]	@ (8001acc <HAL_GPIO_DeInit+0x160>)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	43da      	mvns	r2, r3
 8001a4e:	481f      	ldr	r0, [pc, #124]	@ (8001acc <HAL_GPIO_DeInit+0x160>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	400a      	ands	r2, r1
 8001a56:	3302      	adds	r3, #2
 8001a58:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2bff      	cmp	r3, #255	@ 0xff
 8001a60:	d801      	bhi.n	8001a66 <HAL_GPIO_DeInit+0xfa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_DeInit+0xfe>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2bff      	cmp	r3, #255	@ 0xff
 8001a70:	d802      	bhi.n	8001a78 <HAL_GPIO_DeInit+0x10c>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_DeInit+0x112>
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	3b08      	subs	r3, #8
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	210f      	movs	r1, #15
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	401a      	ands	r2, r3
 8001a90:	2104      	movs	r1, #4
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f af5e 	bne.w	800197c <HAL_GPIO_DeInit+0x10>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3724      	adds	r7, #36	@ 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40010800 	.word	0x40010800
 8001ad4:	40010c00 	.word	0x40010c00
 8001ad8:	40011000 	.word	0x40011000
 8001adc:	40011400 	.word	0x40011400
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e001      	b.n	8001b06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	807b      	strh	r3, [r7, #2]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b22:	787b      	ldrb	r3, [r7, #1]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b28:	887a      	ldrh	r2, [r7, #2]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b2e:	e003      	b.n	8001b38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	611a      	str	r2, [r3, #16]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e12b      	b.n	8001dae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d106      	bne.n	8001b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fa9a 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0201 	bic.w	r2, r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ba6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ba8:	f003 f95c 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 8001bac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a81      	ldr	r2, [pc, #516]	@ (8001db8 <HAL_I2C_Init+0x274>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d807      	bhi.n	8001bc8 <HAL_I2C_Init+0x84>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4a80      	ldr	r2, [pc, #512]	@ (8001dbc <HAL_I2C_Init+0x278>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	bf94      	ite	ls
 8001bc0:	2301      	movls	r3, #1
 8001bc2:	2300      	movhi	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	e006      	b.n	8001bd6 <HAL_I2C_Init+0x92>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a7d      	ldr	r2, [pc, #500]	@ (8001dc0 <HAL_I2C_Init+0x27c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bf94      	ite	ls
 8001bd0:	2301      	movls	r3, #1
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0e7      	b.n	8001dae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4a78      	ldr	r2, [pc, #480]	@ (8001dc4 <HAL_I2C_Init+0x280>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a6a      	ldr	r2, [pc, #424]	@ (8001db8 <HAL_I2C_Init+0x274>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d802      	bhi.n	8001c18 <HAL_I2C_Init+0xd4>
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	3301      	adds	r3, #1
 8001c16:	e009      	b.n	8001c2c <HAL_I2C_Init+0xe8>
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	4a69      	ldr	r2, [pc, #420]	@ (8001dc8 <HAL_I2C_Init+0x284>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	099b      	lsrs	r3, r3, #6
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	495c      	ldr	r1, [pc, #368]	@ (8001db8 <HAL_I2C_Init+0x274>)
 8001c48:	428b      	cmp	r3, r1
 8001c4a:	d819      	bhi.n	8001c80 <HAL_I2C_Init+0x13c>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1e59      	subs	r1, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5a:	1c59      	adds	r1, r3, #1
 8001c5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c60:	400b      	ands	r3, r1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <HAL_I2C_Init+0x138>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1e59      	subs	r1, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7a:	e051      	b.n	8001d20 <HAL_I2C_Init+0x1dc>
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	e04f      	b.n	8001d20 <HAL_I2C_Init+0x1dc>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d111      	bne.n	8001cac <HAL_I2C_Init+0x168>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	440b      	add	r3, r1
 8001c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	e012      	b.n	8001cd2 <HAL_I2C_Init+0x18e>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1e58      	subs	r0, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	0099      	lsls	r1, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Init+0x196>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e022      	b.n	8001d20 <HAL_I2C_Init+0x1dc>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10e      	bne.n	8001d00 <HAL_I2C_Init+0x1bc>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1e58      	subs	r0, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	440b      	add	r3, r1
 8001cf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cfe:	e00f      	b.n	8001d20 <HAL_I2C_Init+0x1dc>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e58      	subs	r0, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	0099      	lsls	r1, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	6809      	ldr	r1, [r1, #0]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6911      	ldr	r1, [r2, #16]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68d2      	ldr	r2, [r2, #12]
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	000186a0 	.word	0x000186a0
 8001dbc:	001e847f 	.word	0x001e847f
 8001dc0:	003d08ff 	.word	0x003d08ff
 8001dc4:	431bde83 	.word	0x431bde83
 8001dc8:	10624dd3 	.word	0x10624dd3

08001dcc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af02      	add	r7, sp, #8
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	817b      	strh	r3, [r7, #10]
 8001dde:	460b      	mov	r3, r1
 8001de0:	813b      	strh	r3, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001de6:	f7ff fb2f 	bl	8001448 <HAL_GetTick>
 8001dea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b20      	cmp	r3, #32
 8001df6:	f040 80d9 	bne.w	8001fac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2319      	movs	r3, #25
 8001e00:	2201      	movs	r2, #1
 8001e02:	496d      	ldr	r1, [pc, #436]	@ (8001fb8 <HAL_I2C_Mem_Write+0x1ec>)
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 fccd 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e10:	2302      	movs	r3, #2
 8001e12:	e0cc      	b.n	8001fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_I2C_Mem_Write+0x56>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e0c5      	b.n	8001fae <HAL_I2C_Mem_Write+0x1e2>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d007      	beq.n	8001e48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2221      	movs	r2, #33	@ 0x21
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2240      	movs	r2, #64	@ 0x40
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a4d      	ldr	r2, [pc, #308]	@ (8001fbc <HAL_I2C_Mem_Write+0x1f0>)
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e8a:	88f8      	ldrh	r0, [r7, #6]
 8001e8c:	893a      	ldrh	r2, [r7, #8]
 8001e8e:	8979      	ldrh	r1, [r7, #10]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4603      	mov	r3, r0
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fb04 	bl	80024a8 <I2C_RequestMemoryWrite>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d052      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e081      	b.n	8001fae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fd92 	bl	80029d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d107      	bne.n	8001ed2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06b      	b.n	8001fae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d11b      	bne.n	8001f4c <HAL_I2C_Mem_Write+0x180>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d017      	beq.n	8001f4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2c:	1c5a      	adds	r2, r3, #1
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1aa      	bne.n	8001eaa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f000 fd85 	bl	8002a68 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00d      	beq.n	8001f80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d107      	bne.n	8001f7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e016      	b.n	8001fae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	00100002 	.word	0x00100002
 8001fbc:	ffff0000 	.word	0xffff0000

08001fc0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	@ 0x30
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	817b      	strh	r3, [r7, #10]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	813b      	strh	r3, [r7, #8]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fde:	f7ff fa33 	bl	8001448 <HAL_GetTick>
 8001fe2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b20      	cmp	r3, #32
 8001fee:	f040 8250 	bne.w	8002492 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2319      	movs	r3, #25
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4982      	ldr	r1, [pc, #520]	@ (8002204 <HAL_I2C_Mem_Read+0x244>)
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fbd1 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
 800200a:	e243      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_I2C_Mem_Read+0x5a>
 8002016:	2302      	movs	r3, #2
 8002018:	e23c      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d007      	beq.n	8002040 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800204e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2222      	movs	r2, #34	@ 0x22
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2240      	movs	r2, #64	@ 0x40
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002076:	b29a      	uxth	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a62      	ldr	r2, [pc, #392]	@ (8002208 <HAL_I2C_Mem_Read+0x248>)
 8002080:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002082:	88f8      	ldrh	r0, [r7, #6]
 8002084:	893a      	ldrh	r2, [r7, #8]
 8002086:	8979      	ldrh	r1, [r7, #10]
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4603      	mov	r3, r0
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fa9e 	bl	80025d4 <I2C_RequestMemoryRead>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e1f8      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d113      	bne.n	80020d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e1cc      	b.n	800246c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d11e      	bne.n	8002118 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020ea:	b672      	cpsid	i
}
 80020ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002112:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002114:	b662      	cpsie	i
}
 8002116:	e035      	b.n	8002184 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211c:	2b02      	cmp	r3, #2
 800211e:	d11e      	bne.n	800215e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800212e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002158:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800215a:	b662      	cpsie	i
}
 800215c:	e012      	b.n	8002184 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800216c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002184:	e172      	b.n	800246c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	2b03      	cmp	r3, #3
 800218c:	f200 811f 	bhi.w	80023ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002194:	2b01      	cmp	r3, #1
 8002196:	d123      	bne.n	80021e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fcab 	bl	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e173      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021de:	e145      	b.n	800246c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d152      	bne.n	800228e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ee:	2200      	movs	r2, #0
 80021f0:	4906      	ldr	r1, [pc, #24]	@ (800220c <HAL_I2C_Mem_Read+0x24c>)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fad6 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e148      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
 8002202:	bf00      	nop
 8002204:	00100002 	.word	0x00100002
 8002208:	ffff0000 	.word	0xffff0000
 800220c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002210:	b672      	cpsid	i
}
 8002212:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	3b01      	subs	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002256:	b662      	cpsie	i
}
 8002258:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800228c:	e0ee      	b.n	800246c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800228e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002294:	2200      	movs	r2, #0
 8002296:	4981      	ldr	r1, [pc, #516]	@ (800249c <HAL_I2C_Mem_Read+0x4dc>)
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fa83 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0f5      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022b8:	b672      	cpsid	i
}
 80022ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691a      	ldr	r2, [r3, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022ee:	4b6c      	ldr	r3, [pc, #432]	@ (80024a0 <HAL_I2C_Mem_Read+0x4e0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	4a6b      	ldr	r2, [pc, #428]	@ (80024a4 <HAL_I2C_Mem_Read+0x4e4>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a1a      	lsrs	r2, r3, #8
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00da      	lsls	r2, r3, #3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	3b01      	subs	r3, #1
 800230c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d118      	bne.n	8002346 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002336:	b662      	cpsie	i
}
 8002338:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e0a6      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b04      	cmp	r3, #4
 8002352:	d1d9      	bne.n	8002308 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002396:	b662      	cpsie	i
}
 8002398:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023cc:	e04e      	b.n	800246c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fb90 	bl	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e058      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d124      	bne.n	800246c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	2b03      	cmp	r3, #3
 8002428:	d107      	bne.n	800243a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002438:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f ae88 	bne.w	8002186 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	00010004 	.word	0x00010004
 80024a0:	20000020 	.word	0x20000020
 80024a4:	14f8b589 	.word	0x14f8b589

080024a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	4608      	mov	r0, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	461a      	mov	r2, r3
 80024b6:	4603      	mov	r3, r0
 80024b8:	817b      	strh	r3, [r7, #10]
 80024ba:	460b      	mov	r3, r1
 80024bc:	813b      	strh	r3, [r7, #8]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	2200      	movs	r2, #0
 80024da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f960 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024f8:	d103      	bne.n	8002502 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e05f      	b.n	80025c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002514:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	492d      	ldr	r1, [pc, #180]	@ (80025d0 <I2C_RequestMemoryWrite+0x128>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f9bb 	bl	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e04c      	b.n	80025c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002544:	6a39      	ldr	r1, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fa46 	bl	80029d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d107      	bne.n	800256a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002568:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e02b      	b.n	80025c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	e021      	b.n	80025c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	b29b      	uxth	r3, r3
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002590:	6a39      	ldr	r1, [r7, #32]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fa20 	bl	80029d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d107      	bne.n	80025b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e005      	b.n	80025c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ba:	893b      	ldrh	r3, [r7, #8]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	00010002 	.word	0x00010002

080025d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	817b      	strh	r3, [r7, #10]
 80025e6:	460b      	mov	r3, r1
 80025e8:	813b      	strh	r3, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800260c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	2200      	movs	r2, #0
 8002616:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f8c2 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00d      	beq.n	8002642 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002634:	d103      	bne.n	800263e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800263c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e0aa      	b.n	8002798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	4952      	ldr	r1, [pc, #328]	@ (80027a0 <I2C_RequestMemoryRead+0x1cc>)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f91d 	bl	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e097      	b.n	8002798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002680:	6a39      	ldr	r1, [r7, #32]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f9a8 	bl	80029d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	2b04      	cmp	r3, #4
 8002694:	d107      	bne.n	80026a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e076      	b.n	8002798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	611a      	str	r2, [r3, #16]
 80026ba:	e021      	b.n	8002700 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026bc:	893b      	ldrh	r3, [r7, #8]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f982 	bl	80029d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e050      	b.n	8002798 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026f6:	893b      	ldrh	r3, [r7, #8]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002702:	6a39      	ldr	r1, [r7, #32]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f967 	bl	80029d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00d      	beq.n	800272c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	2b04      	cmp	r3, #4
 8002716:	d107      	bne.n	8002728 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002726:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e035      	b.n	8002798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800273a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	2200      	movs	r2, #0
 8002744:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f82b 	bl	80027a4 <I2C_WaitOnFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002762:	d103      	bne.n	800276c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e013      	b.n	8002798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002770:	897b      	ldrh	r3, [r7, #10]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	4906      	ldr	r1, [pc, #24]	@ (80027a0 <I2C_RequestMemoryRead+0x1cc>)
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f886 	bl	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	00010002 	.word	0x00010002

080027a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027b4:	e048      	b.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d044      	beq.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027be:	f7fe fe43 	bl	8001448 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d302      	bcc.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d139      	bne.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10d      	bne.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	43da      	mvns	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4013      	ands	r3, r2
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	e00c      	b.n	8002814 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	43da      	mvns	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf0c      	ite	eq
 800280c:	2301      	moveq	r3, #1
 800280e:	2300      	movne	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	429a      	cmp	r2, r3
 8002818:	d116      	bne.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e023      	b.n	8002890 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10d      	bne.n	800286e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	461a      	mov	r2, r3
 800286c:	e00c      	b.n	8002888 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	429a      	cmp	r2, r3
 800288c:	d093      	beq.n	80027b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a6:	e071      	b.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b6:	d123      	bne.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	f043 0204 	orr.w	r2, r3, #4
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e067      	b.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002906:	d041      	beq.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002908:	f7fe fd9e 	bl	8001448 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	429a      	cmp	r2, r3
 8002916:	d302      	bcc.n	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d136      	bne.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d10c      	bne.n	8002942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf14      	ite	ne
 800293a:	2301      	movne	r3, #1
 800293c:	2300      	moveq	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	e00b      	b.n	800295a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	43da      	mvns	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4013      	ands	r3, r2
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e021      	b.n	80029d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10c      	bne.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	43da      	mvns	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4013      	ands	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	e00b      	b.n	80029c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4013      	ands	r3, r2
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	bf14      	ite	ne
 80029c2:	2301      	movne	r3, #1
 80029c4:	2300      	moveq	r3, #0
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f47f af6d 	bne.w	80028a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e4:	e034      	b.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f8e3 	bl	8002bb2 <I2C_IsAcknowledgeFailed>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e034      	b.n	8002a60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d028      	beq.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe fd23 	bl	8001448 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d11d      	bne.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1e:	2b80      	cmp	r3, #128	@ 0x80
 8002a20:	d016      	beq.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e007      	b.n	8002a60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5a:	2b80      	cmp	r3, #128	@ 0x80
 8002a5c:	d1c3      	bne.n	80029e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a74:	e034      	b.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f89b 	bl	8002bb2 <I2C_IsAcknowledgeFailed>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e034      	b.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d028      	beq.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fcdb 	bl	8001448 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11d      	bne.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d016      	beq.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d1c3      	bne.n	8002a76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b04:	e049      	b.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b10      	cmp	r3, #16
 8002b12:	d119      	bne.n	8002b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0210 	mvn.w	r2, #16
 8002b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e030      	b.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b48:	f7fe fc7e 	bl	8001448 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d302      	bcc.n	8002b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11d      	bne.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b68:	2b40      	cmp	r3, #64	@ 0x40
 8002b6a:	d016      	beq.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e007      	b.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba4:	2b40      	cmp	r3, #64	@ 0x40
 8002ba6:	d1ae      	bne.n	8002b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc8:	d11b      	bne.n	8002c02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bd2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f043 0204 	orr.w	r2, r3, #4
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e0e8      	b.n	8002df2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d106      	bne.n	8002c3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f009 faf7 	bl	800c228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fc96 	bl	800557e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5c:	f002 fc6c 	bl	8005538 <USB_CoreInit>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0bf      	b.n	8002df2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f002 fc9a 	bl	80055b2 <USB_SetCurrentMode>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b0      	b.n	8002df2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e03e      	b.n	8002d14 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3311      	adds	r3, #17
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3310      	adds	r3, #16
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	440b      	add	r3, r1
 8002ccc:	3313      	adds	r3, #19
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	3320      	adds	r3, #32
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3324      	adds	r3, #36	@ 0x24
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	3301      	adds	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d3bb      	bcc.n	8002c96 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e044      	b.n	8002dae <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	440b      	add	r3, r1
 8002d5e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	440b      	add	r3, r1
 8002da0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	3301      	adds	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	791b      	ldrb	r3, [r3, #4]
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3b5      	bcc.n	8002d24 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc2:	f002 fc02 	bl	80055ca <USB_DevInit>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e00c      	b.n	8002df2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f004 fe81 	bl	8007af2 <USB_DevDisconnect>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_PCD_Start+0x16>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e016      	b.n	8002e3e <HAL_PCD_Start+0x44>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fb98 	bl	8005552 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e22:	2101      	movs	r1, #1
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f009 fc72 	bl	800c70e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f004 fe55 	bl	8007ade <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b088      	sub	sp, #32
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f004 fe57 	bl	8007b06 <USB_ReadInterrupts>
 8002e58:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fb1a 	bl	800349e <PCD_EP_ISR_Handler>

    return;
 8002e6a:	e119      	b.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d013      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f009 fa45 	bl	800c31e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e94:	2100      	movs	r1, #0
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f905 	bl	80030a6 <HAL_PCD_SetAddress>

    return;
 8002e9c:	e100      	b.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ec0:	e0ee      	b.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00c      	beq.n	8002ee6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ee4:	e0dc      	b.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d027      	beq.n	8002f40 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0204 	bic.w	r2, r2, #4
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0208 	bic.w	r2, r2, #8
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f009 fa35 	bl	800c390 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002f3e:	e0af      	b.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 8083 	beq.w	8003052 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	77fb      	strb	r3, [r7, #31]
 8002f50:	e010      	b.n	8002f74 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	7ffb      	ldrb	r3, [r7, #31]
 8002f60:	8812      	ldrh	r2, [r2, #0]
 8002f62:	b292      	uxth	r2, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	3320      	adds	r3, #32
 8002f68:	443b      	add	r3, r7
 8002f6a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	3301      	adds	r3, #1
 8002f72:	77fb      	strb	r3, [r7, #31]
 8002f74:	7ffb      	ldrb	r3, [r7, #31]
 8002f76:	2b07      	cmp	r3, #7
 8002f78:	d9eb      	bls.n	8002f52 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0201 	bic.w	r2, r2, #1
 8002fa4:	b292      	uxth	r2, r2
 8002fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002faa:	bf00      	nop
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f6      	beq.n	8002fac <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd0:	b292      	uxth	r2, r2
 8002fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	77fb      	strb	r3, [r7, #31]
 8002fda:	e00f      	b.n	8002ffc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	7ffa      	ldrb	r2, [r7, #31]
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	440a      	add	r2, r1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	3320      	adds	r3, #32
 8002fee:	443b      	add	r3, r7
 8002ff0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ff4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ff6:	7ffb      	ldrb	r3, [r7, #31]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
 8002ffe:	2b07      	cmp	r3, #7
 8003000:	d9ec      	bls.n	8002fdc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0208 	orr.w	r2, r2, #8
 8003014:	b292      	uxth	r2, r2
 8003016:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302c:	b292      	uxth	r2, r2
 800302e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800303a:	b29a      	uxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0204 	orr.w	r2, r2, #4
 8003044:	b292      	uxth	r2, r2
 8003046:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f009 f986 	bl	800c35c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003050:	e026      	b.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00f      	beq.n	800307c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003064:	b29a      	uxth	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800306e:	b292      	uxth	r2, r2
 8003070:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f009 f944 	bl	800c302 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800307a:	e011      	b.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003098:	b292      	uxth	r2, r2
 800309a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800309e:	bf00      	nop
  }
}
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_PCD_SetAddress+0x1a>
 80030bc:	2302      	movs	r3, #2
 80030be:	e012      	b.n	80030e6 <HAL_PCD_SetAddress+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 fcee 	bl	8007ab8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	4608      	mov	r0, r1
 80030f8:	4611      	mov	r1, r2
 80030fa:	461a      	mov	r2, r3
 80030fc:	4603      	mov	r3, r0
 80030fe:	70fb      	strb	r3, [r7, #3]
 8003100:	460b      	mov	r3, r1
 8003102:	803b      	strh	r3, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800310c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003110:	2b00      	cmp	r3, #0
 8003112:	da0e      	bge.n	8003132 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 0207 	and.w	r2, r3, #7
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	3310      	adds	r3, #16
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	705a      	strb	r2, [r3, #1]
 8003130:	e00e      	b.n	8003150 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 0207 	and.w	r2, r3, #7
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	b2da      	uxtb	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800315c:	883a      	ldrh	r2, [r7, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	78ba      	ldrb	r2, [r7, #2]
 8003166:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003168:	78bb      	ldrb	r3, [r7, #2]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d102      	bne.n	8003174 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_PCD_EP_Open+0x94>
 800317e:	2302      	movs	r3, #2
 8003180:	e00e      	b.n	80031a0 <HAL_PCD_EP_Open+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	4618      	mov	r0, r3
 8003192:	f002 fa37 	bl	8005604 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800319e:	7afb      	ldrb	r3, [r7, #11]
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da0e      	bge.n	80031da <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 0207 	and.w	r2, r3, #7
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	3310      	adds	r3, #16
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	705a      	strb	r2, [r3, #1]
 80031d8:	e00e      	b.n	80031f8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	f003 0207 	and.w	r2, r3, #7
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_PCD_EP_Close+0x6a>
 800320e:	2302      	movs	r3, #2
 8003210:	e00e      	b.n	8003230 <HAL_PCD_EP_Close+0x88>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	4618      	mov	r0, r3
 8003222:	f002 fdaf 	bl	8005d84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	460b      	mov	r3, r1
 8003246:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003248:	7afb      	ldrb	r3, [r7, #11]
 800324a:	f003 0207 	and.w	r2, r3, #7
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2200      	movs	r2, #0
 8003270:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	b2da      	uxtb	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6979      	ldr	r1, [r7, #20]
 800328a:	4618      	mov	r0, r3
 800328c:	f002 ff66 	bl	800615c <USB_EPStartXfer>

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80032a6:	78fb      	ldrb	r3, [r7, #3]
 80032a8:	f003 0207 	and.w	r2, r3, #7
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	440b      	add	r3, r1
 80032b8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80032bc:	681b      	ldr	r3, [r3, #0]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	460b      	mov	r3, r1
 80032d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	f003 0207 	and.w	r2, r3, #7
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	3310      	adds	r3, #16
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	683a      	ldr	r2, [r7, #0]
 80032f8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2201      	movs	r2, #1
 8003312:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003314:	7afb      	ldrb	r3, [r7, #11]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	b2da      	uxtb	r2, r3
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6979      	ldr	r1, [r7, #20]
 8003326:	4618      	mov	r0, r3
 8003328:	f002 ff18 	bl	800615c <USB_EPStartXfer>

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	7912      	ldrb	r2, [r2, #4]
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e04c      	b.n	80033ee <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003354:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003358:	2b00      	cmp	r3, #0
 800335a:	da0e      	bge.n	800337a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	f003 0207 	and.w	r2, r3, #7
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	3310      	adds	r3, #16
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	705a      	strb	r2, [r3, #1]
 8003378:	e00c      	b.n	8003394 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800337a:	78fa      	ldrb	r2, [r7, #3]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_PCD_EP_SetStall+0x7e>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e01c      	b.n	80033ee <HAL_PCD_EP_SetStall+0xb8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fa7b 	bl	80078be <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f004 fba0 	bl	8007b24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	7912      	ldrb	r2, [r2, #4]
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e040      	b.n	8003496 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da0e      	bge.n	800343a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	f003 0207 	and.w	r2, r3, #7
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	3310      	adds	r3, #16
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	705a      	strb	r2, [r3, #1]
 8003438:	e00e      	b.n	8003458 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 0207 	and.w	r2, r3, #7
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_PCD_EP_ClrStall+0x82>
 8003474:	2302      	movs	r3, #2
 8003476:	e00e      	b.n	8003496 <HAL_PCD_EP_ClrStall+0xa0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68f9      	ldr	r1, [r7, #12]
 8003486:	4618      	mov	r0, r3
 8003488:	f004 fa69 	bl	800795e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b096      	sub	sp, #88	@ 0x58
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034a6:	e3bb      	b.n	8003c20 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80034c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8175 	bne.w	80037b6 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d14e      	bne.n	8003576 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80034e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e8:	81fb      	strh	r3, [r7, #14]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	89fb      	ldrh	r3, [r7, #14]
 80034f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3310      	adds	r3, #16
 8003500:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	3302      	adds	r3, #2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6812      	ldr	r2, [r2, #0]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800352a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	441a      	add	r2, r3
 8003538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800353c:	2100      	movs	r1, #0
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f008 fec5 	bl	800c2ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	7b5b      	ldrb	r3, [r3, #13]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8368 	beq.w	8003c20 <PCD_EP_ISR_Handler+0x782>
 8003550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f040 8363 	bne.w	8003c20 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	7b5b      	ldrb	r3, [r3, #13]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003564:	b2da      	uxtb	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	735a      	strb	r2, [r3, #13]
 8003574:	e354      	b.n	8003c20 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800357c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003588:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800358c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003590:	2b00      	cmp	r3, #0
 8003592:	d034      	beq.n	80035fe <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800359c:	b29b      	uxth	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	3306      	adds	r3, #6
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6812      	ldr	r2, [r2, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80035ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f004 faf6 	bl	8007bc4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80035e4:	4013      	ands	r3, r2
 80035e6:	823b      	strh	r3, [r7, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	8a3a      	ldrh	r2, [r7, #16]
 80035ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035f2:	b292      	uxth	r2, r2
 80035f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f008 fe3c 	bl	800c274 <HAL_PCD_SetupStageCallback>
 80035fc:	e310      	b.n	8003c20 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003602:	2b00      	cmp	r3, #0
 8003604:	f280 830c 	bge.w	8003c20 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	b29a      	uxth	r2, r3
 8003610:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003614:	4013      	ands	r3, r2
 8003616:	83fb      	strh	r3, [r7, #30]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	8bfa      	ldrh	r2, [r7, #30]
 800361e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003622:	b292      	uxth	r2, r2
 8003624:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	3306      	adds	r3, #6
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800364e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003650:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d019      	beq.n	800368e <PCD_EP_ISR_Handler+0x1f0>
 800365a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d015      	beq.n	800368e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003668:	6959      	ldr	r1, [r3, #20]
 800366a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800366e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003670:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003672:	b29b      	uxth	r3, r3
 8003674:	f004 faa6 	bl	8007bc4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	441a      	add	r2, r3
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003686:	2100      	movs	r1, #0
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f008 fe05 	bl	800c298 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003698:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800369c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 82bd 	bne.w	8003c20 <PCD_EP_ISR_Handler+0x782>
 80036a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80036aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80036ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036b2:	f000 82b5 	beq.w	8003c20 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	4413      	add	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	801a      	strh	r2, [r3, #0]
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80036ec:	d91d      	bls.n	800372a <PCD_EP_ISR_Handler+0x28c>
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d102      	bne.n	8003708 <PCD_EP_ISR_Handler+0x26a>
 8003702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003704:	3b01      	subs	r3, #1
 8003706:	647b      	str	r3, [r7, #68]	@ 0x44
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	b29a      	uxth	r2, r3
 800370e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003710:	b29b      	uxth	r3, r3
 8003712:	029b      	lsls	r3, r3, #10
 8003714:	b29b      	uxth	r3, r3
 8003716:	4313      	orrs	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003722:	b29a      	uxth	r2, r3
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	801a      	strh	r2, [r3, #0]
 8003728:	e026      	b.n	8003778 <PCD_EP_ISR_Handler+0x2da>
 800372a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <PCD_EP_ISR_Handler+0x2aa>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800373c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003740:	b29a      	uxth	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	e017      	b.n	8003778 <PCD_EP_ISR_Handler+0x2da>
 8003748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <PCD_EP_ISR_Handler+0x2c4>
 800375c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800375e:	3301      	adds	r3, #1
 8003760:	647b      	str	r3, [r7, #68]	@ 0x44
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	b29a      	uxth	r2, r3
 8003768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800376a:	b29b      	uxth	r3, r3
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	b29b      	uxth	r3, r3
 8003770:	4313      	orrs	r3, r2
 8003772:	b29a      	uxth	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003788:	827b      	strh	r3, [r7, #18]
 800378a:	8a7b      	ldrh	r3, [r7, #18]
 800378c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003790:	827b      	strh	r3, [r7, #18]
 8003792:	8a7b      	ldrh	r3, [r7, #18]
 8003794:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003798:	827b      	strh	r3, [r7, #18]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	8a7b      	ldrh	r3, [r7, #18]
 80037a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8013      	strh	r3, [r2, #0]
 80037b4:	e234      	b.n	8003c20 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037ca:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f280 80fc 	bge.w	80039cc <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80037ea:	4013      	ands	r3, r2
 80037ec:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003802:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003806:	b292      	uxth	r2, r2
 8003808:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800380a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800380e:	4613      	mov	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003822:	7b1b      	ldrb	r3, [r3, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d125      	bne.n	8003874 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003830:	b29b      	uxth	r3, r3
 8003832:	461a      	mov	r2, r3
 8003834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	3306      	adds	r3, #6
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003850:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003854:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8092 	beq.w	8003982 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003864:	6959      	ldr	r1, [r3, #20]
 8003866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003868:	88da      	ldrh	r2, [r3, #6]
 800386a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800386e:	f004 f9a9 	bl	8007bc4 <USB_ReadPMA>
 8003872:	e086      	b.n	8003982 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003876:	78db      	ldrb	r3, [r3, #3]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d10a      	bne.n	8003892 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800387c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003880:	461a      	mov	r2, r3
 8003882:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9d9 	bl	8003c3c <HAL_PCD_EP_DB_Receive>
 800388a:	4603      	mov	r3, r0
 800388c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003890:	e077      	b.n	8003982 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ac:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80038c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	461a      	mov	r2, r3
 80038dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d024      	beq.n	800393a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	3302      	adds	r3, #2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	4413      	add	r3, r2
 800390e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003918:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800391c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02e      	beq.n	8003982 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392a:	6959      	ldr	r1, [r3, #20]
 800392c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392e:	891a      	ldrh	r2, [r3, #8]
 8003930:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003934:	f004 f946 	bl	8007bc4 <USB_ReadPMA>
 8003938:	e023      	b.n	8003982 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	3306      	adds	r3, #6
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003962:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003966:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	6959      	ldr	r1, [r3, #20]
 8003976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003978:	895a      	ldrh	r2, [r3, #10]
 800397a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800397e:	f004 f921 	bl	8007bc4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003984:	69da      	ldr	r2, [r3, #28]
 8003986:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800398a:	441a      	add	r2, r3
 800398c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800398e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003990:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003998:	441a      	add	r2, r3
 800399a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800399e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <PCD_EP_ISR_Handler+0x514>
 80039a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80039aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d206      	bcs.n	80039c0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	4619      	mov	r1, r3
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f008 fc6d 	bl	800c298 <HAL_PCD_DataOutStageCallback>
 80039be:	e005      	b.n	80039cc <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 fbc8 	bl	800615c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80039cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8123 	beq.w	8003c20 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80039da:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	3310      	adds	r3, #16
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a08:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	441a      	add	r2, r3
 8003a1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2c:	78db      	ldrb	r3, [r3, #3]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 80a2 	bne.w	8003b78 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a36:	2200      	movs	r2, #0
 8003a38:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a3c:	7b1b      	ldrb	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8093 	beq.w	8003b6a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d046      	beq.n	8003ade <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a52:	785b      	ldrb	r3, [r3, #1]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d126      	bne.n	8003aa6 <PCD_EP_ISR_Handler+0x608>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	4413      	add	r3, r2
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	011a      	lsls	r2, r3, #4
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	4413      	add	r3, r2
 8003a7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	801a      	strh	r2, [r3, #0]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	801a      	strh	r2, [r3, #0]
 8003aa4:	e061      	b.n	8003b6a <PCD_EP_ISR_Handler+0x6cc>
 8003aa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aa8:	785b      	ldrb	r3, [r3, #1]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d15d      	bne.n	8003b6a <PCD_EP_ISR_Handler+0x6cc>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac2:	4413      	add	r3, r2
 8003ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	011a      	lsls	r2, r3, #4
 8003acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	2200      	movs	r2, #0
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	e045      	b.n	8003b6a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d126      	bne.n	8003b3a <PCD_EP_ISR_Handler+0x69c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b00:	4413      	add	r3, r2
 8003b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	011a      	lsls	r2, r3, #4
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b12:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	e017      	b.n	8003b6a <PCD_EP_ISR_Handler+0x6cc>
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d113      	bne.n	8003b6a <PCD_EP_ISR_Handler+0x6cc>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b50:	4413      	add	r3, r2
 8003b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	011a      	lsls	r2, r3, #4
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b66:	2200      	movs	r2, #0
 8003b68:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f008 fbac 	bl	800c2ce <HAL_PCD_DataInStageCallback>
 8003b76:	e053      	b.n	8003c20 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003b78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d146      	bne.n	8003c12 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d907      	bls.n	8003bcc <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbe:	699a      	ldr	r2, [r3, #24]
 8003bc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bc4:	1ad2      	subs	r2, r2, r3
 8003bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bc8:	619a      	str	r2, [r3, #24]
 8003bca:	e002      	b.n	8003bd2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bce:	2200      	movs	r2, #0
 8003bd0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	4619      	mov	r1, r3
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f008 fb74 	bl	800c2ce <HAL_PCD_DataInStageCallback>
 8003be6:	e01b      	b.n	8003c20 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bea:	695a      	ldr	r2, [r3, #20]
 8003bec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bf0:	441a      	add	r2, r3
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003bfe:	441a      	add	r2, r3
 8003c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c02:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f002 faa6 	bl	800615c <USB_EPStartXfer>
 8003c10:	e006      	b.n	8003c20 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003c12:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c16:	461a      	mov	r2, r3
 8003c18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f91b 	bl	8003e56 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b21b      	sxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f6ff ac3b 	blt.w	80034a8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3758      	adds	r7, #88	@ 0x58
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d07e      	beq.n	8003d52 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	8b7b      	ldrh	r3, [r7, #26]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d306      	bcc.n	8003c96 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	8b7b      	ldrh	r3, [r7, #26]
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	619a      	str	r2, [r3, #24]
 8003c94:	e002      	b.n	8003c9c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d123      	bne.n	8003cec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cbe:	833b      	strh	r3, [r7, #24]
 8003cc0:	8b3b      	ldrh	r3, [r7, #24]
 8003cc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003cc6:	833b      	strh	r3, [r7, #24]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	441a      	add	r2, r3
 8003cd6:	8b3b      	ldrh	r3, [r7, #24]
 8003cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01f      	beq.n	8003d36 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d10:	82fb      	strh	r3, [r7, #22]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	441a      	add	r2, r3
 8003d20:	8afb      	ldrh	r3, [r7, #22]
 8003d22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d36:	8b7b      	ldrh	r3, [r7, #26]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 8087 	beq.w	8003e4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6959      	ldr	r1, [r3, #20]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	891a      	ldrh	r2, [r3, #8]
 8003d4a:	8b7b      	ldrh	r3, [r7, #26]
 8003d4c:	f003 ff3a 	bl	8007bc4 <USB_ReadPMA>
 8003d50:	e07c      	b.n	8003e4c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	3306      	adds	r3, #6
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	8b7b      	ldrh	r3, [r7, #26]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d306      	bcc.n	8003d94 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	8b7b      	ldrh	r3, [r7, #26]
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	619a      	str	r2, [r3, #24]
 8003d92:	e002      	b.n	8003d9a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2200      	movs	r2, #0
 8003d98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d123      	bne.n	8003dea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003db8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbc:	83fb      	strh	r3, [r7, #30]
 8003dbe:	8bfb      	ldrh	r3, [r7, #30]
 8003dc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003dc4:	83fb      	strh	r3, [r7, #30]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	8bfb      	ldrh	r3, [r7, #30]
 8003dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d11f      	bne.n	8003e34 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	83bb      	strh	r3, [r7, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	441a      	add	r2, r3
 8003e1e:	8bbb      	ldrh	r3, [r7, #28]
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e34:	8b7b      	ldrh	r3, [r7, #26]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6959      	ldr	r1, [r3, #20]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	895a      	ldrh	r2, [r3, #10]
 8003e46:	8b7b      	ldrh	r3, [r7, #26]
 8003e48:	f003 febc 	bl	8007bc4 <USB_ReadPMA>
    }
  }

  return count;
 8003e4c:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b0a4      	sub	sp, #144	@ 0x90
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	4613      	mov	r3, r2
 8003e62:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 81dd 	beq.w	800422a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	3302      	adds	r3, #2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e98:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d907      	bls.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699a      	ldr	r2, [r3, #24]
 8003eac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003eb0:	1ad2      	subs	r2, r2, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	619a      	str	r2, [r3, #24]
 8003eb6:	e002      	b.n	8003ebe <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80b9 	bne.w	800403a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d126      	bne.n	8003f1e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	4413      	add	r3, r2
 8003ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	011a      	lsls	r2, r3, #4
 8003eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	e01a      	b.n	8003f54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d116      	bne.n	8003f54 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	461a      	mov	r2, r3
 8003f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3a:	4413      	add	r3, r2
 8003f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	011a      	lsls	r2, r3, #4
 8003f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f46:	4413      	add	r3, r2
 8003f48:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	2200      	movs	r2, #0
 8003f52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d126      	bne.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	011a      	lsls	r2, r3, #4
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f88:	61bb      	str	r3, [r7, #24]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	801a      	strh	r2, [r3, #0]
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	e017      	b.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d113      	bne.n	8003fe0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	4413      	add	r3, r2
 8003fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	011a      	lsls	r2, r3, #4
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f008 f971 	bl	800c2ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 82fc 	beq.w	80045f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800400e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004012:	82fb      	strh	r3, [r7, #22]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	441a      	add	r2, r3
 8004022:	8afb      	ldrh	r3, [r7, #22]
 8004024:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004028:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800402c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004034:	b29b      	uxth	r3, r3
 8004036:	8013      	strh	r3, [r2, #0]
 8004038:	e2da      	b.n	80045f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d021      	beq.n	8004088 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800405a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004074:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004078:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800407c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004084:	b29b      	uxth	r3, r3
 8004086:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800408e:	2b01      	cmp	r3, #1
 8004090:	f040 82ae 	bne.w	80045f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800409c:	441a      	add	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040aa:	441a      	add	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d30b      	bcc.n	80040d4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	6a1a      	ldr	r2, [r3, #32]
 80040c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040cc:	1ad2      	subs	r2, r2, r3
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	621a      	str	r2, [r3, #32]
 80040d2:	e017      	b.n	8004104 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d108      	bne.n	80040ee <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80040dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80040e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040ec:	e00a      	b.n	8004104 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2200      	movs	r2, #0
 8004102:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d165      	bne.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x382>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004120:	4413      	add	r3, r2
 8004122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	011a      	lsls	r2, r3, #4
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	4413      	add	r3, r2
 800412e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413e:	b29a      	uxth	r2, r3
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004148:	2b3e      	cmp	r3, #62	@ 0x3e
 800414a:	d91d      	bls.n	8004188 <HAL_PCD_EP_DB_Transmit+0x332>
 800414c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004158:	f003 031f 	and.w	r3, r3, #31
 800415c:	2b00      	cmp	r3, #0
 800415e:	d102      	bne.n	8004166 <HAL_PCD_EP_DB_Transmit+0x310>
 8004160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004162:	3b01      	subs	r3, #1
 8004164:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29a      	uxth	r2, r3
 800416c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800416e:	b29b      	uxth	r3, r3
 8004170:	029b      	lsls	r3, r3, #10
 8004172:	b29b      	uxth	r3, r3
 8004174:	4313      	orrs	r3, r2
 8004176:	b29b      	uxth	r3, r3
 8004178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004180:	b29a      	uxth	r2, r3
 8004182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	e044      	b.n	8004212 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_PCD_EP_DB_Transmit+0x350>
 8004190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800419a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419e:	b29a      	uxth	r2, r3
 80041a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	e035      	b.n	8004212 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_PCD_EP_DB_Transmit+0x36a>
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041bc:	3301      	adds	r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4313      	orrs	r3, r2
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	801a      	strh	r2, [r3, #0]
 80041d6:	e01c      	b.n	8004212 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d118      	bne.n	8004212 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041f4:	4413      	add	r3, r2
 80041f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011a      	lsls	r2, r3, #4
 80041fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004200:	4413      	add	r3, r2
 8004202:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004206:	643b      	str	r3, [r7, #64]	@ 0x40
 8004208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800420c:	b29a      	uxth	r2, r3
 800420e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004210:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6959      	ldr	r1, [r3, #20]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	891a      	ldrh	r2, [r3, #8]
 800421e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004222:	b29b      	uxth	r3, r3
 8004224:	f003 fc89 	bl	8007b3a <USB_WritePMA>
 8004228:	e1e2      	b.n	80045f0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4413      	add	r3, r2
 800423e:	3306      	adds	r3, #6
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	6812      	ldr	r2, [r2, #0]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004252:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800425e:	429a      	cmp	r2, r3
 8004260:	d307      	bcc.n	8004272 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	619a      	str	r2, [r3, #24]
 8004270:	e002      	b.n	8004278 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f040 80c0 	bne.w	8004402 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	785b      	ldrb	r3, [r3, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d126      	bne.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x482>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004298:	b29b      	uxth	r3, r3
 800429a:	461a      	mov	r2, r3
 800429c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800429e:	4413      	add	r3, r2
 80042a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	011a      	lsls	r2, r3, #4
 80042a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80042aa:	4413      	add	r3, r2
 80042ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	e01a      	b.n	800430e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d116      	bne.n	800430e <HAL_PCD_EP_DB_Transmit+0x4b8>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042f4:	4413      	add	r3, r2
 80042f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	011a      	lsls	r2, r3, #4
 80042fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004300:	4413      	add	r3, r2
 8004302:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004306:	663b      	str	r3, [r7, #96]	@ 0x60
 8004308:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800430a:	2200      	movs	r2, #0
 800430c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	677b      	str	r3, [r7, #116]	@ 0x74
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	785b      	ldrb	r3, [r3, #1]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d12b      	bne.n	8004374 <HAL_PCD_EP_DB_Transmit+0x51e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004330:	4413      	add	r3, r2
 8004332:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800433c:	4413      	add	r3, r2
 800433e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004346:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b29b      	uxth	r3, r3
 800434e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004352:	b29a      	uxth	r2, r3
 8004354:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004358:	801a      	strh	r2, [r3, #0]
 800435a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004366:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436a:	b29a      	uxth	r2, r3
 800436c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004370:	801a      	strh	r2, [r3, #0]
 8004372:	e017      	b.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d113      	bne.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x54e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004384:	b29b      	uxth	r3, r3
 8004386:	461a      	mov	r2, r3
 8004388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800438a:	4413      	add	r3, r2
 800438c:	677b      	str	r3, [r7, #116]	@ 0x74
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	011a      	lsls	r2, r3, #4
 8004394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004396:	4413      	add	r3, r2
 8004398:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800439c:	673b      	str	r3, [r7, #112]	@ 0x70
 800439e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043a0:	2200      	movs	r2, #0
 80043a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f007 ff8f 	bl	800c2ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f040 811a 	bne.w	80045f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80043ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	8013      	strh	r3, [r2, #0]
 8004400:	e0f6      	b.n	80045f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d121      	bne.n	8004450 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004426:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	441a      	add	r2, r3
 8004438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800443c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004440:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444c:	b29b      	uxth	r3, r3
 800444e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 80ca 	bne.w	80045f0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004464:	441a      	add	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	69da      	ldr	r2, [r3, #28]
 800446e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004472:	441a      	add	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	429a      	cmp	r2, r3
 8004482:	d30b      	bcc.n	800449c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004494:	1ad2      	subs	r2, r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	621a      	str	r2, [r3, #32]
 800449a:	e017      	b.n	80044cc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d108      	bne.n	80044b6 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80044a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80044a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80044b4:	e00a      	b.n	80044cc <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2200      	movs	r2, #0
 80044c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	785b      	ldrb	r3, [r3, #1]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d165      	bne.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x750>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ee:	4413      	add	r3, r2
 80044f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	011a      	lsls	r2, r3, #4
 80044f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044fa:	4413      	add	r3, r2
 80044fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004500:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800450c:	b29a      	uxth	r2, r3
 800450e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004510:	801a      	strh	r2, [r3, #0]
 8004512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004516:	2b3e      	cmp	r3, #62	@ 0x3e
 8004518:	d91d      	bls.n	8004556 <HAL_PCD_EP_DB_Transmit+0x700>
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2b00      	cmp	r3, #0
 800452c:	d102      	bne.n	8004534 <HAL_PCD_EP_DB_Transmit+0x6de>
 800452e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004530:	3b01      	subs	r3, #1
 8004532:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29a      	uxth	r2, r3
 800453a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800453c:	b29b      	uxth	r3, r3
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	b29b      	uxth	r3, r3
 8004542:	4313      	orrs	r3, r2
 8004544:	b29b      	uxth	r3, r3
 8004546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800454a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800454e:	b29a      	uxth	r2, r3
 8004550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	e041      	b.n	80045da <HAL_PCD_EP_DB_Transmit+0x784>
 8004556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <HAL_PCD_EP_DB_Transmit+0x71e>
 800455e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456c:	b29a      	uxth	r2, r3
 800456e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e032      	b.n	80045da <HAL_PCD_EP_DB_Transmit+0x784>
 8004574:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800457c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_PCD_EP_DB_Transmit+0x738>
 8004588:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800458a:	3301      	adds	r3, #1
 800458c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800458e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29a      	uxth	r2, r3
 8004594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004596:	b29b      	uxth	r3, r3
 8004598:	029b      	lsls	r3, r3, #10
 800459a:	b29b      	uxth	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	e019      	b.n	80045da <HAL_PCD_EP_DB_Transmit+0x784>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d115      	bne.n	80045da <HAL_PCD_EP_DB_Transmit+0x784>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045bc:	4413      	add	r3, r2
 80045be:	657b      	str	r3, [r7, #84]	@ 0x54
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045c8:	4413      	add	r3, r2
 80045ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6959      	ldr	r1, [r3, #20]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	895a      	ldrh	r2, [r3, #10]
 80045e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f003 faa5 	bl	8007b3a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800460a:	82bb      	strh	r3, [r7, #20]
 800460c:	8abb      	ldrh	r3, [r7, #20]
 800460e:	f083 0310 	eor.w	r3, r3, #16
 8004612:	82bb      	strh	r3, [r7, #20]
 8004614:	8abb      	ldrh	r3, [r7, #20]
 8004616:	f083 0320 	eor.w	r3, r3, #32
 800461a:	82bb      	strh	r3, [r7, #20]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	8abb      	ldrh	r3, [r7, #20]
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3790      	adds	r7, #144	@ 0x90
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	817b      	strh	r3, [r7, #10]
 8004658:	4613      	mov	r3, r2
 800465a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800465c:	897b      	ldrh	r3, [r7, #10]
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00b      	beq.n	8004680 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004668:	897b      	ldrh	r3, [r7, #10]
 800466a:	f003 0207 	and.w	r2, r3, #7
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	00db      	lsls	r3, r3, #3
 8004676:	3310      	adds	r3, #16
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e009      	b.n	8004694 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004680:	897a      	ldrh	r2, [r7, #10]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d107      	bne.n	80046aa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	80da      	strh	r2, [r3, #6]
 80046a8:	e00b      	b.n	80046c2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2201      	movs	r2, #1
 80046ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	b29a      	uxth	r2, r3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e272      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8087 	beq.w	80047fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046f0:	4b92      	ldr	r3, [pc, #584]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d00c      	beq.n	8004716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046fc:	4b8f      	ldr	r3, [pc, #572]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	2b08      	cmp	r3, #8
 8004706:	d112      	bne.n	800472e <HAL_RCC_OscConfig+0x5e>
 8004708:	4b8c      	ldr	r3, [pc, #560]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004714:	d10b      	bne.n	800472e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004716:	4b89      	ldr	r3, [pc, #548]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d06c      	beq.n	80047fc <HAL_RCC_OscConfig+0x12c>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d168      	bne.n	80047fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e24c      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x76>
 8004738:	4b80      	ldr	r3, [pc, #512]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7f      	ldr	r2, [pc, #508]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e02e      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x98>
 800474e:	4b7b      	ldr	r3, [pc, #492]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7a      	ldr	r2, [pc, #488]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b78      	ldr	r3, [pc, #480]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a77      	ldr	r2, [pc, #476]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e01d      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0xbc>
 8004772:	4b72      	ldr	r3, [pc, #456]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a71      	ldr	r2, [pc, #452]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	4b6f      	ldr	r3, [pc, #444]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6e      	ldr	r2, [pc, #440]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0xd4>
 800478c:	4b6b      	ldr	r3, [pc, #428]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a6a      	ldr	r2, [pc, #424]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	4b68      	ldr	r3, [pc, #416]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a67      	ldr	r2, [pc, #412]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800479e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d013      	beq.n	80047d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fc fe4c 	bl	8001448 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7fc fe48 	bl	8001448 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	@ 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e200      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b5d      	ldr	r3, [pc, #372]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0xe4>
 80047d2:	e014      	b.n	80047fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fc fe38 	bl	8001448 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047dc:	f7fc fe34 	bl	8001448 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	@ 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1ec      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	4b53      	ldr	r3, [pc, #332]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x10c>
 80047fa:	e000      	b.n	80047fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d063      	beq.n	80048d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800480a:	4b4c      	ldr	r3, [pc, #304]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004816:	4b49      	ldr	r3, [pc, #292]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b08      	cmp	r3, #8
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x18c>
 8004822:	4b46      	ldr	r3, [pc, #280]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d116      	bne.n	800485c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4b43      	ldr	r3, [pc, #268]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x176>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1c0      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004846:	4b3d      	ldr	r3, [pc, #244]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4939      	ldr	r1, [pc, #228]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800485a:	e03a      	b.n	80048d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004864:	4b36      	ldr	r3, [pc, #216]	@ (8004940 <HAL_RCC_OscConfig+0x270>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fc fded 	bl	8001448 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004872:	f7fc fde9 	bl	8001448 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e1a1      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004890:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4927      	ldr	r1, [pc, #156]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	600b      	str	r3, [r1, #0]
 80048a4:	e015      	b.n	80048d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a6:	4b26      	ldr	r3, [pc, #152]	@ (8004940 <HAL_RCC_OscConfig+0x270>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fc fdcc 	bl	8001448 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048b4:	f7fc fdc8 	bl	8001448 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e180      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	4b1d      	ldr	r3, [pc, #116]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03a      	beq.n	8004954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d019      	beq.n	800491a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	4b17      	ldr	r3, [pc, #92]	@ (8004944 <HAL_RCC_OscConfig+0x274>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ec:	f7fc fdac 	bl	8001448 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f4:	f7fc fda8 	bl	8001448 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e160      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	4b0d      	ldr	r3, [pc, #52]	@ (800493c <HAL_RCC_OscConfig+0x26c>)
 8004908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004912:	2001      	movs	r0, #1
 8004914:	f000 fafe 	bl	8004f14 <RCC_Delay>
 8004918:	e01c      	b.n	8004954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <HAL_RCC_OscConfig+0x274>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004920:	f7fc fd92 	bl	8001448 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004926:	e00f      	b.n	8004948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004928:	f7fc fd8e 	bl	8001448 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d908      	bls.n	8004948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e146      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	42420000 	.word	0x42420000
 8004944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	4b92      	ldr	r3, [pc, #584]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e9      	bne.n	8004928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80a6 	beq.w	8004aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004966:	4b8b      	ldr	r3, [pc, #556]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10d      	bne.n	800498e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004972:	4b88      	ldr	r3, [pc, #544]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	4a87      	ldr	r2, [pc, #540]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800497c:	61d3      	str	r3, [r2, #28]
 800497e:	4b85      	ldr	r3, [pc, #532]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800498a:	2301      	movs	r3, #1
 800498c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498e:	4b82      	ldr	r3, [pc, #520]	@ (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d118      	bne.n	80049cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800499a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a7e      	ldr	r2, [pc, #504]	@ (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 80049a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a6:	f7fc fd4f 	bl	8001448 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ae:	f7fc fd4b 	bl	8001448 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b64      	cmp	r3, #100	@ 0x64
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e103      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c0:	4b75      	ldr	r3, [pc, #468]	@ (8004b98 <HAL_RCC_OscConfig+0x4c8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d106      	bne.n	80049e2 <HAL_RCC_OscConfig+0x312>
 80049d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6213      	str	r3, [r2, #32]
 80049e0:	e02d      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x334>
 80049ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	4a69      	ldr	r2, [pc, #420]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6213      	str	r3, [r2, #32]
 80049f6:	4b67      	ldr	r3, [pc, #412]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4a66      	ldr	r2, [pc, #408]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	f023 0304 	bic.w	r3, r3, #4
 8004a00:	6213      	str	r3, [r2, #32]
 8004a02:	e01c      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b05      	cmp	r3, #5
 8004a0a:	d10c      	bne.n	8004a26 <HAL_RCC_OscConfig+0x356>
 8004a0c:	4b61      	ldr	r3, [pc, #388]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4a60      	ldr	r2, [pc, #384]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a12:	f043 0304 	orr.w	r3, r3, #4
 8004a16:	6213      	str	r3, [r2, #32]
 8004a18:	4b5e      	ldr	r3, [pc, #376]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4a5d      	ldr	r2, [pc, #372]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a1e:	f043 0301 	orr.w	r3, r3, #1
 8004a22:	6213      	str	r3, [r2, #32]
 8004a24:	e00b      	b.n	8004a3e <HAL_RCC_OscConfig+0x36e>
 8004a26:	4b5b      	ldr	r3, [pc, #364]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	6213      	str	r3, [r2, #32]
 8004a32:	4b58      	ldr	r3, [pc, #352]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4a57      	ldr	r2, [pc, #348]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d015      	beq.n	8004a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a46:	f7fc fcff 	bl	8001448 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fc fcfb 	bl	8001448 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0b1      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a64:	4b4b      	ldr	r3, [pc, #300]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0ee      	beq.n	8004a4e <HAL_RCC_OscConfig+0x37e>
 8004a70:	e014      	b.n	8004a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a72:	f7fc fce9 	bl	8001448 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a78:	e00a      	b.n	8004a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a7a:	f7fc fce5 	bl	8001448 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e09b      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a90:	4b40      	ldr	r3, [pc, #256]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ee      	bne.n	8004a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d105      	bne.n	8004aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8087 	beq.w	8004bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ab8:	4b36      	ldr	r3, [pc, #216]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d061      	beq.n	8004b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d146      	bne.n	8004b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004acc:	4b33      	ldr	r3, [pc, #204]	@ (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fc fcb9 	bl	8001448 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fc fcb5 	bl	8001448 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e06d      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aec:	4b29      	ldr	r3, [pc, #164]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d108      	bne.n	8004b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004b02:	4b24      	ldr	r3, [pc, #144]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4921      	ldr	r1, [pc, #132]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b14:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a19      	ldr	r1, [r3, #32]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b24:	430b      	orrs	r3, r1
 8004b26:	491b      	ldr	r1, [pc, #108]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b32:	f7fc fc89 	bl	8001448 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b3a:	f7fc fc85 	bl	8001448 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e03d      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b4c:	4b11      	ldr	r3, [pc, #68]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f0      	beq.n	8004b3a <HAL_RCC_OscConfig+0x46a>
 8004b58:	e035      	b.n	8004bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <HAL_RCC_OscConfig+0x4cc>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fc fc72 	bl	8001448 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fc fc6e 	bl	8001448 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e026      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7a:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <HAL_RCC_OscConfig+0x4c4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x498>
 8004b86:	e01e      	b.n	8004bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d107      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e019      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40007000 	.word	0x40007000
 8004b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_OscConfig+0x500>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000

08004bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d0      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004be8:	4b6a      	ldr	r3, [pc, #424]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d910      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf6:	4b67      	ldr	r3, [pc, #412]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f023 0207 	bic.w	r2, r3, #7
 8004bfe:	4965      	ldr	r1, [pc, #404]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b63      	ldr	r3, [pc, #396]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0b8      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d020      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	4b59      	ldr	r3, [pc, #356]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a58      	ldr	r2, [pc, #352]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c48:	4b53      	ldr	r3, [pc, #332]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	4a52      	ldr	r2, [pc, #328]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c54:	4b50      	ldr	r3, [pc, #320]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	494d      	ldr	r1, [pc, #308]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d040      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d107      	bne.n	8004c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d115      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07f      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c92:	4b41      	ldr	r3, [pc, #260]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d109      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e073      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e06b      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f023 0203 	bic.w	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	4936      	ldr	r1, [pc, #216]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc4:	f7fc fbc0 	bl	8001448 <HAL_GetTick>
 8004cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ccc:	f7fc fbbc 	bl	8001448 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e053      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f003 020c 	and.w	r2, r3, #12
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d1eb      	bne.n	8004ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d210      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b24      	ldr	r3, [pc, #144]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 0207 	bic.w	r2, r3, #7
 8004d0a:	4922      	ldr	r1, [pc, #136]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <HAL_RCC_ClockConfig+0x1c0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e032      	b.n	8004d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d30:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4916      	ldr	r1, [pc, #88]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	490e      	ldr	r1, [pc, #56]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d62:	f000 f821 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d66:	4602      	mov	r2, r0
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	490a      	ldr	r1, [pc, #40]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	5ccb      	ldrb	r3, [r1, r3]
 8004d76:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7a:	4a09      	ldr	r2, [pc, #36]	@ (8004da0 <HAL_RCC_ClockConfig+0x1cc>)
 8004d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d7e:	4b09      	ldr	r3, [pc, #36]	@ (8004da4 <HAL_RCC_ClockConfig+0x1d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc f9cc 	bl	8001120 <HAL_InitTick>

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	0800d8f4 	.word	0x0800d8f4
 8004da0:	20000020 	.word	0x20000020
 8004da4:	20000024 	.word	0x20000024

08004da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d002      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_GetSysClockFreq+0x36>
 8004dd6:	e027      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dd8:	4b19      	ldr	r3, [pc, #100]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dda:	613b      	str	r3, [r7, #16]
      break;
 8004ddc:	e027      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	0c9b      	lsrs	r3, r3, #18
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	4a17      	ldr	r2, [pc, #92]	@ (8004e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004de8:	5cd3      	ldrb	r3, [r2, r3]
 8004dea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d010      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004df6:	4b11      	ldr	r3, [pc, #68]	@ (8004e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	0c5b      	lsrs	r3, r3, #17
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	4a11      	ldr	r2, [pc, #68]	@ (8004e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a0d      	ldr	r2, [pc, #52]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e0a:	fb03 f202 	mul.w	r2, r3, r2
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e004      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	613b      	str	r3, [r7, #16]
      break;
 8004e26:	e002      	b.n	8004e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e28:	4b05      	ldr	r3, [pc, #20]	@ (8004e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e2a:	613b      	str	r3, [r7, #16]
      break;
 8004e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e2e:	693b      	ldr	r3, [r7, #16]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	371c      	adds	r7, #28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	007a1200 	.word	0x007a1200
 8004e44:	0800d90c 	.word	0x0800d90c
 8004e48:	0800d91c 	.word	0x0800d91c
 8004e4c:	003d0900 	.word	0x003d0900

08004e50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e54:	4b02      	ldr	r3, [pc, #8]	@ (8004e60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e56:	681b      	ldr	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	20000020 	.word	0x20000020

08004e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e68:	f7ff fff2 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4903      	ldr	r1, [pc, #12]	@ (8004e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7a:	5ccb      	ldrb	r3, [r1, r3]
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40021000 	.word	0x40021000
 8004e88:	0800d904 	.word	0x0800d904

08004e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e90:	f7ff ffde 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	@ (8004eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	0adb      	lsrs	r3, r3, #11
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	@ (8004eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	0800d904 	.word	0x0800d904

08004eb4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	220f      	movs	r2, #15
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ec4:	4b11      	ldr	r3, [pc, #68]	@ (8004f0c <HAL_RCC_GetClockConfig+0x58>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0203 	and.w	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <HAL_RCC_GetClockConfig+0x58>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <HAL_RCC_GetClockConfig+0x58>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ee8:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <HAL_RCC_GetClockConfig+0x58>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	08db      	lsrs	r3, r3, #3
 8004eee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ef6:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0207 	and.w	r2, r3, #7
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40022000 	.word	0x40022000

08004f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <RCC_Delay+0x34>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <RCC_Delay+0x38>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	0a5b      	lsrs	r3, r3, #9
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f30:	bf00      	nop
  }
  while (Delay --);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	60fa      	str	r2, [r7, #12]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f9      	bne.n	8004f30 <RCC_Delay+0x1c>
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	20000020 	.word	0x20000020
 8004f4c:	10624dd3 	.word	0x10624dd3

08004f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07d      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f70:	4b4f      	ldr	r3, [pc, #316]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10d      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	4a4b      	ldr	r2, [pc, #300]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	61d3      	str	r3, [r2, #28]
 8004f88:	4b49      	ldr	r3, [pc, #292]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f98:	4b46      	ldr	r3, [pc, #280]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d118      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa4:	4b43      	ldr	r3, [pc, #268]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a42      	ldr	r2, [pc, #264]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb0:	f7fc fa4a 	bl	8001448 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb8:	f7fc fa46 	bl	8001448 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	@ 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e06d      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	4b3a      	ldr	r3, [pc, #232]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fd6:	4b36      	ldr	r3, [pc, #216]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d02e      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d027      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ffc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005004:	4b2c      	ldr	r3, [pc, #176]	@ (80050b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800500a:	4a29      	ldr	r2, [pc, #164]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d014      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501a:	f7fc fa15 	bl	8001448 <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005020:	e00a      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005022:	f7fc fa11 	bl	8001448 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005030:	4293      	cmp	r3, r2
 8005032:	d901      	bls.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e036      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005038:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ee      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005044:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4917      	ldr	r1, [pc, #92]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	4313      	orrs	r3, r2
 8005054:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005056:	7dfb      	ldrb	r3, [r7, #23]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800505c:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005066:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005074:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	490b      	ldr	r1, [pc, #44]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	d008      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005092:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	4904      	ldr	r1, [pc, #16]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40007000 	.word	0x40007000
 80050b8:	42420440 	.word	0x42420440

080050bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e041      	b.n	8005152 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f839 	bl	800515a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f000 f99c 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d001      	beq.n	8005184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e03a      	b.n	80051fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0201 	orr.w	r2, r2, #1
 800519a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a18      	ldr	r2, [pc, #96]	@ (8005204 <HAL_TIM_Base_Start_IT+0x98>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x58>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ae:	d009      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x58>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a14      	ldr	r2, [pc, #80]	@ (8005208 <HAL_TIM_Base_Start_IT+0x9c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x58>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a13      	ldr	r2, [pc, #76]	@ (800520c <HAL_TIM_Base_Start_IT+0xa0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d111      	bne.n	80051e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d010      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	e007      	b.n	80051f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800

08005210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d020      	beq.n	8005274 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0202 	mvn.w	r2, #2
 8005244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f8d1 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8c4 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8d3 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d020      	beq.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01b      	beq.n	80052c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0204 	mvn.w	r2, #4
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8ab 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f89e 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f8ad 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d020      	beq.n	800530c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0208 	mvn.w	r2, #8
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2204      	movs	r2, #4
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f885 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f878 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f887 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b00      	cmp	r3, #0
 8005314:	d020      	beq.n	8005358 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01b      	beq.n	8005358 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0210 	mvn.w	r2, #16
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2208      	movs	r2, #8
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f85f 	bl	8005402 <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f852 	bl	80053f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f861 	bl	8005414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d007      	beq.n	800537c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0201 	mvn.w	r2, #1
 8005374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fb fe44 	bl	8001004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f8c3 	bl	8005526 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f831 	bl	8005426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0220 	mvn.w	r2, #32
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f896 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr

08005414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a2f      	ldr	r2, [pc, #188]	@ (8005508 <TIM_Base_SetConfig+0xd0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00b      	beq.n	8005468 <TIM_Base_SetConfig+0x30>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005456:	d007      	beq.n	8005468 <TIM_Base_SetConfig+0x30>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a2c      	ldr	r2, [pc, #176]	@ (800550c <TIM_Base_SetConfig+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_Base_SetConfig+0x30>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a2b      	ldr	r2, [pc, #172]	@ (8005510 <TIM_Base_SetConfig+0xd8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d108      	bne.n	800547a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800546e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a22      	ldr	r2, [pc, #136]	@ (8005508 <TIM_Base_SetConfig+0xd0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d00b      	beq.n	800549a <TIM_Base_SetConfig+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005488:	d007      	beq.n	800549a <TIM_Base_SetConfig+0x62>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1f      	ldr	r2, [pc, #124]	@ (800550c <TIM_Base_SetConfig+0xd4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d003      	beq.n	800549a <TIM_Base_SetConfig+0x62>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1e      	ldr	r2, [pc, #120]	@ (8005510 <TIM_Base_SetConfig+0xd8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d108      	bne.n	80054ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005508 <TIM_Base_SetConfig+0xd0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	611a      	str	r2, [r3, #16]
  }
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	4638      	mov	r0, r7
 8005542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005562:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005566:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	b29a      	uxth	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr

0800557e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005586:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800558a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	b29b      	uxth	r3, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	b29b      	uxth	r3, r3
 800559c:	4013      	ands	r3, r2
 800559e:	b29a      	uxth	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr

080055b2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	460b      	mov	r3, r1
 80055bc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr

080055ca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	4638      	mov	r0, r7
 80055d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005604:	b480      	push	{r7}
 8005606:	b09d      	sub	sp, #116	@ 0x74
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	78db      	ldrb	r3, [r3, #3]
 8005632:	2b03      	cmp	r3, #3
 8005634:	d81f      	bhi.n	8005676 <USB_ActivateEndpoint+0x72>
 8005636:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <USB_ActivateEndpoint+0x38>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	0800564d 	.word	0x0800564d
 8005640:	08005669 	.word	0x08005669
 8005644:	0800567f 	.word	0x0800567f
 8005648:	0800565b 	.word	0x0800565b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800564c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005650:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005654:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005658:	e012      	b.n	8005680 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800565a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800565e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005662:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005666:	e00b      	b.n	8005680 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005668:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800566c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005670:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005674:	e004      	b.n	8005680 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800567c:	e000      	b.n	8005680 <USB_ActivateEndpoint+0x7c>
      break;
 800567e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	441a      	add	r2, r3
 800568a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800568e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800569a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	441a      	add	r2, r3
 80056ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80056d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	7b1b      	ldrb	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f040 8178 	bne.w	80059e0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8084 	beq.w	8005802 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	4413      	add	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	011a      	lsls	r2, r3, #4
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	88db      	ldrh	r3, [r3, #6]
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	b29b      	uxth	r3, r3
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	827b      	strh	r3, [r7, #18]
 800573c:	8a7b      	ldrh	r3, [r7, #18]
 800573e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d01b      	beq.n	800577e <USB_ActivateEndpoint+0x17a>
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575c:	823b      	strh	r3, [r7, #16]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	8a3b      	ldrh	r3, [r7, #16]
 800576a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800576e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005776:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	78db      	ldrb	r3, [r3, #3]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d020      	beq.n	80057c8 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579c:	81bb      	strh	r3, [r7, #12]
 800579e:	89bb      	ldrh	r3, [r7, #12]
 80057a0:	f083 0320 	eor.w	r3, r3, #32
 80057a4:	81bb      	strh	r3, [r7, #12]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	441a      	add	r2, r3
 80057b0:	89bb      	ldrh	r3, [r7, #12]
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]
 80057c6:	e2d5      	b.n	8005d74 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057de:	81fb      	strh	r3, [r7, #14]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	89fb      	ldrh	r3, [r7, #14]
 80057ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	8013      	strh	r3, [r2, #0]
 8005800:	e2b8      	b.n	8005d74 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	4413      	add	r3, r2
 8005814:	633b      	str	r3, [r7, #48]	@ 0x30
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	011a      	lsls	r2, r3, #4
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	4413      	add	r3, r2
 8005820:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	88db      	ldrh	r3, [r3, #6]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	b29b      	uxth	r3, r3
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005834:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005840:	b29b      	uxth	r3, r3
 8005842:	461a      	mov	r2, r3
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	4413      	add	r3, r2
 8005848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	011a      	lsls	r2, r3, #4
 8005850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005852:	4413      	add	r3, r2
 8005854:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005858:	627b      	str	r3, [r7, #36]	@ 0x24
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005864:	b29a      	uxth	r2, r3
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005870:	d91d      	bls.n	80058ae <USB_ActivateEndpoint+0x2aa>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <USB_ActivateEndpoint+0x288>
 8005886:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005888:	3b01      	subs	r3, #1
 800588a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29a      	uxth	r2, r3
 8005892:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	801a      	strh	r2, [r3, #0]
 80058ac:	e026      	b.n	80058fc <USB_ActivateEndpoint+0x2f8>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10a      	bne.n	80058cc <USB_ActivateEndpoint+0x2c8>
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e017      	b.n	80058fc <USB_ActivateEndpoint+0x2f8>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <USB_ActivateEndpoint+0x2e2>
 80058e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058e2:	3301      	adds	r3, #1
 80058e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4313      	orrs	r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	847b      	strh	r3, [r7, #34]	@ 0x22
 800590a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800590c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <USB_ActivateEndpoint+0x348>
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	843b      	strh	r3, [r7, #32]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	441a      	add	r2, r3
 8005936:	8c3b      	ldrh	r3, [r7, #32]
 8005938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800593c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005948:	b29b      	uxth	r3, r3
 800594a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d124      	bne.n	800599e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800596a:	83bb      	strh	r3, [r7, #28]
 800596c:	8bbb      	ldrh	r3, [r7, #28]
 800596e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005972:	83bb      	strh	r3, [r7, #28]
 8005974:	8bbb      	ldrh	r3, [r7, #28]
 8005976:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800597a:	83bb      	strh	r3, [r7, #28]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	441a      	add	r2, r3
 8005986:	8bbb      	ldrh	r3, [r7, #28]
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]
 800599c:	e1ea      	b.n	8005d74 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	83fb      	strh	r3, [r7, #30]
 80059b6:	8bfb      	ldrh	r3, [r7, #30]
 80059b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059bc:	83fb      	strh	r3, [r7, #30]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	441a      	add	r2, r3
 80059c8:	8bfb      	ldrh	r3, [r7, #30]
 80059ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059da:	b29b      	uxth	r3, r3
 80059dc:	8013      	strh	r3, [r2, #0]
 80059de:	e1c9      	b.n	8005d74 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	78db      	ldrb	r3, [r3, #3]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d11e      	bne.n	8005a26 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a18:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
 8005a24:	e01d      	b.n	8005a62 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	441a      	add	r2, r3
 8005a4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a72:	4413      	add	r3, r2
 8005a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	011a      	lsls	r2, r3, #4
 8005a7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	891b      	ldrh	r3, [r3, #8]
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa6:	4413      	add	r3, r2
 8005aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	011a      	lsls	r2, r3, #4
 8005ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005ab8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	895b      	ldrh	r3, [r3, #10]
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f040 8093 	bne.w	8005bfa <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005ae4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ae8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01b      	beq.n	8005b28 <USB_ActivateEndpoint+0x524>
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	441a      	add	r2, r3
 8005b12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005b14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005b36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01b      	beq.n	8005b78 <USB_ActivateEndpoint+0x574>
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b56:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	441a      	add	r2, r3
 8005b62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005b64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b90:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b92:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b96:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005b98:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005b9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b9e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	441a      	add	r2, r3
 8005baa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005bac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
 8005bf8:	e0bc      	b.n	8005d74 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d01d      	beq.n	8005c52 <USB_ActivateEndpoint+0x64e>
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c2c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	441a      	add	r2, r3
 8005c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005c62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01d      	beq.n	8005caa <USB_ActivateEndpoint+0x6a6>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c84:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	441a      	add	r2, r3
 8005c92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	78db      	ldrb	r3, [r3, #3]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d024      	beq.n	8005cfc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ccc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005cd0:	f083 0320 	eor.w	r3, r3, #32
 8005cd4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	8013      	strh	r3, [r2, #0]
 8005cfa:	e01d      	b.n	8005d38 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	441a      	add	r2, r3
 8005d5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005d74:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3774      	adds	r7, #116	@ 0x74
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop

08005d84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b08d      	sub	sp, #52	@ 0x34
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	7b1b      	ldrb	r3, [r3, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f040 808e 	bne.w	8005eb4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d044      	beq.n	8005e2a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	81bb      	strh	r3, [r7, #12]
 8005dae:	89bb      	ldrh	r3, [r7, #12]
 8005db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01b      	beq.n	8005df0 <USB_DeactivateEndpoint+0x6c>
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dce:	817b      	strh	r3, [r7, #10]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	441a      	add	r2, r3
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005de8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e06:	813b      	strh	r3, [r7, #8]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	441a      	add	r2, r3
 8005e12:	893b      	ldrh	r3, [r7, #8]
 8005e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	8013      	strh	r3, [r2, #0]
 8005e28:	e192      	b.n	8006150 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	827b      	strh	r3, [r7, #18]
 8005e38:	8a7b      	ldrh	r3, [r7, #18]
 8005e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01b      	beq.n	8005e7a <USB_DeactivateEndpoint+0xf6>
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e58:	823b      	strh	r3, [r7, #16]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	441a      	add	r2, r3
 8005e64:	8a3b      	ldrh	r3, [r7, #16]
 8005e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e90:	81fb      	strh	r3, [r7, #14]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	441a      	add	r2, r3
 8005e9c:	89fb      	ldrh	r3, [r7, #14]
 8005e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	8013      	strh	r3, [r2, #0]
 8005eb2:	e14d      	b.n	8006150 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	785b      	ldrb	r3, [r3, #1]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f040 80a5 	bne.w	8006008 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	843b      	strh	r3, [r7, #32]
 8005ecc:	8c3b      	ldrh	r3, [r7, #32]
 8005ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d01b      	beq.n	8005f0e <USB_DeactivateEndpoint+0x18a>
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eec:	83fb      	strh	r3, [r7, #30]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	8bfb      	ldrh	r3, [r7, #30]
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	83bb      	strh	r3, [r7, #28]
 8005f1c:	8bbb      	ldrh	r3, [r7, #28]
 8005f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01b      	beq.n	8005f5e <USB_DeactivateEndpoint+0x1da>
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f3c:	837b      	strh	r3, [r7, #26]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	8b7b      	ldrh	r3, [r7, #26]
 8005f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f74:	833b      	strh	r3, [r7, #24]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	441a      	add	r2, r3
 8005f80:	8b3b      	ldrh	r3, [r7, #24]
 8005f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fac:	82fb      	strh	r3, [r7, #22]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	441a      	add	r2, r3
 8005fb8:	8afb      	ldrh	r3, [r7, #22]
 8005fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fe4:	82bb      	strh	r3, [r7, #20]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	8abb      	ldrh	r3, [r7, #20]
 8005ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006002:	b29b      	uxth	r3, r3
 8006004:	8013      	strh	r3, [r2, #0]
 8006006:	e0a3      	b.n	8006150 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006016:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01b      	beq.n	8006058 <USB_DeactivateEndpoint+0x2d4>
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	441a      	add	r2, r3
 8006042:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800604c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006054:	b29b      	uxth	r3, r3
 8006056:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006066:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01b      	beq.n	80060a8 <USB_DeactivateEndpoint+0x324>
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006086:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006094:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006098:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800609c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060be:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	441a      	add	r2, r3
 80060ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060dc:	b29b      	uxth	r3, r3
 80060de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800610c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	b29b      	uxth	r3, r3
 8006126:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800612a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800613c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614c:	b29b      	uxth	r3, r3
 800614e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3734      	adds	r7, #52	@ 0x34
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr

0800615c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b0c2      	sub	sp, #264	@ 0x108
 8006160:	af00      	add	r7, sp, #0
 8006162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006166:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800616a:	6018      	str	r0, [r3, #0]
 800616c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006174:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	785b      	ldrb	r3, [r3, #1]
 8006182:	2b01      	cmp	r3, #1
 8006184:	f040 86b7 	bne.w	8006ef6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d908      	bls.n	80061b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80061a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80061b4:	e007      	b.n	80061c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80061b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	7b1b      	ldrb	r3, [r3, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d13a      	bne.n	800624c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6959      	ldr	r1, [r3, #20]
 80061e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	88da      	ldrh	r2, [r3, #6]
 80061ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80061f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80061fc:	6800      	ldr	r0, [r0, #0]
 80061fe:	f001 fc9c 	bl	8007b3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006206:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	613b      	str	r3, [r7, #16]
 800620e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800621c:	b29b      	uxth	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800622a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	011a      	lsls	r2, r3, #4
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	f000 be1f 	b.w	8006e8a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	78db      	ldrb	r3, [r3, #3]
 8006258:	2b02      	cmp	r3, #2
 800625a:	f040 8462 	bne.w	8006b22 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800625e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6a1a      	ldr	r2, [r3, #32]
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	f240 83df 	bls.w	8006a3a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800627c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80062a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	441a      	add	r2, r3
 80062c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80062c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062cc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80062d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80062d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e8:	1ad2      	subs	r2, r2, r3
 80062ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	b29b      	uxth	r3, r3
 8006314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 81c7 	beq.w	80066ac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800631e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	633b      	str	r3, [r7, #48]	@ 0x30
 800632a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800632e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d177      	bne.n	800642a <USB_EPStartXfer+0x2ce>
 800633a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006354:	b29b      	uxth	r3, r3
 8006356:	461a      	mov	r2, r3
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	4413      	add	r3, r2
 800635c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800635e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	011a      	lsls	r2, r3, #4
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	4413      	add	r3, r2
 8006370:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006380:	b29a      	uxth	r2, r3
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800638a:	2b3e      	cmp	r3, #62	@ 0x3e
 800638c:	d921      	bls.n	80063d2 <USB_EPStartXfer+0x276>
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639c:	f003 031f 	and.w	r3, r3, #31
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <USB_EPStartXfer+0x252>
 80063a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063a8:	3b01      	subs	r3, #1
 80063aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	029b      	lsls	r3, r3, #10
 80063bc:	b29b      	uxth	r3, r3
 80063be:	4313      	orrs	r3, r2
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	e050      	b.n	8006474 <USB_EPStartXfer+0x318>
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10a      	bne.n	80063f0 <USB_EPStartXfer+0x294>
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	e041      	b.n	8006474 <USB_EPStartXfer+0x318>
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <USB_EPStartXfer+0x2b4>
 8006406:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800640a:	3301      	adds	r3, #1
 800640c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29a      	uxth	r2, r3
 8006416:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800641a:	b29b      	uxth	r3, r3
 800641c:	029b      	lsls	r3, r3, #10
 800641e:	b29b      	uxth	r3, r3
 8006420:	4313      	orrs	r3, r2
 8006422:	b29a      	uxth	r2, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	e024      	b.n	8006474 <USB_EPStartXfer+0x318>
 800642a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d11c      	bne.n	8006474 <USB_EPStartXfer+0x318>
 800643a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006448:	b29b      	uxth	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	4413      	add	r3, r2
 8006450:	633b      	str	r3, [r7, #48]	@ 0x30
 8006452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	011a      	lsls	r2, r3, #4
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	4413      	add	r3, r2
 8006464:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646e:	b29a      	uxth	r2, r3
 8006470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006472:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	895b      	ldrh	r3, [r3, #10]
 8006480:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6959      	ldr	r1, [r3, #20]
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006494:	b29b      	uxth	r3, r3
 8006496:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800649a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800649e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064a2:	6800      	ldr	r0, [r0, #0]
 80064a4:	f001 fb49 	bl	8007b3a <USB_WritePMA>
            ep->xfer_buff += len;
 80064a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b8:	441a      	add	r2, r3
 80064ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a1a      	ldr	r2, [r3, #32]
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d90f      	bls.n	8006502 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80064e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a1a      	ldr	r2, [r3, #32]
 80064ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	621a      	str	r2, [r3, #32]
 8006500:	e00e      	b.n	8006520 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2200      	movs	r2, #0
 800651e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d177      	bne.n	8006620 <USB_EPStartXfer+0x4c4>
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	4413      	add	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	011a      	lsls	r2, r3, #4
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	4413      	add	r3, r2
 8006566:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006576:	b29a      	uxth	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	2b3e      	cmp	r3, #62	@ 0x3e
 8006582:	d921      	bls.n	80065c8 <USB_EPStartXfer+0x46c>
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2b00      	cmp	r3, #0
 8006598:	d104      	bne.n	80065a4 <USB_EPStartXfer+0x448>
 800659a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800659e:	3b01      	subs	r3, #1
 80065a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	801a      	strh	r2, [r3, #0]
 80065c6:	e056      	b.n	8006676 <USB_EPStartXfer+0x51a>
 80065c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <USB_EPStartXfer+0x48a>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065de:	b29a      	uxth	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e047      	b.n	8006676 <USB_EPStartXfer+0x51a>
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <USB_EPStartXfer+0x4aa>
 80065fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006600:	3301      	adds	r3, #1
 8006602:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	801a      	strh	r2, [r3, #0]
 800661e:	e02a      	b.n	8006676 <USB_EPStartXfer+0x51a>
 8006620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d122      	bne.n	8006676 <USB_EPStartXfer+0x51a>
 8006630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	623b      	str	r3, [r7, #32]
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	4413      	add	r3, r2
 8006652:	623b      	str	r3, [r7, #32]
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	011a      	lsls	r2, r3, #4
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	4413      	add	r3, r2
 8006666:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006670:	b29a      	uxth	r2, r3
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800667a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	891b      	ldrh	r3, [r3, #8]
 8006682:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6959      	ldr	r1, [r3, #20]
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	b29b      	uxth	r3, r3
 8006698:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800669c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066a0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066a4:	6800      	ldr	r0, [r0, #0]
 80066a6:	f001 fa48 	bl	8007b3a <USB_WritePMA>
 80066aa:	e3ee      	b.n	8006e8a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d177      	bne.n	80067ac <USB_EPStartXfer+0x650>
 80066bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066dc:	4413      	add	r3, r2
 80066de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066f0:	4413      	add	r3, r2
 80066f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80066f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006702:	b29a      	uxth	r2, r3
 8006704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	2b3e      	cmp	r3, #62	@ 0x3e
 800670e:	d921      	bls.n	8006754 <USB_EPStartXfer+0x5f8>
 8006710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800671a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <USB_EPStartXfer+0x5d4>
 8006726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800672a:	3b01      	subs	r3, #1
 800672c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29a      	uxth	r2, r3
 8006736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800673a:	b29b      	uxth	r3, r3
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	b29b      	uxth	r3, r3
 8006740:	4313      	orrs	r3, r2
 8006742:	b29b      	uxth	r3, r3
 8006744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800674c:	b29a      	uxth	r2, r3
 800674e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006750:	801a      	strh	r2, [r3, #0]
 8006752:	e056      	b.n	8006802 <USB_EPStartXfer+0x6a6>
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <USB_EPStartXfer+0x616>
 800675c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676a:	b29a      	uxth	r2, r3
 800676c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e047      	b.n	8006802 <USB_EPStartXfer+0x6a6>
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <USB_EPStartXfer+0x636>
 8006788:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800678c:	3301      	adds	r3, #1
 800678e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800679c:	b29b      	uxth	r3, r3
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	4313      	orrs	r3, r2
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e02a      	b.n	8006802 <USB_EPStartXfer+0x6a6>
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	785b      	ldrb	r3, [r3, #1]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d122      	bne.n	8006802 <USB_EPStartXfer+0x6a6>
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067dc:	4413      	add	r3, r2
 80067de:	653b      	str	r3, [r7, #80]	@ 0x50
 80067e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	011a      	lsls	r2, r3, #4
 80067ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f0:	4413      	add	r3, r2
 80067f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006800:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	891b      	ldrh	r3, [r3, #8]
 800680e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006812:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006816:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6959      	ldr	r1, [r3, #20]
 800681e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006822:	b29b      	uxth	r3, r3
 8006824:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006828:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800682c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006830:	6800      	ldr	r0, [r0, #0]
 8006832:	f001 f982 	bl	8007b3a <USB_WritePMA>
            ep->xfer_buff += len;
 8006836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	441a      	add	r2, r3
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	429a      	cmp	r2, r3
 800686e:	d90f      	bls.n	8006890 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006880:	1ad2      	subs	r2, r2, r3
 8006882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	621a      	str	r2, [r3, #32]
 800688e:	e00e      	b.n	80068ae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80068a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2200      	movs	r2, #0
 80068ac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80068ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d177      	bne.n	80069ba <USB_EPStartXfer+0x85e>
 80068ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	461a      	mov	r2, r3
 80068e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ea:	4413      	add	r3, r2
 80068ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	011a      	lsls	r2, r3, #4
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	4413      	add	r3, r2
 8006900:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
 8006906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006910:	b29a      	uxth	r2, r3
 8006912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	2b3e      	cmp	r3, #62	@ 0x3e
 800691c:	d921      	bls.n	8006962 <USB_EPStartXfer+0x806>
 800691e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <USB_EPStartXfer+0x7e2>
 8006934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006938:	3b01      	subs	r3, #1
 800693a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29a      	uxth	r2, r3
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006948:	b29b      	uxth	r3, r3
 800694a:	029b      	lsls	r3, r3, #10
 800694c:	b29b      	uxth	r3, r3
 800694e:	4313      	orrs	r3, r2
 8006950:	b29b      	uxth	r3, r3
 8006952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695a:	b29a      	uxth	r2, r3
 800695c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	e050      	b.n	8006a04 <USB_EPStartXfer+0x8a8>
 8006962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <USB_EPStartXfer+0x824>
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006978:	b29a      	uxth	r2, r3
 800697a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697c:	801a      	strh	r2, [r3, #0]
 800697e:	e041      	b.n	8006a04 <USB_EPStartXfer+0x8a8>
 8006980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006984:	085b      	lsrs	r3, r3, #1
 8006986:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d004      	beq.n	80069a0 <USB_EPStartXfer+0x844>
 8006996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699a:	3301      	adds	r3, #1
 800699c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	029b      	lsls	r3, r3, #10
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	4313      	orrs	r3, r2
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	e024      	b.n	8006a04 <USB_EPStartXfer+0x8a8>
 80069ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	785b      	ldrb	r3, [r3, #1]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d11c      	bne.n	8006a04 <USB_EPStartXfer+0x8a8>
 80069ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d8:	b29b      	uxth	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069de:	4413      	add	r3, r2
 80069e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	011a      	lsls	r2, r3, #4
 80069f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80069f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	895b      	ldrh	r3, [r3, #10]
 8006a10:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6959      	ldr	r1, [r3, #20]
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a2a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a2e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a32:	6800      	ldr	r0, [r0, #0]
 8006a34:	f001 f881 	bl	8007b3a <USB_WritePMA>
 8006a38:	e227      	b.n	8006e8a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a70:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ac6:	4413      	add	r3, r2
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	011a      	lsls	r2, r3, #4
 8006ad8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ada:	4413      	add	r3, r2
 8006adc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	891b      	ldrh	r3, [r3, #8]
 8006af8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6959      	ldr	r1, [r3, #20]
 8006b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b1a:	6800      	ldr	r0, [r0, #0]
 8006b1c:	f001 f80d 	bl	8007b3a <USB_WritePMA>
 8006b20:	e1b3      	b.n	8006e8a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6a1a      	ldr	r2, [r3, #32]
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b32:	1ad2      	subs	r2, r2, r3
 8006b34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	881b      	ldrh	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 80c6 	beq.w	8006cf4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d177      	bne.n	8006c74 <USB_EPStartXfer+0xb18>
 8006b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ba4:	4413      	add	r3, r2
 8006ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	011a      	lsls	r2, r3, #4
 8006bb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bd6:	d921      	bls.n	8006c1c <USB_EPStartXfer+0xac0>
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bdc:	095b      	lsrs	r3, r3, #5
 8006bde:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <USB_EPStartXfer+0xa9c>
 8006bee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006bf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	029b      	lsls	r3, r3, #10
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c18:	801a      	strh	r2, [r3, #0]
 8006c1a:	e050      	b.n	8006cbe <USB_EPStartXfer+0xb62>
 8006c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10a      	bne.n	8006c3a <USB_EPStartXfer+0xade>
 8006c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c36:	801a      	strh	r2, [r3, #0]
 8006c38:	e041      	b.n	8006cbe <USB_EPStartXfer+0xb62>
 8006c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d004      	beq.n	8006c5a <USB_EPStartXfer+0xafe>
 8006c50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c54:	3301      	adds	r3, #1
 8006c56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	029b      	lsls	r3, r3, #10
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c70:	801a      	strh	r2, [r3, #0]
 8006c72:	e024      	b.n	8006cbe <USB_EPStartXfer+0xb62>
 8006c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d11c      	bne.n	8006cbe <USB_EPStartXfer+0xb62>
 8006c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c98:	4413      	add	r3, r2
 8006c9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	011a      	lsls	r2, r3, #4
 8006caa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006cac:	4413      	add	r3, r2
 8006cae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	895b      	ldrh	r3, [r3, #10]
 8006cca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6959      	ldr	r1, [r3, #20]
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ce4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ce8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cec:	6800      	ldr	r0, [r0, #0]
 8006cee:	f000 ff24 	bl	8007b3a <USB_WritePMA>
 8006cf2:	e0ca      	b.n	8006e8a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d177      	bne.n	8006df4 <USB_EPStartXfer+0xc98>
 8006d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d24:	4413      	add	r3, r2
 8006d26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	011a      	lsls	r2, r3, #4
 8006d36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d38:	4413      	add	r3, r2
 8006d3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d4e:	801a      	strh	r2, [r3, #0]
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d54:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d56:	d921      	bls.n	8006d9c <USB_EPStartXfer+0xc40>
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d5c:	095b      	lsrs	r3, r3, #5
 8006d5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d66:	f003 031f 	and.w	r3, r3, #31
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <USB_EPStartXfer+0xc1c>
 8006d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d72:	3b01      	subs	r3, #1
 8006d74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006d78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	029b      	lsls	r3, r3, #10
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	e05c      	b.n	8006e56 <USB_EPStartXfer+0xcfa>
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <USB_EPStartXfer+0xc5e>
 8006da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	e04d      	b.n	8006e56 <USB_EPStartXfer+0xcfa>
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dbe:	085b      	lsrs	r3, r3, #1
 8006dc0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d004      	beq.n	8006dda <USB_EPStartXfer+0xc7e>
 8006dd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	029b      	lsls	r3, r3, #10
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	4313      	orrs	r3, r2
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006df0:	801a      	strh	r2, [r3, #0]
 8006df2:	e030      	b.n	8006e56 <USB_EPStartXfer+0xcfa>
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	785b      	ldrb	r3, [r3, #1]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d128      	bne.n	8006e56 <USB_EPStartXfer+0xcfa>
 8006e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	461a      	mov	r2, r3
 8006e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e28:	4413      	add	r3, r2
 8006e2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	011a      	lsls	r2, r3, #4
 8006e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e40:	4413      	add	r3, r2
 8006e42:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e54:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	891b      	ldrh	r3, [r3, #8]
 8006e62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6959      	ldr	r1, [r3, #20]
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e84:	6800      	ldr	r0, [r0, #0]
 8006e86:	f000 fe58 	bl	8007b3a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	881b      	ldrh	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006eb0:	817b      	strh	r3, [r7, #10]
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	f083 0310 	eor.w	r3, r3, #16
 8006eb8:	817b      	strh	r3, [r7, #10]
 8006eba:	897b      	ldrh	r3, [r7, #10]
 8006ebc:	f083 0320 	eor.w	r3, r3, #32
 8006ec0:	817b      	strh	r3, [r7, #10]
 8006ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	441a      	add	r2, r3
 8006edc:	897b      	ldrh	r3, [r7, #10]
 8006ede:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ee2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	8013      	strh	r3, [r2, #0]
 8006ef2:	f000 bcde 	b.w	80078b2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	7b1b      	ldrb	r3, [r3, #12]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 80bb 	bne.w	800707e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	699a      	ldr	r2, [r3, #24]
 8006f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d917      	bls.n	8006f54 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8006f24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f44:	1ad2      	subs	r2, r2, r3
 8006f46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	619a      	str	r2, [r3, #24]
 8006f52:	e00e      	b.n	8006f72 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8006f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8006f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f96:	4413      	add	r3, r2
 8006f98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	011a      	lsls	r2, r3, #4
 8006faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006fae:	4413      	add	r3, r2
 8006fb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006fb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fd2:	d924      	bls.n	800701e <USB_EPStartXfer+0xec2>
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe2:	f003 031f 	and.w	r3, r3, #31
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <USB_EPStartXfer+0xe98>
 8006fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007000:	b29b      	uxth	r3, r3
 8007002:	029b      	lsls	r3, r3, #10
 8007004:	b29b      	uxth	r3, r3
 8007006:	4313      	orrs	r3, r2
 8007008:	b29b      	uxth	r3, r3
 800700a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800700e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007012:	b29a      	uxth	r2, r3
 8007014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	f000 bc10 	b.w	800783e <USB_EPStartXfer+0x16e2>
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10c      	bne.n	8007040 <USB_EPStartXfer+0xee4>
 8007026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800703c:	801a      	strh	r2, [r3, #0]
 800703e:	e3fe      	b.n	800783e <USB_EPStartXfer+0x16e2>
 8007040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800704a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d004      	beq.n	8007060 <USB_EPStartXfer+0xf04>
 8007056:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800705a:	3301      	adds	r3, #1
 800705c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800706c:	b29b      	uxth	r3, r3
 800706e:	029b      	lsls	r3, r3, #10
 8007070:	b29b      	uxth	r3, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	b29a      	uxth	r2, r3
 8007076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e3df      	b.n	800783e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	78db      	ldrb	r3, [r3, #3]
 800708a:	2b02      	cmp	r3, #2
 800708c:	f040 8218 	bne.w	80074c0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007094:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	2b00      	cmp	r3, #0
 800709e:	f040 809d 	bne.w	80071dc <USB_EPStartXfer+0x1080>
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070c6:	4413      	add	r3, r2
 80070c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	011a      	lsls	r2, r3, #4
 80070da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070de:	4413      	add	r3, r2
 80070e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80070e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070fa:	801a      	strh	r2, [r3, #0]
 80070fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b3e      	cmp	r3, #62	@ 0x3e
 800710a:	d92b      	bls.n	8007164 <USB_EPStartXfer+0x1008>
 800710c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800711e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	2b00      	cmp	r3, #0
 8007130:	d104      	bne.n	800713c <USB_EPStartXfer+0xfe0>
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007136:	3b01      	subs	r3, #1
 8007138:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800713c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007148:	b29b      	uxth	r3, r3
 800714a:	029b      	lsls	r3, r3, #10
 800714c:	b29b      	uxth	r3, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	b29b      	uxth	r3, r3
 8007152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800715a:	b29a      	uxth	r2, r3
 800715c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007160:	801a      	strh	r2, [r3, #0]
 8007162:	e070      	b.n	8007246 <USB_EPStartXfer+0x10ea>
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10c      	bne.n	800718e <USB_EPStartXfer+0x1032>
 8007174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	b29b      	uxth	r3, r3
 800717c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e05b      	b.n	8007246 <USB_EPStartXfer+0x10ea>
 800718e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <USB_EPStartXfer+0x1062>
 80071b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b8:	3301      	adds	r3, #1
 80071ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4313      	orrs	r3, r2
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80071d8:	801a      	strh	r2, [r3, #0]
 80071da:	e034      	b.n	8007246 <USB_EPStartXfer+0x10ea>
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	785b      	ldrb	r3, [r3, #1]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d12c      	bne.n	8007246 <USB_EPStartXfer+0x10ea>
 80071ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007208:	b29b      	uxth	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007210:	4413      	add	r3, r2
 8007212:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800721a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	011a      	lsls	r2, r3, #4
 8007224:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007228:	4413      	add	r3, r2
 800722a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800722e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	b29a      	uxth	r2, r3
 8007240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007244:	801a      	strh	r2, [r3, #0]
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f040 809d 	bne.w	80073a0 <USB_EPStartXfer+0x1244>
 8007266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800728a:	4413      	add	r3, r2
 800728c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	011a      	lsls	r2, r3, #4
 800729e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072a2:	4413      	add	r3, r2
 80072a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ce:	d92b      	bls.n	8007328 <USB_EPStartXfer+0x11cc>
 80072d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 031f 	and.w	r3, r3, #31
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <USB_EPStartXfer+0x11a4>
 80072f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072fa:	3b01      	subs	r3, #1
 80072fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b29a      	uxth	r2, r3
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800730c:	b29b      	uxth	r3, r3
 800730e:	029b      	lsls	r3, r3, #10
 8007310:	b29b      	uxth	r3, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	b29b      	uxth	r3, r3
 8007316:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800731a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731e:	b29a      	uxth	r2, r3
 8007320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	e069      	b.n	80073fc <USB_EPStartXfer+0x12a0>
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10c      	bne.n	8007352 <USB_EPStartXfer+0x11f6>
 8007338:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800733c:	881b      	ldrh	r3, [r3, #0]
 800733e:	b29b      	uxth	r3, r3
 8007340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007348:	b29a      	uxth	r2, r3
 800734a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800734e:	801a      	strh	r2, [r3, #0]
 8007350:	e054      	b.n	80073fc <USB_EPStartXfer+0x12a0>
 8007352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <USB_EPStartXfer+0x1226>
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800737c:	3301      	adds	r3, #1
 800737e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007382:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	b29a      	uxth	r2, r3
 800738a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800738e:	b29b      	uxth	r3, r3
 8007390:	029b      	lsls	r3, r3, #10
 8007392:	b29b      	uxth	r3, r3
 8007394:	4313      	orrs	r3, r2
 8007396:	b29a      	uxth	r2, r3
 8007398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800739c:	801a      	strh	r2, [r3, #0]
 800739e:	e02d      	b.n	80073fc <USB_EPStartXfer+0x12a0>
 80073a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	785b      	ldrb	r3, [r3, #1]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d125      	bne.n	80073fc <USB_EPStartXfer+0x12a0>
 80073b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073be:	b29b      	uxth	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073c6:	4413      	add	r3, r2
 80073c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80073cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	011a      	lsls	r2, r3, #4
 80073da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80073de:	4413      	add	r3, r2
 80073e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80073e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 8218 	beq.w	800783e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800740e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800742e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <USB_EPStartXfer+0x12ea>
 800743a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800743e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007446:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800744a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800744e:	2b00      	cmp	r3, #0
 8007450:	f040 81f5 	bne.w	800783e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007454:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	f040 81ee 	bne.w	800783e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007488:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	441a      	add	r2, r3
 80074a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80074aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	8013      	strh	r3, [r2, #0]
 80074be:	e1be      	b.n	800783e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	78db      	ldrb	r3, [r3, #3]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	f040 81b4 	bne.w	800783a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80074d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d917      	bls.n	800751e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80074ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80074fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750e:	1ad2      	subs	r2, r2, r3
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	619a      	str	r2, [r3, #24]
 800751c:	e00e      	b.n	800753c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800751e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800752e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2200      	movs	r2, #0
 800753a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800753c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	785b      	ldrb	r3, [r3, #1]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 8085 	bne.w	8007658 <USB_EPStartXfer+0x14fc>
 800754e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800755c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007572:	4413      	add	r3, r2
 8007574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	011a      	lsls	r2, r3, #4
 8007586:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800758a:	4413      	add	r3, r2
 800758c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80075ae:	d923      	bls.n	80075f8 <USB_EPStartXfer+0x149c>
 80075b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b4:	095b      	lsrs	r3, r3, #5
 80075b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075be:	f003 031f 	and.w	r3, r3, #31
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <USB_EPStartXfer+0x1474>
 80075c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ca:	3b01      	subs	r3, #1
 80075cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80075d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075dc:	b29b      	uxth	r3, r3
 80075de:	029b      	lsls	r3, r3, #10
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	4313      	orrs	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	e060      	b.n	80076ba <USB_EPStartXfer+0x155e>
 80075f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10c      	bne.n	800761a <USB_EPStartXfer+0x14be>
 8007600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800760c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007610:	b29a      	uxth	r2, r3
 8007612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	e04f      	b.n	80076ba <USB_EPStartXfer+0x155e>
 800761a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800761e:	085b      	lsrs	r3, r3, #1
 8007620:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	2b00      	cmp	r3, #0
 800762e:	d004      	beq.n	800763a <USB_EPStartXfer+0x14de>
 8007630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007634:	3301      	adds	r3, #1
 8007636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800763a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29a      	uxth	r2, r3
 8007642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007646:	b29b      	uxth	r3, r3
 8007648:	029b      	lsls	r3, r3, #10
 800764a:	b29b      	uxth	r3, r3
 800764c:	4313      	orrs	r3, r2
 800764e:	b29a      	uxth	r2, r3
 8007650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	e030      	b.n	80076ba <USB_EPStartXfer+0x155e>
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d128      	bne.n	80076ba <USB_EPStartXfer+0x155e>
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007684:	b29b      	uxth	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800768c:	4413      	add	r3, r2
 800768e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	011a      	lsls	r2, r3, #4
 80076a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076a4:	4413      	add	r3, r2
 80076a6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076aa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80076b8:	801a      	strh	r2, [r3, #0]
 80076ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	785b      	ldrb	r3, [r3, #1]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 8085 	bne.w	80077e4 <USB_EPStartXfer+0x1688>
 80076da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80076e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80076fe:	4413      	add	r3, r2
 8007700:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	011a      	lsls	r2, r3, #4
 8007712:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007716:	4413      	add	r3, r2
 8007718:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800771c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800772c:	b29a      	uxth	r2, r3
 800772e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007738:	2b3e      	cmp	r3, #62	@ 0x3e
 800773a:	d923      	bls.n	8007784 <USB_EPStartXfer+0x1628>
 800773c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <USB_EPStartXfer+0x1600>
 8007752:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007756:	3b01      	subs	r3, #1
 8007758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800775c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	b29a      	uxth	r2, r3
 8007764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007768:	b29b      	uxth	r3, r3
 800776a:	029b      	lsls	r3, r3, #10
 800776c:	b29b      	uxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b29b      	uxth	r3, r3
 8007772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777a:	b29a      	uxth	r2, r3
 800777c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007780:	801a      	strh	r2, [r3, #0]
 8007782:	e05c      	b.n	800783e <USB_EPStartXfer+0x16e2>
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10c      	bne.n	80077a6 <USB_EPStartXfer+0x164a>
 800778c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29b      	uxth	r3, r3
 8007794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779c:	b29a      	uxth	r2, r3
 800779e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	e04b      	b.n	800783e <USB_EPStartXfer+0x16e2>
 80077a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <USB_EPStartXfer+0x166a>
 80077bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077c0:	3301      	adds	r3, #1
 80077c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80077c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	4313      	orrs	r3, r2
 80077da:	b29a      	uxth	r2, r3
 80077dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80077e0:	801a      	strh	r2, [r3, #0]
 80077e2:	e02c      	b.n	800783e <USB_EPStartXfer+0x16e2>
 80077e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d124      	bne.n	800783e <USB_EPStartXfer+0x16e2>
 80077f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007802:	b29b      	uxth	r3, r3
 8007804:	461a      	mov	r2, r3
 8007806:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800780a:	4413      	add	r3, r2
 800780c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	011a      	lsls	r2, r3, #4
 800781e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007822:	4413      	add	r3, r2
 8007824:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007828:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800782c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007830:	b29a      	uxth	r2, r3
 8007832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007836:	801a      	strh	r2, [r3, #0]
 8007838:	e001      	b.n	800783e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e03a      	b.n	80078b4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800783e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007842:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800784c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007864:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007868:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800786c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007870:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007874:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007878:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800787c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d020      	beq.n	8007912 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078e6:	81bb      	strh	r3, [r7, #12]
 80078e8:	89bb      	ldrh	r3, [r7, #12]
 80078ea:	f083 0310 	eor.w	r3, r3, #16
 80078ee:	81bb      	strh	r3, [r7, #12]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	441a      	add	r2, r3
 80078fa:	89bb      	ldrh	r3, [r7, #12]
 80078fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007900:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007904:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800790c:	b29b      	uxth	r3, r3
 800790e:	8013      	strh	r3, [r2, #0]
 8007910:	e01f      	b.n	8007952 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007928:	81fb      	strh	r3, [r7, #14]
 800792a:	89fb      	ldrh	r3, [r7, #14]
 800792c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007930:	81fb      	strh	r3, [r7, #14]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	441a      	add	r2, r3
 800793c:	89fb      	ldrh	r3, [r7, #14]
 800793e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800794a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800794e:	b29b      	uxth	r3, r3
 8007950:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr

0800795e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800795e:	b480      	push	{r7}
 8007960:	b087      	sub	sp, #28
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	7b1b      	ldrb	r3, [r3, #12]
 800796c:	2b00      	cmp	r3, #0
 800796e:	f040 809d 	bne.w	8007aac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	785b      	ldrb	r3, [r3, #1]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d04c      	beq.n	8007a14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	823b      	strh	r3, [r7, #16]
 8007988:	8a3b      	ldrh	r3, [r7, #16]
 800798a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01b      	beq.n	80079ca <USB_EPClearStall+0x6c>
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a8:	81fb      	strh	r3, [r7, #14]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	441a      	add	r2, r3
 80079b4:	89fb      	ldrh	r3, [r7, #14]
 80079b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079c2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	78db      	ldrb	r3, [r3, #3]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d06c      	beq.n	8007aac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079e8:	81bb      	strh	r3, [r7, #12]
 80079ea:	89bb      	ldrh	r3, [r7, #12]
 80079ec:	f083 0320 	eor.w	r3, r3, #32
 80079f0:	81bb      	strh	r3, [r7, #12]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	441a      	add	r2, r3
 80079fc:	89bb      	ldrh	r3, [r7, #12]
 80079fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	8013      	strh	r3, [r2, #0]
 8007a12:	e04b      	b.n	8007aac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	82fb      	strh	r3, [r7, #22]
 8007a22:	8afb      	ldrh	r3, [r7, #22]
 8007a24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d01b      	beq.n	8007a64 <USB_EPClearStall+0x106>
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4413      	add	r3, r2
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a42:	82bb      	strh	r3, [r7, #20]
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	441a      	add	r2, r3
 8007a4e:	8abb      	ldrh	r3, [r7, #20]
 8007a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7a:	827b      	strh	r3, [r7, #18]
 8007a7c:	8a7b      	ldrh	r3, [r7, #18]
 8007a7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a82:	827b      	strh	r3, [r7, #18]
 8007a84:	8a7b      	ldrh	r3, [r7, #18]
 8007a86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a8a:	827b      	strh	r3, [r7, #18]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	441a      	add	r2, r3
 8007a96:	8a7b      	ldrh	r3, [r7, #18]
 8007a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr

08007ab8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d103      	bne.n	8007ad2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2280      	movs	r2, #128	@ 0x80
 8007ace:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bc80      	pop	{r7}
 8007adc:	4770      	bx	lr

08007ade <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr

08007b06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b085      	sub	sp, #20
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007b18:	68fb      	ldr	r3, [r7, #12]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr

08007b3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b08b      	sub	sp, #44	@ 0x2c
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	60b9      	str	r1, [r7, #8]
 8007b44:	4611      	mov	r1, r2
 8007b46:	461a      	mov	r2, r3
 8007b48:	460b      	mov	r3, r1
 8007b4a:	80fb      	strh	r3, [r7, #6]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b50:	88bb      	ldrh	r3, [r7, #4]
 8007b52:	3301      	adds	r3, #1
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b60:	88fb      	ldrh	r3, [r7, #6]
 8007b62:	005a      	lsls	r2, r3, #1
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b72:	e01e      	b.n	8007bb2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	b21a      	sxth	r2, r3
 8007b84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b21b      	sxth	r3, r3
 8007b8c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	8a7a      	ldrh	r2, [r7, #18]
 8007b92:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	3302      	adds	r3, #2
 8007b98:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1dd      	bne.n	8007b74 <USB_WritePMA+0x3a>
  }
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	372c      	adds	r7, #44	@ 0x2c
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b08b      	sub	sp, #44	@ 0x2c
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	80fb      	strh	r3, [r7, #6]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007bda:	88bb      	ldrh	r3, [r7, #4]
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	005a      	lsls	r2, r3, #1
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bf6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bfc:	e01b      	b.n	8007c36 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	3302      	adds	r3, #2
 8007c0a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	3301      	adds	r3, #1
 8007c18:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	0a1b      	lsrs	r3, r3, #8
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	3301      	adds	r3, #1
 8007c28:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	3302      	adds	r3, #2
 8007c2e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c32:	3b01      	subs	r3, #1
 8007c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e0      	bne.n	8007bfe <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007c3c:	88bb      	ldrh	r3, [r7, #4]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	701a      	strb	r2, [r3, #0]
  }
}
 8007c58:	bf00      	nop
 8007c5a:	372c      	adds	r7, #44	@ 0x2c
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bc80      	pop	{r7}
 8007c60:	4770      	bx	lr

08007c62 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7c1b      	ldrb	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d115      	bne.n	8007ca6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c7e:	2202      	movs	r2, #2
 8007c80:	2181      	movs	r1, #129	@ 0x81
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f004 fc07 	bl	800c496 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c92:	2202      	movs	r2, #2
 8007c94:	2101      	movs	r1, #1
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f004 fbfd 	bl	800c496 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007ca4:	e012      	b.n	8007ccc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ca6:	2340      	movs	r3, #64	@ 0x40
 8007ca8:	2202      	movs	r2, #2
 8007caa:	2181      	movs	r1, #129	@ 0x81
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f004 fbf2 	bl	800c496 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007cb8:	2340      	movs	r3, #64	@ 0x40
 8007cba:	2202      	movs	r2, #2
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f004 fbe9 	bl	800c496 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ccc:	2308      	movs	r3, #8
 8007cce:	2203      	movs	r2, #3
 8007cd0:	2182      	movs	r1, #130	@ 0x82
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f004 fbdf 	bl	800c496 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cde:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007ce2:	f004 fcff 	bl	800c6e4 <USBD_static_malloc>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
 8007cfc:	e026      	b.n	8007d4c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	7c1b      	ldrb	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d109      	bne.n	8007d3c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d32:	2101      	movs	r1, #1
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f004 fc9e 	bl	800c676 <USBD_LL_PrepareReceive>
 8007d3a:	e007      	b.n	8007d4c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d42:	2340      	movs	r3, #64	@ 0x40
 8007d44:	2101      	movs	r1, #1
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f004 fc95 	bl	800c676 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	460b      	mov	r3, r1
 8007d60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d66:	2181      	movs	r1, #129	@ 0x81
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f004 fbba 	bl	800c4e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d74:	2101      	movs	r1, #1
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f004 fbb3 	bl	800c4e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d84:	2182      	movs	r1, #130	@ 0x82
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f004 fbab 	bl	800c4e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00e      	beq.n	8007dba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dac:	4618      	mov	r0, r3
 8007dae:	f004 fca5 	bl	800c6fc <USBD_static_free>
    pdev->pClassData = NULL;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007dd4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d039      	beq.n	8007e62 <USBD_CDC_Setup+0x9e>
 8007dee:	2b20      	cmp	r3, #32
 8007df0:	d17f      	bne.n	8007ef2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	88db      	ldrh	r3, [r3, #6]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d029      	beq.n	8007e4e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b25b      	sxtb	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	da11      	bge.n	8007e28 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007e10:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	88d2      	ldrh	r2, [r2, #6]
 8007e16:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e18:	6939      	ldr	r1, [r7, #16]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fa05 	bl	8009230 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e26:	e06b      	b.n	8007f00 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	785a      	ldrb	r2, [r3, #1]
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	88db      	ldrh	r3, [r3, #6]
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e3e:	6939      	ldr	r1, [r7, #16]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	88db      	ldrh	r3, [r3, #6]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fa20 	bl	800928c <USBD_CtlPrepareRx>
      break;
 8007e4c:	e058      	b.n	8007f00 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	7850      	ldrb	r0, [r2, #1]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	4798      	blx	r3
      break;
 8007e60:	e04e      	b.n	8007f00 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b0b      	cmp	r3, #11
 8007e68:	d02e      	beq.n	8007ec8 <USBD_CDC_Setup+0x104>
 8007e6a:	2b0b      	cmp	r3, #11
 8007e6c:	dc38      	bgt.n	8007ee0 <USBD_CDC_Setup+0x11c>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d002      	beq.n	8007e78 <USBD_CDC_Setup+0xb4>
 8007e72:	2b0a      	cmp	r3, #10
 8007e74:	d014      	beq.n	8007ea0 <USBD_CDC_Setup+0xdc>
 8007e76:	e033      	b.n	8007ee0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d107      	bne.n	8007e92 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e82:	f107 030c 	add.w	r3, r7, #12
 8007e86:	2202      	movs	r2, #2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 f9d0 	bl	8009230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e90:	e02e      	b.n	8007ef0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 f961 	bl	800915c <USBD_CtlError>
            ret = USBD_FAIL;
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e9e:	e027      	b.n	8007ef0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d107      	bne.n	8007eba <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007eaa:	f107 030f 	add.w	r3, r7, #15
 8007eae:	2201      	movs	r2, #1
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f001 f9bc 	bl	8009230 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eb8:	e01a      	b.n	8007ef0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f94d 	bl	800915c <USBD_CtlError>
            ret = USBD_FAIL;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ec6:	e013      	b.n	8007ef0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d00d      	beq.n	8007eee <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007ed2:	6839      	ldr	r1, [r7, #0]
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f001 f941 	bl	800915c <USBD_CtlError>
            ret = USBD_FAIL;
 8007eda:	2302      	movs	r3, #2
 8007edc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ede:	e006      	b.n	8007eee <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 f93a 	bl	800915c <USBD_CtlError>
          ret = USBD_FAIL;
 8007ee8:	2302      	movs	r3, #2
 8007eea:	75fb      	strb	r3, [r7, #23]
          break;
 8007eec:	e000      	b.n	8007ef0 <USBD_CDC_Setup+0x12c>
          break;
 8007eee:	bf00      	nop
      }
      break;
 8007ef0:	e006      	b.n	8007f00 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f001 f931 	bl	800915c <USBD_CtlError>
      ret = USBD_FAIL;
 8007efa:	2302      	movs	r3, #2
 8007efc:	75fb      	strb	r3, [r7, #23]
      break;
 8007efe:	bf00      	nop
  }

  return ret;
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f1c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8007f24:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d03a      	beq.n	8007fa6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	331c      	adds	r3, #28
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d029      	beq.n	8007f9a <USBD_CDC_DataIn+0x90>
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	440b      	add	r3, r1
 8007f54:	331c      	adds	r3, #28
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	78f9      	ldrb	r1, [r7, #3]
 8007f5a:	68b8      	ldr	r0, [r7, #8]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	4403      	add	r3, r0
 8007f66:	3320      	adds	r3, #32
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d110      	bne.n	8007f9a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f78:	78fa      	ldrb	r2, [r7, #3]
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	440b      	add	r3, r1
 8007f86:	331c      	adds	r3, #28
 8007f88:	2200      	movs	r2, #0
 8007f8a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f8c:	78f9      	ldrb	r1, [r7, #3]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2200      	movs	r2, #0
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f004 fb4c 	bl	800c630 <USBD_LL_Transmit>
 8007f98:	e003      	b.n	8007fa2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e000      	b.n	8007fa8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007fa6:	2302      	movs	r3, #2
  }
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f004 fb77 	bl	800c6bc <USBD_LL_GetRxDataSize>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00d      	beq.n	8007ffc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4798      	blx	r3

    return USBD_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e000      	b.n	8007ffe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007ffc:	2302      	movs	r3, #2
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008014:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800801c:	2b00      	cmp	r3, #0
 800801e:	d014      	beq.n	800804a <USBD_CDC_EP0_RxReady+0x44>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008026:	2bff      	cmp	r3, #255	@ 0xff
 8008028:	d00f      	beq.n	800804a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008038:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008040:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	22ff      	movs	r2, #255	@ 0xff
 8008046:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2243      	movs	r2, #67	@ 0x43
 8008060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008062:	4b03      	ldr	r3, [pc, #12]	@ (8008070 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	200000b4 	.word	0x200000b4

08008074 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2243      	movs	r2, #67	@ 0x43
 8008080:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008082:	4b03      	ldr	r3, [pc, #12]	@ (8008090 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008084:	4618      	mov	r0, r3
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	bc80      	pop	{r7}
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	20000070 	.word	0x20000070

08008094 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2243      	movs	r2, #67	@ 0x43
 80080a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80080a2:	4b03      	ldr	r3, [pc, #12]	@ (80080b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	200000f8 	.word	0x200000f8

080080b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	220a      	movs	r2, #10
 80080c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	@ (80080d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	2000002c 	.word	0x2000002c

080080d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080de:	2302      	movs	r3, #2
 80080e0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008114:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800811e:	88fa      	ldrh	r2, [r7, #6]
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	371c      	adds	r7, #28
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr

08008132 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008142:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008166:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01c      	beq.n	80081ac <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008178:	2b00      	cmp	r3, #0
 800817a:	d115      	bne.n	80081a8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800819a:	b29b      	uxth	r3, r3
 800819c:	2181      	movs	r1, #129	@ 0x81
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f004 fa46 	bl	800c630 <USBD_LL_Transmit>

      return USBD_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	e002      	b.n	80081ae <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e000      	b.n	80081ae <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80081ac:	2302      	movs	r3, #2
  }
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d017      	beq.n	8008200 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7c1b      	ldrb	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d109      	bne.n	80081ec <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081e2:	2101      	movs	r1, #1
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f004 fa46 	bl	800c676 <USBD_LL_PrepareReceive>
 80081ea:	e007      	b.n	80081fc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80081f2:	2340      	movs	r3, #64	@ 0x40
 80081f4:	2101      	movs	r1, #1
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f004 fa3d 	bl	800c676 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	e000      	b.n	8008202 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008200:	2302      	movs	r3, #2
  }
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	4613      	mov	r3, r2
 8008216:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800821e:	2302      	movs	r3, #2
 8008220:	e01a      	b.n	8008258 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008228:	2b00      	cmp	r3, #0
 800822a:	d003      	beq.n	8008234 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	79fa      	ldrb	r2, [r7, #7]
 800824e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f004 f8ab 	bl	800c3ac <USBD_LL_Init>

  return USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d006      	beq.n	8008282 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
 8008280:	e001      	b.n	8008286 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008282:	2302      	movs	r3, #2
 8008284:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008286:	7bfb      	ldrb	r3, [r7, #15]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr

08008292 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b082      	sub	sp, #8
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f004 f8e0 	bl	800c460 <USBD_LL_Start>

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr

080082be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b084      	sub	sp, #16
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80082ca:	2302      	movs	r3, #2
 80082cc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00c      	beq.n	80082f2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	78fa      	ldrb	r2, [r7, #3]
 80082e2:	4611      	mov	r1, r2
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	78fa      	ldrb	r2, [r7, #3]
 8008312:	4611      	mov	r1, r2
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b082      	sub	sp, #8
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fed8 	bl	80090ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008356:	f003 031f 	and.w	r3, r3, #31
 800835a:	2b02      	cmp	r3, #2
 800835c:	d016      	beq.n	800838c <USBD_LL_SetupStage+0x6a>
 800835e:	2b02      	cmp	r3, #2
 8008360:	d81c      	bhi.n	800839c <USBD_LL_SetupStage+0x7a>
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <USBD_LL_SetupStage+0x4a>
 8008366:	2b01      	cmp	r3, #1
 8008368:	d008      	beq.n	800837c <USBD_LL_SetupStage+0x5a>
 800836a:	e017      	b.n	800839c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f9cb 	bl	8008710 <USBD_StdDevReq>
      break;
 800837a:	e01a      	b.n	80083b2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fa2d 	bl	80087e4 <USBD_StdItfReq>
      break;
 800838a:	e012      	b.n	80083b2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa6d 	bl	8008874 <USBD_StdEPReq>
      break;
 800839a:	e00a      	b.n	80083b2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80083a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f004 f8b8 	bl	800c520 <USBD_LL_StallEP>
      break;
 80083b0:	bf00      	nop
  }

  return USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	460b      	mov	r3, r1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80083ca:	7afb      	ldrb	r3, [r7, #11]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d14b      	bne.n	8008468 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80083d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d134      	bne.n	800844c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d919      	bls.n	8008422 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	68da      	ldr	r2, [r3, #12]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	68da      	ldr	r2, [r3, #12]
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008404:	429a      	cmp	r2, r3
 8008406:	d203      	bcs.n	8008410 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800840c:	b29b      	uxth	r3, r3
 800840e:	e002      	b.n	8008416 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008414:	b29b      	uxth	r3, r3
 8008416:	461a      	mov	r2, r3
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 ff54 	bl	80092c8 <USBD_CtlContinueRx>
 8008420:	e038      	b.n	8008494 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008434:	2b03      	cmp	r3, #3
 8008436:	d105      	bne.n	8008444 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 ff51 	bl	80092ec <USBD_CtlSendStatus>
 800844a:	e023      	b.n	8008494 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008452:	2b05      	cmp	r3, #5
 8008454:	d11e      	bne.n	8008494 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800845e:	2100      	movs	r1, #0
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f004 f85d 	bl	800c520 <USBD_LL_StallEP>
 8008466:	e015      	b.n	8008494 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00d      	beq.n	8008490 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800847a:	2b03      	cmp	r3, #3
 800847c:	d108      	bne.n	8008490 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	7afa      	ldrb	r2, [r7, #11]
 8008488:	4611      	mov	r1, r2
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	4798      	blx	r3
 800848e:	e001      	b.n	8008494 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008490:	2302      	movs	r3, #2
 8008492:	e000      	b.n	8008496 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b086      	sub	sp, #24
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	460b      	mov	r3, r1
 80084a8:	607a      	str	r2, [r7, #4]
 80084aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084ac:	7afb      	ldrb	r3, [r7, #11]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d17f      	bne.n	80085b2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3314      	adds	r3, #20
 80084b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d15c      	bne.n	800857c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d915      	bls.n	80084fa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	1ad2      	subs	r2, r2, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	461a      	mov	r2, r3
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 febe 	bl	8009268 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ec:	2300      	movs	r3, #0
 80084ee:	2200      	movs	r2, #0
 80084f0:	2100      	movs	r1, #0
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f004 f8bf 	bl	800c676 <USBD_LL_PrepareReceive>
 80084f8:	e04e      	b.n	8008598 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	6912      	ldr	r2, [r2, #16]
 8008502:	fbb3 f1f2 	udiv	r1, r3, r2
 8008506:	fb01 f202 	mul.w	r2, r1, r2
 800850a:	1a9b      	subs	r3, r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d11c      	bne.n	800854a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008518:	429a      	cmp	r2, r3
 800851a:	d316      	bcc.n	800854a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008526:	429a      	cmp	r2, r3
 8008528:	d20f      	bcs.n	800854a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800852a:	2200      	movs	r2, #0
 800852c:	2100      	movs	r1, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fe9a 	bl	8009268 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800853c:	2300      	movs	r3, #0
 800853e:	2200      	movs	r2, #0
 8008540:	2100      	movs	r1, #0
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f004 f897 	bl	800c676 <USBD_LL_PrepareReceive>
 8008548:	e026      	b.n	8008598 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800855c:	2b03      	cmp	r3, #3
 800855e:	d105      	bne.n	800856c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800856c:	2180      	movs	r1, #128	@ 0x80
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f003 ffd6 	bl	800c520 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 fecc 	bl	8009312 <USBD_CtlReceiveStatus>
 800857a:	e00d      	b.n	8008598 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008582:	2b04      	cmp	r3, #4
 8008584:	d004      	beq.n	8008590 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800858c:	2b00      	cmp	r3, #0
 800858e:	d103      	bne.n	8008598 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008590:	2180      	movs	r1, #128	@ 0x80
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f003 ffc4 	bl	800c520 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d11d      	bne.n	80085de <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fe81 	bl	80082aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085b0:	e015      	b.n	80085de <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00d      	beq.n	80085da <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d108      	bne.n	80085da <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ce:	695b      	ldr	r3, [r3, #20]
 80085d0:	7afa      	ldrb	r2, [r7, #11]
 80085d2:	4611      	mov	r1, r2
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	4798      	blx	r3
 80085d8:	e001      	b.n	80085de <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085da:	2302      	movs	r3, #2
 80085dc:	e000      	b.n	80085e0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3718      	adds	r7, #24
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085f0:	2340      	movs	r3, #64	@ 0x40
 80085f2:	2200      	movs	r2, #0
 80085f4:	2100      	movs	r1, #0
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f003 ff4d 	bl	800c496 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2240      	movs	r2, #64	@ 0x40
 8008608:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800860c:	2340      	movs	r3, #64	@ 0x40
 800860e:	2200      	movs	r2, #0
 8008610:	2180      	movs	r1, #128	@ 0x80
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f003 ff3f 	bl	800c496 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2240      	movs	r2, #64	@ 0x40
 8008622:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008648:	2b00      	cmp	r3, #0
 800864a:	d009      	beq.n	8008660 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6852      	ldr	r2, [r2, #4]
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	4611      	mov	r1, r2
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3
  }

  return USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	460b      	mov	r3, r1
 8008674:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	78fa      	ldrb	r2, [r7, #3]
 800867a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr

08008688 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2204      	movs	r2, #4
 80086a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d105      	bne.n	80086ce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bc80      	pop	{r7}
 80086d8:	4770      	bx	lr

080086da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d10b      	bne.n	8008704 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008726:	2b40      	cmp	r3, #64	@ 0x40
 8008728:	d005      	beq.n	8008736 <USBD_StdDevReq+0x26>
 800872a:	2b40      	cmp	r3, #64	@ 0x40
 800872c:	d84f      	bhi.n	80087ce <USBD_StdDevReq+0xbe>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d009      	beq.n	8008746 <USBD_StdDevReq+0x36>
 8008732:	2b20      	cmp	r3, #32
 8008734:	d14b      	bne.n	80087ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	4798      	blx	r3
      break;
 8008744:	e048      	b.n	80087d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	2b09      	cmp	r3, #9
 800874c:	d839      	bhi.n	80087c2 <USBD_StdDevReq+0xb2>
 800874e:	a201      	add	r2, pc, #4	@ (adr r2, 8008754 <USBD_StdDevReq+0x44>)
 8008750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008754:	080087a5 	.word	0x080087a5
 8008758:	080087b9 	.word	0x080087b9
 800875c:	080087c3 	.word	0x080087c3
 8008760:	080087af 	.word	0x080087af
 8008764:	080087c3 	.word	0x080087c3
 8008768:	08008787 	.word	0x08008787
 800876c:	0800877d 	.word	0x0800877d
 8008770:	080087c3 	.word	0x080087c3
 8008774:	0800879b 	.word	0x0800879b
 8008778:	08008791 	.word	0x08008791
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f9dc 	bl	8008b3c <USBD_GetDescriptor>
          break;
 8008784:	e022      	b.n	80087cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb3f 	bl	8008e0c <USBD_SetAddress>
          break;
 800878e:	e01d      	b.n	80087cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fb7e 	bl	8008e94 <USBD_SetConfig>
          break;
 8008798:	e018      	b.n	80087cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fc07 	bl	8008fb0 <USBD_GetConfig>
          break;
 80087a2:	e013      	b.n	80087cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fc37 	bl	800901a <USBD_GetStatus>
          break;
 80087ac:	e00e      	b.n	80087cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc65 	bl	8009080 <USBD_SetFeature>
          break;
 80087b6:	e009      	b.n	80087cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc74 	bl	80090a8 <USBD_ClrFeature>
          break;
 80087c0:	e004      	b.n	80087cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fcc9 	bl	800915c <USBD_CtlError>
          break;
 80087ca:	bf00      	nop
      }
      break;
 80087cc:	e004      	b.n	80087d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fcc3 	bl	800915c <USBD_CtlError>
      break;
 80087d6:	bf00      	nop
  }

  return ret;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop

080087e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087fa:	2b40      	cmp	r3, #64	@ 0x40
 80087fc:	d005      	beq.n	800880a <USBD_StdItfReq+0x26>
 80087fe:	2b40      	cmp	r3, #64	@ 0x40
 8008800:	d82e      	bhi.n	8008860 <USBD_StdItfReq+0x7c>
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <USBD_StdItfReq+0x26>
 8008806:	2b20      	cmp	r3, #32
 8008808:	d12a      	bne.n	8008860 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008810:	3b01      	subs	r3, #1
 8008812:	2b02      	cmp	r3, #2
 8008814:	d81d      	bhi.n	8008852 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	889b      	ldrh	r3, [r3, #4]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	d813      	bhi.n	8008848 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	4798      	blx	r3
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	88db      	ldrh	r3, [r3, #6]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d110      	bne.n	800885c <USBD_StdItfReq+0x78>
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d10d      	bne.n	800885c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fd53 	bl	80092ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008846:	e009      	b.n	800885c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fc86 	bl	800915c <USBD_CtlError>
          break;
 8008850:	e004      	b.n	800885c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fc81 	bl	800915c <USBD_CtlError>
          break;
 800885a:	e000      	b.n	800885e <USBD_StdItfReq+0x7a>
          break;
 800885c:	bf00      	nop
      }
      break;
 800885e:	e004      	b.n	800886a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fc7a 	bl	800915c <USBD_CtlError>
      break;
 8008868:	bf00      	nop
  }

  return USBD_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3710      	adds	r7, #16
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	889b      	ldrh	r3, [r3, #4]
 8008886:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008890:	2b40      	cmp	r3, #64	@ 0x40
 8008892:	d007      	beq.n	80088a4 <USBD_StdEPReq+0x30>
 8008894:	2b40      	cmp	r3, #64	@ 0x40
 8008896:	f200 8146 	bhi.w	8008b26 <USBD_StdEPReq+0x2b2>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <USBD_StdEPReq+0x40>
 800889e:	2b20      	cmp	r3, #32
 80088a0:	f040 8141 	bne.w	8008b26 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	4798      	blx	r3
      break;
 80088b2:	e13d      	b.n	8008b30 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d10a      	bne.n	80088d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
 80088ce:	4603      	mov	r3, r0
 80088d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	e12d      	b.n	8008b32 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	785b      	ldrb	r3, [r3, #1]
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d007      	beq.n	80088ee <USBD_StdEPReq+0x7a>
 80088de:	2b03      	cmp	r3, #3
 80088e0:	f300 811b 	bgt.w	8008b1a <USBD_StdEPReq+0x2a6>
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d072      	beq.n	80089ce <USBD_StdEPReq+0x15a>
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d03a      	beq.n	8008962 <USBD_StdEPReq+0xee>
 80088ec:	e115      	b.n	8008b1a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d002      	beq.n	80088fe <USBD_StdEPReq+0x8a>
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d015      	beq.n	8008928 <USBD_StdEPReq+0xb4>
 80088fc:	e02b      	b.n	8008956 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00c      	beq.n	800891e <USBD_StdEPReq+0xaa>
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	2b80      	cmp	r3, #128	@ 0x80
 8008908:	d009      	beq.n	800891e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800890a:	7bbb      	ldrb	r3, [r7, #14]
 800890c:	4619      	mov	r1, r3
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f003 fe06 	bl	800c520 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008914:	2180      	movs	r1, #128	@ 0x80
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f003 fe02 	bl	800c520 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800891c:	e020      	b.n	8008960 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc1b 	bl	800915c <USBD_CtlError>
              break;
 8008926:	e01b      	b.n	8008960 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	885b      	ldrh	r3, [r3, #2]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10e      	bne.n	800894e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008930:	7bbb      	ldrb	r3, [r7, #14]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00b      	beq.n	800894e <USBD_StdEPReq+0xda>
 8008936:	7bbb      	ldrb	r3, [r7, #14]
 8008938:	2b80      	cmp	r3, #128	@ 0x80
 800893a:	d008      	beq.n	800894e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	88db      	ldrh	r3, [r3, #6]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d104      	bne.n	800894e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f003 fde9 	bl	800c520 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fccc 	bl	80092ec <USBD_CtlSendStatus>

              break;
 8008954:	e004      	b.n	8008960 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fbff 	bl	800915c <USBD_CtlError>
              break;
 800895e:	bf00      	nop
          }
          break;
 8008960:	e0e0      	b.n	8008b24 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008968:	2b02      	cmp	r3, #2
 800896a:	d002      	beq.n	8008972 <USBD_StdEPReq+0xfe>
 800896c:	2b03      	cmp	r3, #3
 800896e:	d015      	beq.n	800899c <USBD_StdEPReq+0x128>
 8008970:	e026      	b.n	80089c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00c      	beq.n	8008992 <USBD_StdEPReq+0x11e>
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	2b80      	cmp	r3, #128	@ 0x80
 800897c:	d009      	beq.n	8008992 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f003 fdcc 	bl	800c520 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008988:	2180      	movs	r1, #128	@ 0x80
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f003 fdc8 	bl	800c520 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008990:	e01c      	b.n	80089cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fbe1 	bl	800915c <USBD_CtlError>
              break;
 800899a:	e017      	b.n	80089cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	885b      	ldrh	r3, [r3, #2]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d112      	bne.n	80089ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f003 fdd3 	bl	800c55e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fc97 	bl	80092ec <USBD_CtlSendStatus>
              }
              break;
 80089be:	e004      	b.n	80089ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fbca 	bl	800915c <USBD_CtlError>
              break;
 80089c8:	e000      	b.n	80089cc <USBD_StdEPReq+0x158>
              break;
 80089ca:	bf00      	nop
          }
          break;
 80089cc:	e0aa      	b.n	8008b24 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d002      	beq.n	80089de <USBD_StdEPReq+0x16a>
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d032      	beq.n	8008a42 <USBD_StdEPReq+0x1ce>
 80089dc:	e097      	b.n	8008b0e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d007      	beq.n	80089f4 <USBD_StdEPReq+0x180>
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
 80089e6:	2b80      	cmp	r3, #128	@ 0x80
 80089e8:	d004      	beq.n	80089f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fbb5 	bl	800915c <USBD_CtlError>
                break;
 80089f2:	e091      	b.n	8008b18 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	da0b      	bge.n	8008a14 <USBD_StdEPReq+0x1a0>
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a02:	4613      	mov	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	3310      	adds	r3, #16
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	4413      	add	r3, r2
 8008a10:	3304      	adds	r3, #4
 8008a12:	e00b      	b.n	8008a2c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	4413      	add	r3, r2
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2202      	movs	r2, #2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fbf8 	bl	8009230 <USBD_CtlSendData>
              break;
 8008a40:	e06a      	b.n	8008b18 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	da11      	bge.n	8008a6e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	f003 020f 	and.w	r2, r3, #15
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	3318      	adds	r3, #24
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d117      	bne.n	8008a94 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fb78 	bl	800915c <USBD_CtlError>
                  break;
 8008a6c:	e054      	b.n	8008b18 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	f003 020f 	and.w	r2, r3, #15
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	440b      	add	r3, r1
 8008a80:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d104      	bne.n	8008a94 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fb65 	bl	800915c <USBD_CtlError>
                  break;
 8008a92:	e041      	b.n	8008b18 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	da0b      	bge.n	8008ab4 <USBD_StdEPReq+0x240>
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	3310      	adds	r3, #16
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	4413      	add	r3, r2
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	e00b      	b.n	8008acc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
 8008ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aba:	4613      	mov	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	4413      	add	r3, r2
 8008aca:	3304      	adds	r3, #4
 8008acc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ace:	7bbb      	ldrb	r3, [r7, #14]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <USBD_StdEPReq+0x266>
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b80      	cmp	r3, #128	@ 0x80
 8008ad8:	d103      	bne.n	8008ae2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2200      	movs	r2, #0
 8008ade:	601a      	str	r2, [r3, #0]
 8008ae0:	e00e      	b.n	8008b00 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f003 fd58 	bl	800c59c <USBD_LL_IsStallEP>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2201      	movs	r2, #1
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	e002      	b.n	8008b00 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2202      	movs	r2, #2
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fb92 	bl	8009230 <USBD_CtlSendData>
              break;
 8008b0c:	e004      	b.n	8008b18 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fb23 	bl	800915c <USBD_CtlError>
              break;
 8008b16:	bf00      	nop
          }
          break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fb1d 	bl	800915c <USBD_CtlError>
          break;
 8008b22:	bf00      	nop
      }
      break;
 8008b24:	e004      	b.n	8008b30 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fb17 	bl	800915c <USBD_CtlError>
      break;
 8008b2e:	bf00      	nop
  }

  return ret;
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	885b      	ldrh	r3, [r3, #2]
 8008b56:	0a1b      	lsrs	r3, r3, #8
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	2b06      	cmp	r3, #6
 8008b5e:	f200 8128 	bhi.w	8008db2 <USBD_GetDescriptor+0x276>
 8008b62:	a201      	add	r2, pc, #4	@ (adr r2, 8008b68 <USBD_GetDescriptor+0x2c>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b85 	.word	0x08008b85
 8008b6c:	08008b9d 	.word	0x08008b9d
 8008b70:	08008bdd 	.word	0x08008bdd
 8008b74:	08008db3 	.word	0x08008db3
 8008b78:	08008db3 	.word	0x08008db3
 8008b7c:	08008d53 	.word	0x08008d53
 8008b80:	08008d7f 	.word	0x08008d7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	7c12      	ldrb	r2, [r2, #16]
 8008b90:	f107 0108 	add.w	r1, r7, #8
 8008b94:	4610      	mov	r0, r2
 8008b96:	4798      	blx	r3
 8008b98:	60f8      	str	r0, [r7, #12]
      break;
 8008b9a:	e112      	b.n	8008dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7c1b      	ldrb	r3, [r3, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10d      	bne.n	8008bc0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	f107 0208 	add.w	r2, r7, #8
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4798      	blx	r3
 8008bb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	2202      	movs	r2, #2
 8008bbc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bbe:	e100      	b.n	8008dc2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc8:	f107 0208 	add.w	r2, r7, #8
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4798      	blx	r3
 8008bd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	701a      	strb	r2, [r3, #0]
      break;
 8008bda:	e0f2      	b.n	8008dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	885b      	ldrh	r3, [r3, #2]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b05      	cmp	r3, #5
 8008be4:	f200 80ac 	bhi.w	8008d40 <USBD_GetDescriptor+0x204>
 8008be8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <USBD_GetDescriptor+0xb4>)
 8008bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bee:	bf00      	nop
 8008bf0:	08008c09 	.word	0x08008c09
 8008bf4:	08008c3d 	.word	0x08008c3d
 8008bf8:	08008c71 	.word	0x08008c71
 8008bfc:	08008ca5 	.word	0x08008ca5
 8008c00:	08008cd9 	.word	0x08008cd9
 8008c04:	08008d0d 	.word	0x08008d0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	7c12      	ldrb	r2, [r2, #16]
 8008c20:	f107 0108 	add.w	r1, r7, #8
 8008c24:	4610      	mov	r0, r2
 8008c26:	4798      	blx	r3
 8008c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c2a:	e091      	b.n	8008d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa94 	bl	800915c <USBD_CtlError>
            err++;
 8008c34:	7afb      	ldrb	r3, [r7, #11]
 8008c36:	3301      	adds	r3, #1
 8008c38:	72fb      	strb	r3, [r7, #11]
          break;
 8008c3a:	e089      	b.n	8008d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	7c12      	ldrb	r2, [r2, #16]
 8008c54:	f107 0108 	add.w	r1, r7, #8
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c5e:	e077      	b.n	8008d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fa7a 	bl	800915c <USBD_CtlError>
            err++;
 8008c68:	7afb      	ldrb	r3, [r7, #11]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c6e:	e06f      	b.n	8008d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c92:	e05d      	b.n	8008d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa60 	bl	800915c <USBD_CtlError>
            err++;
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ca2:	e055      	b.n	8008d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	7c12      	ldrb	r2, [r2, #16]
 8008cbc:	f107 0108 	add.w	r1, r7, #8
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
 8008cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc6:	e043      	b.n	8008d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fa46 	bl	800915c <USBD_CtlError>
            err++;
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd6:	e03b      	b.n	8008d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00b      	beq.n	8008cfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	7c12      	ldrb	r2, [r2, #16]
 8008cf0:	f107 0108 	add.w	r1, r7, #8
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4798      	blx	r3
 8008cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cfa:	e029      	b.n	8008d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 fa2c 	bl	800915c <USBD_CtlError>
            err++;
 8008d04:	7afb      	ldrb	r3, [r7, #11]
 8008d06:	3301      	adds	r3, #1
 8008d08:	72fb      	strb	r3, [r7, #11]
          break;
 8008d0a:	e021      	b.n	8008d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	7c12      	ldrb	r2, [r2, #16]
 8008d24:	f107 0108 	add.w	r1, r7, #8
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4798      	blx	r3
 8008d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d2e:	e00f      	b.n	8008d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d30:	6839      	ldr	r1, [r7, #0]
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fa12 	bl	800915c <USBD_CtlError>
            err++;
 8008d38:	7afb      	ldrb	r3, [r7, #11]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d3e:	e007      	b.n	8008d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa0a 	bl	800915c <USBD_CtlError>
          err++;
 8008d48:	7afb      	ldrb	r3, [r7, #11]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d4e:	e038      	b.n	8008dc2 <USBD_GetDescriptor+0x286>
 8008d50:	e037      	b.n	8008dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	7c1b      	ldrb	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d62:	f107 0208 	add.w	r2, r7, #8
 8008d66:	4610      	mov	r0, r2
 8008d68:	4798      	blx	r3
 8008d6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d6c:	e029      	b.n	8008dc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f9f3 	bl	800915c <USBD_CtlError>
        err++;
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d7c:	e021      	b.n	8008dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	7c1b      	ldrb	r3, [r3, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10d      	bne.n	8008da2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8e:	f107 0208 	add.w	r2, r7, #8
 8008d92:	4610      	mov	r0, r2
 8008d94:	4798      	blx	r3
 8008d96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	2207      	movs	r2, #7
 8008d9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008da0:	e00f      	b.n	8008dc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f9d9 	bl	800915c <USBD_CtlError>
        err++;
 8008daa:	7afb      	ldrb	r3, [r7, #11]
 8008dac:	3301      	adds	r3, #1
 8008dae:	72fb      	strb	r3, [r7, #11]
      break;
 8008db0:	e007      	b.n	8008dc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f9d1 	bl	800915c <USBD_CtlError>
      err++;
 8008dba:	7afb      	ldrb	r3, [r7, #11]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8008dc0:	bf00      	nop
  }

  if (err != 0U)
 8008dc2:	7afb      	ldrb	r3, [r7, #11]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d11c      	bne.n	8008e02 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008dc8:	893b      	ldrh	r3, [r7, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d011      	beq.n	8008df2 <USBD_GetDescriptor+0x2b6>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	88db      	ldrh	r3, [r3, #6]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00d      	beq.n	8008df2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	88da      	ldrh	r2, [r3, #6]
 8008dda:	893b      	ldrh	r3, [r7, #8]
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	bf28      	it	cs
 8008de0:	4613      	movcs	r3, r2
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008de6:	893b      	ldrh	r3, [r7, #8]
 8008de8:	461a      	mov	r2, r3
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fa1f 	bl	8009230 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	88db      	ldrh	r3, [r3, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d104      	bne.n	8008e04 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa76 	bl	80092ec <USBD_CtlSendStatus>
 8008e00:	e000      	b.n	8008e04 <USBD_GetDescriptor+0x2c8>
    return;
 8008e02:	bf00      	nop
    }
  }
}
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop

08008e0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	889b      	ldrh	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d130      	bne.n	8008e80 <USBD_SetAddress+0x74>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	88db      	ldrh	r3, [r3, #6]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d12c      	bne.n	8008e80 <USBD_SetAddress+0x74>
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008e2c:	d828      	bhi.n	8008e80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	d104      	bne.n	8008e4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f988 	bl	800915c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e4c:	e01d      	b.n	8008e8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	7bfa      	ldrb	r2, [r7, #15]
 8008e52:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f003 fbc9 	bl	800c5f2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa43 	bl	80092ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d004      	beq.n	8008e76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e74:	e009      	b.n	8008e8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	e004      	b.n	8008e8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f96a 	bl	800915c <USBD_CtlError>
  }
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	885b      	ldrh	r3, [r3, #2]
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	4b41      	ldr	r3, [pc, #260]	@ (8008fac <USBD_SetConfig+0x118>)
 8008ea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ea8:	4b40      	ldr	r3, [pc, #256]	@ (8008fac <USBD_SetConfig+0x118>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d904      	bls.n	8008eba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f952 	bl	800915c <USBD_CtlError>
 8008eb8:	e075      	b.n	8008fa6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d002      	beq.n	8008eca <USBD_SetConfig+0x36>
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d023      	beq.n	8008f10 <USBD_SetConfig+0x7c>
 8008ec8:	e062      	b.n	8008f90 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008eca:	4b38      	ldr	r3, [pc, #224]	@ (8008fac <USBD_SetConfig+0x118>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d01a      	beq.n	8008f08 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008ed2:	4b36      	ldr	r3, [pc, #216]	@ (8008fac <USBD_SetConfig+0x118>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2203      	movs	r2, #3
 8008ee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ee4:	4b31      	ldr	r3, [pc, #196]	@ (8008fac <USBD_SetConfig+0x118>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff f9e7 	bl	80082be <USBD_SetClassConfig>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d104      	bne.n	8008f00 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f92f 	bl	800915c <USBD_CtlError>
            return;
 8008efe:	e052      	b.n	8008fa6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f9f3 	bl	80092ec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f06:	e04e      	b.n	8008fa6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f9ef 	bl	80092ec <USBD_CtlSendStatus>
        break;
 8008f0e:	e04a      	b.n	8008fa6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008f10:	4b26      	ldr	r3, [pc, #152]	@ (8008fac <USBD_SetConfig+0x118>)
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d112      	bne.n	8008f3e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008f20:	4b22      	ldr	r3, [pc, #136]	@ (8008fac <USBD_SetConfig+0x118>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008f2a:	4b20      	ldr	r3, [pc, #128]	@ (8008fac <USBD_SetConfig+0x118>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff f9e3 	bl	80082fc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9d8 	bl	80092ec <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f3c:	e033      	b.n	8008fa6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fac <USBD_SetConfig+0x118>)
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d01d      	beq.n	8008f88 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff f9d1 	bl	80082fc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f5a:	4b14      	ldr	r3, [pc, #80]	@ (8008fac <USBD_SetConfig+0x118>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f64:	4b11      	ldr	r3, [pc, #68]	@ (8008fac <USBD_SetConfig+0x118>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff f9a7 	bl	80082be <USBD_SetClassConfig>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d104      	bne.n	8008f80 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f8ef 	bl	800915c <USBD_CtlError>
            return;
 8008f7e:	e012      	b.n	8008fa6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9b3 	bl	80092ec <USBD_CtlSendStatus>
        break;
 8008f86:	e00e      	b.n	8008fa6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f9af 	bl	80092ec <USBD_CtlSendStatus>
        break;
 8008f8e:	e00a      	b.n	8008fa6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f8e2 	bl	800915c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f98:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <USBD_SetConfig+0x118>)
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f9ac 	bl	80082fc <USBD_ClrClassConfig>
        break;
 8008fa4:	bf00      	nop
    }
  }
}
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000320 	.word	0x20000320

08008fb0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88db      	ldrh	r3, [r3, #6]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d004      	beq.n	8008fcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f8c9 	bl	800915c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008fca:	e022      	b.n	8009012 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	dc02      	bgt.n	8008fdc <USBD_GetConfig+0x2c>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dc03      	bgt.n	8008fe2 <USBD_GetConfig+0x32>
 8008fda:	e015      	b.n	8009008 <USBD_GetConfig+0x58>
 8008fdc:	2b03      	cmp	r3, #3
 8008fde:	d00b      	beq.n	8008ff8 <USBD_GetConfig+0x48>
 8008fe0:	e012      	b.n	8009008 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3308      	adds	r3, #8
 8008fec:	2201      	movs	r2, #1
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f91d 	bl	8009230 <USBD_CtlSendData>
        break;
 8008ff6:	e00c      	b.n	8009012 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f915 	bl	8009230 <USBD_CtlSendData>
        break;
 8009006:	e004      	b.n	8009012 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f8a6 	bl	800915c <USBD_CtlError>
        break;
 8009010:	bf00      	nop
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800902a:	3b01      	subs	r3, #1
 800902c:	2b02      	cmp	r3, #2
 800902e:	d81e      	bhi.n	800906e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	88db      	ldrh	r3, [r3, #6]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d004      	beq.n	8009042 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f88e 	bl	800915c <USBD_CtlError>
        break;
 8009040:	e01a      	b.n	8009078 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	f043 0202 	orr.w	r2, r3, #2
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	330c      	adds	r3, #12
 8009062:	2202      	movs	r2, #2
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f8e2 	bl	8009230 <USBD_CtlSendData>
      break;
 800906c:	e004      	b.n	8009078 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800906e:	6839      	ldr	r1, [r7, #0]
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f873 	bl	800915c <USBD_CtlError>
      break;
 8009076:	bf00      	nop
  }
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	885b      	ldrh	r3, [r3, #2]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d106      	bne.n	80090a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f926 	bl	80092ec <USBD_CtlSendStatus>
  }
}
 80090a0:	bf00      	nop
 80090a2:	3708      	adds	r7, #8
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b8:	3b01      	subs	r3, #1
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d80b      	bhi.n	80090d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d10c      	bne.n	80090e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f90c 	bl	80092ec <USBD_CtlSendStatus>
      }
      break;
 80090d4:	e004      	b.n	80090e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f83f 	bl	800915c <USBD_CtlError>
      break;
 80090de:	e000      	b.n	80090e2 <USBD_ClrFeature+0x3a>
      break;
 80090e0:	bf00      	nop
  }
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785a      	ldrb	r2, [r3, #1]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	3302      	adds	r3, #2
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	3303      	adds	r3, #3
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	b29b      	uxth	r3, r3
 8009116:	4413      	add	r3, r2
 8009118:	b29a      	uxth	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	3304      	adds	r3, #4
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	461a      	mov	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	3305      	adds	r3, #5
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	021b      	lsls	r3, r3, #8
 800912e:	b29b      	uxth	r3, r3
 8009130:	4413      	add	r3, r2
 8009132:	b29a      	uxth	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	3306      	adds	r3, #6
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	3307      	adds	r3, #7
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	021b      	lsls	r3, r3, #8
 8009148:	b29b      	uxth	r3, r3
 800914a:	4413      	add	r3, r2
 800914c:	b29a      	uxth	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	80da      	strh	r2, [r3, #6]

}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	bc80      	pop	{r7}
 800915a:	4770      	bx	lr

0800915c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009166:	2180      	movs	r1, #128	@ 0x80
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f003 f9d9 	bl	800c520 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800916e:	2100      	movs	r1, #0
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f003 f9d5 	bl	800c520 <USBD_LL_StallEP>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800918a:	2300      	movs	r3, #0
 800918c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d032      	beq.n	80091fa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f000 f834 	bl	8009202 <USBD_GetLen>
 800919a:	4603      	mov	r3, r0
 800919c:	3301      	adds	r3, #1
 800919e:	b29b      	uxth	r3, r3
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	75fa      	strb	r2, [r7, #23]
 80091ae:	461a      	mov	r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	4413      	add	r3, r2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	7812      	ldrb	r2, [r2, #0]
 80091b8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	75fa      	strb	r2, [r7, #23]
 80091c0:	461a      	mov	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4413      	add	r3, r2
 80091c6:	2203      	movs	r2, #3
 80091c8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80091ca:	e012      	b.n	80091f2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	1c5a      	adds	r2, r3, #1
 80091d0:	60fa      	str	r2, [r7, #12]
 80091d2:	7dfa      	ldrb	r2, [r7, #23]
 80091d4:	1c51      	adds	r1, r2, #1
 80091d6:	75f9      	strb	r1, [r7, #23]
 80091d8:	4611      	mov	r1, r2
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	440a      	add	r2, r1
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	75fa      	strb	r2, [r7, #23]
 80091e8:	461a      	mov	r2, r3
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	4413      	add	r3, r2
 80091ee:	2200      	movs	r2, #0
 80091f0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e8      	bne.n	80091cc <USBD_GetString+0x4e>
    }
  }
}
 80091fa:	bf00      	nop
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009202:	b480      	push	{r7}
 8009204:	b085      	sub	sp, #20
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800920e:	e005      	b.n	800921c <USBD_GetLen+0x1a>
  {
    len++;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	3301      	adds	r3, #1
 8009214:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3301      	adds	r3, #1
 800921a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1f5      	bne.n	8009210 <USBD_GetLen+0xe>
  }

  return len;
 8009224:	7bfb      	ldrb	r3, [r7, #15]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr

08009230 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	4613      	mov	r3, r2
 800923c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2202      	movs	r2, #2
 8009242:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009246:	88fa      	ldrh	r2, [r7, #6]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800924c:	88fa      	ldrh	r2, [r7, #6]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009252:	88fb      	ldrh	r3, [r7, #6]
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	2100      	movs	r1, #0
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f003 f9e9 	bl	800c630 <USBD_LL_Transmit>

  return USBD_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009276:	88fb      	ldrh	r3, [r7, #6]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	2100      	movs	r1, #0
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f003 f9d7 	bl	800c630 <USBD_LL_Transmit>

  return USBD_OK;
 8009282:	2300      	movs	r3, #0
}
 8009284:	4618      	mov	r0, r3
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2203      	movs	r2, #3
 800929e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80092a2:	88fa      	ldrh	r2, [r7, #6]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80092aa:	88fa      	ldrh	r2, [r7, #6]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092b2:	88fb      	ldrh	r3, [r7, #6]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	2100      	movs	r1, #0
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f003 f9dc 	bl	800c676 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092d6:	88fb      	ldrh	r3, [r7, #6]
 80092d8:	68ba      	ldr	r2, [r7, #8]
 80092da:	2100      	movs	r1, #0
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f003 f9ca 	bl	800c676 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2204      	movs	r2, #4
 80092f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092fc:	2300      	movs	r3, #0
 80092fe:	2200      	movs	r2, #0
 8009300:	2100      	movs	r1, #0
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f003 f994 	bl	800c630 <USBD_LL_Transmit>

  return USBD_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2205      	movs	r2, #5
 800931e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009322:	2300      	movs	r3, #0
 8009324:	2200      	movs	r2, #0
 8009326:	2100      	movs	r1, #0
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f003 f9a4 	bl	800c676 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <__NVIC_SetPriority>:
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	6039      	str	r1, [r7, #0]
 8009342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009348:	2b00      	cmp	r3, #0
 800934a:	db0a      	blt.n	8009362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	b2da      	uxtb	r2, r3
 8009350:	490c      	ldr	r1, [pc, #48]	@ (8009384 <__NVIC_SetPriority+0x4c>)
 8009352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009356:	0112      	lsls	r2, r2, #4
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	440b      	add	r3, r1
 800935c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009360:	e00a      	b.n	8009378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	b2da      	uxtb	r2, r3
 8009366:	4908      	ldr	r1, [pc, #32]	@ (8009388 <__NVIC_SetPriority+0x50>)
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	3b04      	subs	r3, #4
 8009370:	0112      	lsls	r2, r2, #4
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	440b      	add	r3, r1
 8009376:	761a      	strb	r2, [r3, #24]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	e000e100 	.word	0xe000e100
 8009388:	e000ed00 	.word	0xe000ed00

0800938c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009390:	4b05      	ldr	r3, [pc, #20]	@ (80093a8 <SysTick_Handler+0x1c>)
 8009392:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009394:	f001 fd38 	bl	800ae08 <xTaskGetSchedulerState>
 8009398:	4603      	mov	r3, r0
 800939a:	2b01      	cmp	r3, #1
 800939c:	d001      	beq.n	80093a2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800939e:	f002 fadb 	bl	800b958 <xPortSysTickHandler>
  }
}
 80093a2:	bf00      	nop
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	e000e010 	.word	0xe000e010

080093ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80093b0:	2100      	movs	r1, #0
 80093b2:	f06f 0004 	mvn.w	r0, #4
 80093b6:	f7ff ffbf 	bl	8009338 <__NVIC_SetPriority>
#endif
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093c6:	f3ef 8305 	mrs	r3, IPSR
 80093ca:	603b      	str	r3, [r7, #0]
  return(result);
 80093cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d003      	beq.n	80093da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80093d2:	f06f 0305 	mvn.w	r3, #5
 80093d6:	607b      	str	r3, [r7, #4]
 80093d8:	e00c      	b.n	80093f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80093da:	4b09      	ldr	r3, [pc, #36]	@ (8009400 <osKernelInitialize+0x40>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80093e2:	4b07      	ldr	r3, [pc, #28]	@ (8009400 <osKernelInitialize+0x40>)
 80093e4:	2201      	movs	r2, #1
 80093e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	607b      	str	r3, [r7, #4]
 80093ec:	e002      	b.n	80093f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093f4:	687b      	ldr	r3, [r7, #4]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr
 8009400:	20000324 	.word	0x20000324

08009404 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800940a:	f3ef 8305 	mrs	r3, IPSR
 800940e:	603b      	str	r3, [r7, #0]
  return(result);
 8009410:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009416:	f06f 0305 	mvn.w	r3, #5
 800941a:	607b      	str	r3, [r7, #4]
 800941c:	e010      	b.n	8009440 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800941e:	4b0b      	ldr	r3, [pc, #44]	@ (800944c <osKernelStart+0x48>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d109      	bne.n	800943a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009426:	f7ff ffc1 	bl	80093ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800942a:	4b08      	ldr	r3, [pc, #32]	@ (800944c <osKernelStart+0x48>)
 800942c:	2202      	movs	r2, #2
 800942e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009430:	f001 f88a 	bl	800a548 <vTaskStartScheduler>
      stat = osOK;
 8009434:	2300      	movs	r3, #0
 8009436:	607b      	str	r3, [r7, #4]
 8009438:	e002      	b.n	8009440 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800943a:	f04f 33ff 	mov.w	r3, #4294967295
 800943e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009440:	687b      	ldr	r3, [r7, #4]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20000324 	.word	0x20000324

08009450 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009450:	b580      	push	{r7, lr}
 8009452:	b08e      	sub	sp, #56	@ 0x38
 8009454:	af04      	add	r7, sp, #16
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009460:	f3ef 8305 	mrs	r3, IPSR
 8009464:	617b      	str	r3, [r7, #20]
  return(result);
 8009466:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009468:	2b00      	cmp	r3, #0
 800946a:	d17e      	bne.n	800956a <osThreadNew+0x11a>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d07b      	beq.n	800956a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009472:	2380      	movs	r3, #128	@ 0x80
 8009474:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009476:	2318      	movs	r3, #24
 8009478:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800947a:	2300      	movs	r3, #0
 800947c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800947e:	f04f 33ff 	mov.w	r3, #4294967295
 8009482:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d045      	beq.n	8009516 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <osThreadNew+0x48>
        name = attr->name;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d008      	beq.n	80094be <osThreadNew+0x6e>
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	2b38      	cmp	r3, #56	@ 0x38
 80094b0:	d805      	bhi.n	80094be <osThreadNew+0x6e>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <osThreadNew+0x72>
        return (NULL);
 80094be:	2300      	movs	r3, #0
 80094c0:	e054      	b.n	800956c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	089b      	lsrs	r3, r3, #2
 80094d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00e      	beq.n	80094f8 <osThreadNew+0xa8>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	2ba7      	cmp	r3, #167	@ 0xa7
 80094e0:	d90a      	bls.n	80094f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d006      	beq.n	80094f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <osThreadNew+0xa8>
        mem = 1;
 80094f2:	2301      	movs	r3, #1
 80094f4:	61bb      	str	r3, [r7, #24]
 80094f6:	e010      	b.n	800951a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10c      	bne.n	800951a <osThreadNew+0xca>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d108      	bne.n	800951a <osThreadNew+0xca>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <osThreadNew+0xca>
          mem = 0;
 8009510:	2300      	movs	r3, #0
 8009512:	61bb      	str	r3, [r7, #24]
 8009514:	e001      	b.n	800951a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d110      	bne.n	8009542 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009528:	9202      	str	r2, [sp, #8]
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	6a3a      	ldr	r2, [r7, #32]
 8009534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fe12 	bl	800a160 <xTaskCreateStatic>
 800953c:	4603      	mov	r3, r0
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	e013      	b.n	800956a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d110      	bne.n	800956a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	b29a      	uxth	r2, r3
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fe60 	bl	800a220 <xTaskCreate>
 8009560:	4603      	mov	r3, r0
 8009562:	2b01      	cmp	r3, #1
 8009564:	d001      	beq.n	800956a <osThreadNew+0x11a>
            hTask = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800956a:	693b      	ldr	r3, [r7, #16]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3728      	adds	r7, #40	@ 0x28
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800957c:	f3ef 8305 	mrs	r3, IPSR
 8009580:	60bb      	str	r3, [r7, #8]
  return(result);
 8009582:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <osDelay+0x1c>
    stat = osErrorISR;
 8009588:	f06f 0305 	mvn.w	r3, #5
 800958c:	60fb      	str	r3, [r7, #12]
 800958e:	e007      	b.n	80095a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009590:	2300      	movs	r3, #0
 8009592:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 ff9e 	bl	800a4dc <vTaskDelay>
    }
  }

  return (stat);
 80095a0:	68fb      	ldr	r3, [r7, #12]
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
	...

080095ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4a06      	ldr	r2, [pc, #24]	@ (80095d4 <vApplicationGetIdleTaskMemory+0x28>)
 80095bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	4a05      	ldr	r2, [pc, #20]	@ (80095d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80095c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2280      	movs	r2, #128	@ 0x80
 80095c8:	601a      	str	r2, [r3, #0]
}
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bc80      	pop	{r7}
 80095d2:	4770      	bx	lr
 80095d4:	20000328 	.word	0x20000328
 80095d8:	200003d0 	.word	0x200003d0

080095dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4a07      	ldr	r2, [pc, #28]	@ (8009608 <vApplicationGetTimerTaskMemory+0x2c>)
 80095ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	4a06      	ldr	r2, [pc, #24]	@ (800960c <vApplicationGetTimerTaskMemory+0x30>)
 80095f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095fa:	601a      	str	r2, [r3, #0]
}
 80095fc:	bf00      	nop
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	bc80      	pop	{r7}
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	200005d0 	.word	0x200005d0
 800960c:	20000678 	.word	0x20000678

08009610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f103 0208 	add.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f103 0208 	add.w	r2, r3, #8
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f103 0208 	add.w	r2, r3, #8
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	bc80      	pop	{r7}
 800964c:	4770      	bx	lr

0800964e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	bc80      	pop	{r7}
 8009664:	4770      	bx	lr

08009666 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009666:	b480      	push	{r7}
 8009668:	b085      	sub	sp, #20
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	601a      	str	r2, [r3, #0]
}
 80096a2:	bf00      	nop
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bc80      	pop	{r7}
 80096aa:	4770      	bx	lr

080096ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c2:	d103      	bne.n	80096cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	60fb      	str	r3, [r7, #12]
 80096ca:	e00c      	b.n	80096e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3308      	adds	r3, #8
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	e002      	b.n	80096da <vListInsert+0x2e>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d2f6      	bcs.n	80096d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	685a      	ldr	r2, [r3, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
}
 8009712:	bf00      	nop
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	bc80      	pop	{r7}
 800971a:	4770      	bx	lr

0800971c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6892      	ldr	r2, [r2, #8]
 8009732:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6852      	ldr	r2, [r2, #4]
 800973c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	429a      	cmp	r2, r3
 8009746:	d103      	bne.n	8009750 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	1e5a      	subs	r2, r3, #1
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	bc80      	pop	{r7}
 800976c:	4770      	bx	lr
	...

08009770 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10b      	bne.n	800979c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009796:	bf00      	nop
 8009798:	bf00      	nop
 800979a:	e7fd      	b.n	8009798 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800979c:	f002 f85e 	bl	800b85c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097a8:	68f9      	ldr	r1, [r7, #12]
 80097aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	441a      	add	r2, r3
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097cc:	3b01      	subs	r3, #1
 80097ce:	68f9      	ldr	r1, [r7, #12]
 80097d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80097d2:	fb01 f303 	mul.w	r3, r1, r3
 80097d6:	441a      	add	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	22ff      	movs	r2, #255	@ 0xff
 80097e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	22ff      	movs	r2, #255	@ 0xff
 80097e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d114      	bne.n	800981c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01a      	beq.n	8009830 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3310      	adds	r3, #16
 80097fe:	4618      	mov	r0, r3
 8009800:	f001 f93c 	bl	800aa7c <xTaskRemoveFromEventList>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d012      	beq.n	8009830 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800980a:	4b0d      	ldr	r3, [pc, #52]	@ (8009840 <xQueueGenericReset+0xd0>)
 800980c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	e009      	b.n	8009830 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3310      	adds	r3, #16
 8009820:	4618      	mov	r0, r3
 8009822:	f7ff fef5 	bl	8009610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3324      	adds	r3, #36	@ 0x24
 800982a:	4618      	mov	r0, r3
 800982c:	f7ff fef0 	bl	8009610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009830:	f002 f844 	bl	800b8bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009834:	2301      	movs	r3, #1
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	e000ed04 	.word	0xe000ed04

08009844 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009844:	b580      	push	{r7, lr}
 8009846:	b08e      	sub	sp, #56	@ 0x38
 8009848:	af02      	add	r7, sp, #8
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10b      	bne.n	8009870 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800986a:	bf00      	nop
 800986c:	bf00      	nop
 800986e:	e7fd      	b.n	800986c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10b      	bne.n	800988e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	e7fd      	b.n	800988a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <xQueueGenericCreateStatic+0x56>
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d001      	beq.n	800989e <xQueueGenericCreateStatic+0x5a>
 800989a:	2301      	movs	r3, #1
 800989c:	e000      	b.n	80098a0 <xQueueGenericCreateStatic+0x5c>
 800989e:	2300      	movs	r3, #0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10b      	bne.n	80098bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	623b      	str	r3, [r7, #32]
}
 80098b6:	bf00      	nop
 80098b8:	bf00      	nop
 80098ba:	e7fd      	b.n	80098b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <xQueueGenericCreateStatic+0x84>
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <xQueueGenericCreateStatic+0x88>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e000      	b.n	80098ce <xQueueGenericCreateStatic+0x8a>
 80098cc:	2300      	movs	r3, #0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10b      	bne.n	80098ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	61fb      	str	r3, [r7, #28]
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	e7fd      	b.n	80098e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80098ea:	2350      	movs	r3, #80	@ 0x50
 80098ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	2b50      	cmp	r3, #80	@ 0x50
 80098f2:	d00b      	beq.n	800990c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	61bb      	str	r3, [r7, #24]
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	e7fd      	b.n	8009908 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800990c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00d      	beq.n	8009934 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009920:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009926:	9300      	str	r3, [sp, #0]
 8009928:	4613      	mov	r3, r2
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	68b9      	ldr	r1, [r7, #8]
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f000 f805 	bl	800993e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009936:	4618      	mov	r0, r3
 8009938:	3730      	adds	r7, #48	@ 0x30
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	60f8      	str	r0, [r7, #12]
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d103      	bne.n	800995a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	69ba      	ldr	r2, [r7, #24]
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	e002      	b.n	8009960 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800996c:	2101      	movs	r1, #1
 800996e:	69b8      	ldr	r0, [r7, #24]
 8009970:	f7ff fefe 	bl	8009770 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	78fa      	ldrb	r2, [r7, #3]
 8009978:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b08e      	sub	sp, #56	@ 0x38
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009992:	2300      	movs	r3, #0
 8009994:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10b      	bne.n	80099b8 <xQueueGenericSend+0x34>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80099b2:	bf00      	nop
 80099b4:	bf00      	nop
 80099b6:	e7fd      	b.n	80099b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d103      	bne.n	80099c6 <xQueueGenericSend+0x42>
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <xQueueGenericSend+0x46>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e000      	b.n	80099cc <xQueueGenericSend+0x48>
 80099ca:	2300      	movs	r3, #0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10b      	bne.n	80099e8 <xQueueGenericSend+0x64>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80099e2:	bf00      	nop
 80099e4:	bf00      	nop
 80099e6:	e7fd      	b.n	80099e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	2b02      	cmp	r3, #2
 80099ec:	d103      	bne.n	80099f6 <xQueueGenericSend+0x72>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d101      	bne.n	80099fa <xQueueGenericSend+0x76>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e000      	b.n	80099fc <xQueueGenericSend+0x78>
 80099fa:	2300      	movs	r3, #0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10b      	bne.n	8009a18 <xQueueGenericSend+0x94>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	623b      	str	r3, [r7, #32]
}
 8009a12:	bf00      	nop
 8009a14:	bf00      	nop
 8009a16:	e7fd      	b.n	8009a14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a18:	f001 f9f6 	bl	800ae08 <xTaskGetSchedulerState>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d102      	bne.n	8009a28 <xQueueGenericSend+0xa4>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <xQueueGenericSend+0xa8>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e000      	b.n	8009a2e <xQueueGenericSend+0xaa>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <xQueueGenericSend+0xc6>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	61fb      	str	r3, [r7, #28]
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	e7fd      	b.n	8009a46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a4a:	f001 ff07 	bl	800b85c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d302      	bcc.n	8009a60 <xQueueGenericSend+0xdc>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d129      	bne.n	8009ab4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	68b9      	ldr	r1, [r7, #8]
 8009a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a66:	f000 fa0f 	bl	8009e88 <prvCopyDataToQueue>
 8009a6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d010      	beq.n	8009a96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a76:	3324      	adds	r3, #36	@ 0x24
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 ffff 	bl	800aa7c <xTaskRemoveFromEventList>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d013      	beq.n	8009aac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a84:	4b3f      	ldr	r3, [pc, #252]	@ (8009b84 <xQueueGenericSend+0x200>)
 8009a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	e00a      	b.n	8009aac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d007      	beq.n	8009aac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009a9c:	4b39      	ldr	r3, [pc, #228]	@ (8009b84 <xQueueGenericSend+0x200>)
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	f3bf 8f4f 	dsb	sy
 8009aa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009aac:	f001 ff06 	bl	800b8bc <vPortExitCritical>
				return pdPASS;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e063      	b.n	8009b7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d103      	bne.n	8009ac2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aba:	f001 feff 	bl	800b8bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e05c      	b.n	8009b7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d106      	bne.n	8009ad6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ac8:	f107 0314 	add.w	r3, r7, #20
 8009acc:	4618      	mov	r0, r3
 8009ace:	f001 f839 	bl	800ab44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ad6:	f001 fef1 	bl	800b8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ada:	f000 fda5 	bl	800a628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ade:	f001 febd 	bl	800b85c <vPortEnterCritical>
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ae8:	b25b      	sxtb	r3, r3
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d103      	bne.n	8009af8 <xQueueGenericSend+0x174>
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009afe:	b25b      	sxtb	r3, r3
 8009b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b04:	d103      	bne.n	8009b0e <xQueueGenericSend+0x18a>
 8009b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b0e:	f001 fed5 	bl	800b8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b12:	1d3a      	adds	r2, r7, #4
 8009b14:	f107 0314 	add.w	r3, r7, #20
 8009b18:	4611      	mov	r1, r2
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f001 f828 	bl	800ab70 <xTaskCheckForTimeOut>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d124      	bne.n	8009b70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b28:	f000 faa6 	bl	800a078 <prvIsQueueFull>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d018      	beq.n	8009b64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b34:	3310      	adds	r3, #16
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 ff4c 	bl	800a9d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b42:	f000 fa31 	bl	8009fa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b46:	f000 fd7d 	bl	800a644 <xTaskResumeAll>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f47f af7c 	bne.w	8009a4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009b52:	4b0c      	ldr	r3, [pc, #48]	@ (8009b84 <xQueueGenericSend+0x200>)
 8009b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	f3bf 8f6f 	isb	sy
 8009b62:	e772      	b.n	8009a4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b66:	f000 fa1f 	bl	8009fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b6a:	f000 fd6b 	bl	800a644 <xTaskResumeAll>
 8009b6e:	e76c      	b.n	8009a4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009b72:	f000 fa19 	bl	8009fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b76:	f000 fd65 	bl	800a644 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3738      	adds	r7, #56	@ 0x38
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b090      	sub	sp, #64	@ 0x40
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
 8009b94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10b      	bne.n	8009bb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d103      	bne.n	8009bc6 <xQueueGenericSendFromISR+0x3e>
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <xQueueGenericSendFromISR+0x42>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e000      	b.n	8009bcc <xQueueGenericSendFromISR+0x44>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10b      	bne.n	8009be8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009be2:	bf00      	nop
 8009be4:	bf00      	nop
 8009be6:	e7fd      	b.n	8009be4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d103      	bne.n	8009bf6 <xQueueGenericSendFromISR+0x6e>
 8009bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d101      	bne.n	8009bfa <xQueueGenericSendFromISR+0x72>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e000      	b.n	8009bfc <xQueueGenericSendFromISR+0x74>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10b      	bne.n	8009c18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	623b      	str	r3, [r7, #32]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c18:	f001 fee2 	bl	800b9e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c1c:	f3ef 8211 	mrs	r2, BASEPRI
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	61fa      	str	r2, [r7, #28]
 8009c32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d302      	bcc.n	8009c4a <xQueueGenericSendFromISR+0xc2>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d12f      	bne.n	8009caa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c5a:	683a      	ldr	r2, [r7, #0]
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009c60:	f000 f912 	bl	8009e88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6c:	d112      	bne.n	8009c94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d016      	beq.n	8009ca4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c78:	3324      	adds	r3, #36	@ 0x24
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 fefe 	bl	800aa7c <xTaskRemoveFromEventList>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00e      	beq.n	8009ca4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00b      	beq.n	8009ca4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e007      	b.n	8009ca4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009c98:	3301      	adds	r3, #1
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	b25a      	sxtb	r2, r3
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009ca8:	e001      	b.n	8009cae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3740      	adds	r7, #64	@ 0x40
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b08c      	sub	sp, #48	@ 0x30
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10b      	bne.n	8009cf6 <xQueueReceive+0x32>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	623b      	str	r3, [r7, #32]
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	e7fd      	b.n	8009cf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d103      	bne.n	8009d04 <xQueueReceive+0x40>
 8009cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <xQueueReceive+0x44>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e000      	b.n	8009d0a <xQueueReceive+0x46>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10b      	bne.n	8009d26 <xQueueReceive+0x62>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61fb      	str	r3, [r7, #28]
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	e7fd      	b.n	8009d22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d26:	f001 f86f 	bl	800ae08 <xTaskGetSchedulerState>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d102      	bne.n	8009d36 <xQueueReceive+0x72>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <xQueueReceive+0x76>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <xQueueReceive+0x78>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10b      	bne.n	8009d58 <xQueueReceive+0x94>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	61bb      	str	r3, [r7, #24]
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d58:	f001 fd80 	bl	800b85c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01f      	beq.n	8009da8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d6c:	f000 f8f6 	bl	8009f5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d72:	1e5a      	subs	r2, r3, #1
 8009d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d82:	3310      	adds	r3, #16
 8009d84:	4618      	mov	r0, r3
 8009d86:	f000 fe79 	bl	800aa7c <xTaskRemoveFromEventList>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d007      	beq.n	8009da0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d90:	4b3c      	ldr	r3, [pc, #240]	@ (8009e84 <xQueueReceive+0x1c0>)
 8009d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009da0:	f001 fd8c 	bl	800b8bc <vPortExitCritical>
				return pdPASS;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e069      	b.n	8009e7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d103      	bne.n	8009db6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009dae:	f001 fd85 	bl	800b8bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009db2:	2300      	movs	r3, #0
 8009db4:	e062      	b.n	8009e7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d106      	bne.n	8009dca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009dbc:	f107 0310 	add.w	r3, r7, #16
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 febf 	bl	800ab44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009dca:	f001 fd77 	bl	800b8bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009dce:	f000 fc2b 	bl	800a628 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009dd2:	f001 fd43 	bl	800b85c <vPortEnterCritical>
 8009dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d103      	bne.n	8009dec <xQueueReceive+0x128>
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009df2:	b25b      	sxtb	r3, r3
 8009df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df8:	d103      	bne.n	8009e02 <xQueueReceive+0x13e>
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e02:	f001 fd5b 	bl	800b8bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e06:	1d3a      	adds	r2, r7, #4
 8009e08:	f107 0310 	add.w	r3, r7, #16
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 feae 	bl	800ab70 <xTaskCheckForTimeOut>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d123      	bne.n	8009e62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e1c:	f000 f916 	bl	800a04c <prvIsQueueEmpty>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d017      	beq.n	8009e56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e28:	3324      	adds	r3, #36	@ 0x24
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	4611      	mov	r1, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fdd2 	bl	800a9d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e36:	f000 f8b7 	bl	8009fa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e3a:	f000 fc03 	bl	800a644 <xTaskResumeAll>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d189      	bne.n	8009d58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009e44:	4b0f      	ldr	r3, [pc, #60]	@ (8009e84 <xQueueReceive+0x1c0>)
 8009e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	e780      	b.n	8009d58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e58:	f000 f8a6 	bl	8009fa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e5c:	f000 fbf2 	bl	800a644 <xTaskResumeAll>
 8009e60:	e77a      	b.n	8009d58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e64:	f000 f8a0 	bl	8009fa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e68:	f000 fbec 	bl	800a644 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e6e:	f000 f8ed 	bl	800a04c <prvIsQueueEmpty>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f43f af6f 	beq.w	8009d58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3730      	adds	r7, #48	@ 0x30
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10d      	bne.n	8009ec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d14d      	bne.n	8009f4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 ffc6 	bl	800ae44 <xTaskPriorityDisinherit>
 8009eb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	609a      	str	r2, [r3, #8]
 8009ec0:	e043      	b.n	8009f4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d119      	bne.n	8009efc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6858      	ldr	r0, [r3, #4]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	f002 ff2d 	bl	800cd32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ee0:	441a      	add	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d32b      	bcc.n	8009f4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	605a      	str	r2, [r3, #4]
 8009efa:	e026      	b.n	8009f4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	68d8      	ldr	r0, [r3, #12]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f04:	461a      	mov	r2, r3
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	f002 ff13 	bl	800cd32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68da      	ldr	r2, [r3, #12]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f14:	425b      	negs	r3, r3
 8009f16:	441a      	add	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d207      	bcs.n	8009f38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f30:	425b      	negs	r3, r3
 8009f32:	441a      	add	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d105      	bne.n	8009f4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d002      	beq.n	8009f4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	3b01      	subs	r3, #1
 8009f48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009f52:	697b      	ldr	r3, [r7, #20]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d018      	beq.n	8009fa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68da      	ldr	r2, [r3, #12]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f76:	441a      	add	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d303      	bcc.n	8009f90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68d9      	ldr	r1, [r3, #12]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f98:	461a      	mov	r2, r3
 8009f9a:	6838      	ldr	r0, [r7, #0]
 8009f9c:	f002 fec9 	bl	800cd32 <memcpy>
	}
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009fb0:	f001 fc54 	bl	800b85c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fbc:	e011      	b.n	8009fe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d012      	beq.n	8009fec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3324      	adds	r3, #36	@ 0x24
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 fd56 	bl	800aa7c <xTaskRemoveFromEventList>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d001      	beq.n	8009fda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009fd6:	f000 fe2f 	bl	800ac38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	dce9      	bgt.n	8009fbe <prvUnlockQueue+0x16>
 8009fea:	e000      	b.n	8009fee <prvUnlockQueue+0x46>
					break;
 8009fec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	22ff      	movs	r2, #255	@ 0xff
 8009ff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009ff6:	f001 fc61 	bl	800b8bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ffa:	f001 fc2f 	bl	800b85c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a006:	e011      	b.n	800a02c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d012      	beq.n	800a036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3310      	adds	r3, #16
 800a014:	4618      	mov	r0, r3
 800a016:	f000 fd31 	bl	800aa7c <xTaskRemoveFromEventList>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a020:	f000 fe0a 	bl	800ac38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	3b01      	subs	r3, #1
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a030:	2b00      	cmp	r3, #0
 800a032:	dce9      	bgt.n	800a008 <prvUnlockQueue+0x60>
 800a034:	e000      	b.n	800a038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	22ff      	movs	r2, #255	@ 0xff
 800a03c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a040:	f001 fc3c 	bl	800b8bc <vPortExitCritical>
}
 800a044:	bf00      	nop
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a054:	f001 fc02 	bl	800b85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a060:	2301      	movs	r3, #1
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e001      	b.n	800a06a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a06a:	f001 fc27 	bl	800b8bc <vPortExitCritical>

	return xReturn;
 800a06e:	68fb      	ldr	r3, [r7, #12]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a080:	f001 fbec 	bl	800b85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d102      	bne.n	800a096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a090:	2301      	movs	r3, #1
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	e001      	b.n	800a09a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a096:	2300      	movs	r3, #0
 800a098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a09a:	f001 fc0f 	bl	800b8bc <vPortExitCritical>

	return xReturn;
 800a09e:	68fb      	ldr	r3, [r7, #12]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	e014      	b.n	800a0e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a0b8:	4a0e      	ldr	r2, [pc, #56]	@ (800a0f4 <vQueueAddToRegistry+0x4c>)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10b      	bne.n	800a0dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a0c4:	490b      	ldr	r1, [pc, #44]	@ (800a0f4 <vQueueAddToRegistry+0x4c>)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a0ce:	4a09      	ldr	r2, [pc, #36]	@ (800a0f4 <vQueueAddToRegistry+0x4c>)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a0da:	e006      	b.n	800a0ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b07      	cmp	r3, #7
 800a0e6:	d9e7      	bls.n	800a0b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bc80      	pop	{r7}
 800a0f2:	4770      	bx	lr
 800a0f4:	20000a78 	.word	0x20000a78

0800a0f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b086      	sub	sp, #24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a108:	f001 fba8 	bl	800b85c <vPortEnterCritical>
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a112:	b25b      	sxtb	r3, r3
 800a114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a118:	d103      	bne.n	800a122 <vQueueWaitForMessageRestricted+0x2a>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a128:	b25b      	sxtb	r3, r3
 800a12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12e:	d103      	bne.n	800a138 <vQueueWaitForMessageRestricted+0x40>
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a138:	f001 fbc0 	bl	800b8bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a140:	2b00      	cmp	r3, #0
 800a142:	d106      	bne.n	800a152 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	3324      	adds	r3, #36	@ 0x24
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	68b9      	ldr	r1, [r7, #8]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fc69 	bl	800aa24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a152:	6978      	ldr	r0, [r7, #20]
 800a154:	f7ff ff28 	bl	8009fa8 <prvUnlockQueue>
	}
 800a158:	bf00      	nop
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08e      	sub	sp, #56	@ 0x38
 800a164:	af04      	add	r7, sp, #16
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a16e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10b      	bne.n	800a18c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	623b      	str	r3, [r7, #32]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10b      	bne.n	800a1aa <xTaskCreateStatic+0x4a>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	61fb      	str	r3, [r7, #28]
}
 800a1a4:	bf00      	nop
 800a1a6:	bf00      	nop
 800a1a8:	e7fd      	b.n	800a1a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a1aa:	23a8      	movs	r3, #168	@ 0xa8
 800a1ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	2ba8      	cmp	r3, #168	@ 0xa8
 800a1b2:	d00b      	beq.n	800a1cc <xTaskCreateStatic+0x6c>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b8:	f383 8811 	msr	BASEPRI, r3
 800a1bc:	f3bf 8f6f 	isb	sy
 800a1c0:	f3bf 8f4f 	dsb	sy
 800a1c4:	61bb      	str	r3, [r7, #24]
}
 800a1c6:	bf00      	nop
 800a1c8:	bf00      	nop
 800a1ca:	e7fd      	b.n	800a1c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a1cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d01e      	beq.n	800a212 <xTaskCreateStatic+0xb2>
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d01b      	beq.n	800a212 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f2:	9302      	str	r3, [sp, #8]
 800a1f4:	f107 0314 	add.w	r3, r7, #20
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f851 	bl	800a2ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a20a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a20c:	f000 f8f6 	bl	800a3fc <prvAddNewTaskToReadyList>
 800a210:	e001      	b.n	800a216 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a216:	697b      	ldr	r3, [r7, #20]
	}
 800a218:	4618      	mov	r0, r3
 800a21a:	3728      	adds	r7, #40	@ 0x28
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a220:	b580      	push	{r7, lr}
 800a222:	b08c      	sub	sp, #48	@ 0x30
 800a224:	af04      	add	r7, sp, #16
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	603b      	str	r3, [r7, #0]
 800a22c:	4613      	mov	r3, r2
 800a22e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4618      	mov	r0, r3
 800a236:	f001 fc13 	bl	800ba60 <pvPortMalloc>
 800a23a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00e      	beq.n	800a260 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a242:	20a8      	movs	r0, #168	@ 0xa8
 800a244:	f001 fc0c 	bl	800ba60 <pvPortMalloc>
 800a248:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	631a      	str	r2, [r3, #48]	@ 0x30
 800a256:	e005      	b.n	800a264 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a258:	6978      	ldr	r0, [r7, #20]
 800a25a:	f001 fccf 	bl	800bbfc <vPortFree>
 800a25e:	e001      	b.n	800a264 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a260:	2300      	movs	r3, #0
 800a262:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d017      	beq.n	800a29a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	2300      	movs	r3, #0
 800a276:	9303      	str	r3, [sp, #12]
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 f80f 	bl	800a2ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a28e:	69f8      	ldr	r0, [r7, #28]
 800a290:	f000 f8b4 	bl	800a3fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a294:	2301      	movs	r3, #1
 800a296:	61bb      	str	r3, [r7, #24]
 800a298:	e002      	b.n	800a2a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a29a:	f04f 33ff 	mov.w	r3, #4294967295
 800a29e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a2a0:	69bb      	ldr	r3, [r7, #24]
	}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3720      	adds	r7, #32
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	21a5      	movs	r1, #165	@ 0xa5
 800a2c6:	f002 fc63 	bl	800cb90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	f023 0307 	bic.w	r3, r3, #7
 800a2e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	617b      	str	r3, [r7, #20]
}
 800a300:	bf00      	nop
 800a302:	bf00      	nop
 800a304:	e7fd      	b.n	800a302 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01f      	beq.n	800a34c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a30c:	2300      	movs	r3, #0
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	e012      	b.n	800a338 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	4413      	add	r3, r2
 800a318:	7819      	ldrb	r1, [r3, #0]
 800a31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	4413      	add	r3, r2
 800a320:	3334      	adds	r3, #52	@ 0x34
 800a322:	460a      	mov	r2, r1
 800a324:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	4413      	add	r3, r2
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d006      	beq.n	800a340 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	3301      	adds	r3, #1
 800a336:	61fb      	str	r3, [r7, #28]
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	2b0f      	cmp	r3, #15
 800a33c:	d9e9      	bls.n	800a312 <prvInitialiseNewTask+0x66>
 800a33e:	e000      	b.n	800a342 <prvInitialiseNewTask+0x96>
			{
				break;
 800a340:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a34a:	e003      	b.n	800a354 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a356:	2b37      	cmp	r3, #55	@ 0x37
 800a358:	d901      	bls.n	800a35e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a35a:	2337      	movs	r3, #55	@ 0x37
 800a35c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a362:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a368:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a36c:	2200      	movs	r2, #0
 800a36e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a372:	3304      	adds	r3, #4
 800a374:	4618      	mov	r0, r3
 800a376:	f7ff f96a 	bl	800964e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a37c:	3318      	adds	r3, #24
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff f965 	bl	800964e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a388:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a392:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a396:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a398:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39c:	2200      	movs	r2, #0
 800a39e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ac:	3354      	adds	r3, #84	@ 0x54
 800a3ae:	224c      	movs	r2, #76	@ 0x4c
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f002 fbec 	bl	800cb90 <memset>
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ba:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f0 <prvInitialiseNewTask+0x144>)
 800a3bc:	659a      	str	r2, [r3, #88]	@ 0x58
 800a3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f4 <prvInitialiseNewTask+0x148>)
 800a3c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f8 <prvInitialiseNewTask+0x14c>)
 800a3c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	68f9      	ldr	r1, [r7, #12]
 800a3ce:	69b8      	ldr	r0, [r7, #24]
 800a3d0:	f001 f954 	bl	800b67c <pxPortInitialiseStack>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3e6:	bf00      	nop
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20002ec8 	.word	0x20002ec8
 800a3f4:	20002f30 	.word	0x20002f30
 800a3f8:	20002f98 	.word	0x20002f98

0800a3fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a404:	f001 fa2a 	bl	800b85c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a408:	4b2d      	ldr	r3, [pc, #180]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	4a2c      	ldr	r2, [pc, #176]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a412:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d109      	bne.n	800a42e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a41a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a420:	4b27      	ldr	r3, [pc, #156]	@ (800a4c0 <prvAddNewTaskToReadyList+0xc4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d110      	bne.n	800a44a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a428:	f000 fc2a 	bl	800ac80 <prvInitialiseTaskLists>
 800a42c:	e00d      	b.n	800a44a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a42e:	4b26      	ldr	r3, [pc, #152]	@ (800a4c8 <prvAddNewTaskToReadyList+0xcc>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d109      	bne.n	800a44a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a436:	4b23      	ldr	r3, [pc, #140]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a440:	429a      	cmp	r2, r3
 800a442:	d802      	bhi.n	800a44a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a444:	4a1f      	ldr	r2, [pc, #124]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a44a:	4b20      	ldr	r3, [pc, #128]	@ (800a4cc <prvAddNewTaskToReadyList+0xd0>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3301      	adds	r3, #1
 800a450:	4a1e      	ldr	r2, [pc, #120]	@ (800a4cc <prvAddNewTaskToReadyList+0xd0>)
 800a452:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a454:	4b1d      	ldr	r3, [pc, #116]	@ (800a4cc <prvAddNewTaskToReadyList+0xd0>)
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a460:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <prvAddNewTaskToReadyList+0xd4>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	429a      	cmp	r2, r3
 800a466:	d903      	bls.n	800a470 <prvAddNewTaskToReadyList+0x74>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46c:	4a18      	ldr	r2, [pc, #96]	@ (800a4d0 <prvAddNewTaskToReadyList+0xd4>)
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a474:	4613      	mov	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4a15      	ldr	r2, [pc, #84]	@ (800a4d4 <prvAddNewTaskToReadyList+0xd8>)
 800a47e:	441a      	add	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3304      	adds	r3, #4
 800a484:	4619      	mov	r1, r3
 800a486:	4610      	mov	r0, r2
 800a488:	f7ff f8ed 	bl	8009666 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a48c:	f001 fa16 	bl	800b8bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a490:	4b0d      	ldr	r3, [pc, #52]	@ (800a4c8 <prvAddNewTaskToReadyList+0xcc>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00e      	beq.n	800a4b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a498:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c4 <prvAddNewTaskToReadyList+0xc8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d207      	bcs.n	800a4b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d8 <prvAddNewTaskToReadyList+0xdc>)
 800a4a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	20000f8c 	.word	0x20000f8c
 800a4c4:	20000ab8 	.word	0x20000ab8
 800a4c8:	20000f98 	.word	0x20000f98
 800a4cc:	20000fa8 	.word	0x20000fa8
 800a4d0:	20000f94 	.word	0x20000f94
 800a4d4:	20000abc 	.word	0x20000abc
 800a4d8:	e000ed04 	.word	0xe000ed04

0800a4dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d018      	beq.n	800a520 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a4ee:	4b14      	ldr	r3, [pc, #80]	@ (800a540 <vTaskDelay+0x64>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00b      	beq.n	800a50e <vTaskDelay+0x32>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60bb      	str	r3, [r7, #8]
}
 800a508:	bf00      	nop
 800a50a:	bf00      	nop
 800a50c:	e7fd      	b.n	800a50a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a50e:	f000 f88b 	bl	800a628 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a512:	2100      	movs	r1, #0
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fd05 	bl	800af24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a51a:	f000 f893 	bl	800a644 <xTaskResumeAll>
 800a51e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d107      	bne.n	800a536 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a526:	4b07      	ldr	r3, [pc, #28]	@ (800a544 <vTaskDelay+0x68>)
 800a528:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a52c:	601a      	str	r2, [r3, #0]
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	20000fb4 	.word	0x20000fb4
 800a544:	e000ed04 	.word	0xe000ed04

0800a548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b08a      	sub	sp, #40	@ 0x28
 800a54c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a552:	2300      	movs	r3, #0
 800a554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a556:	463a      	mov	r2, r7
 800a558:	1d39      	adds	r1, r7, #4
 800a55a:	f107 0308 	add.w	r3, r7, #8
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff f824 	bl	80095ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a564:	6839      	ldr	r1, [r7, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	9202      	str	r2, [sp, #8]
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	2300      	movs	r3, #0
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	2300      	movs	r3, #0
 800a574:	460a      	mov	r2, r1
 800a576:	4924      	ldr	r1, [pc, #144]	@ (800a608 <vTaskStartScheduler+0xc0>)
 800a578:	4824      	ldr	r0, [pc, #144]	@ (800a60c <vTaskStartScheduler+0xc4>)
 800a57a:	f7ff fdf1 	bl	800a160 <xTaskCreateStatic>
 800a57e:	4603      	mov	r3, r0
 800a580:	4a23      	ldr	r2, [pc, #140]	@ (800a610 <vTaskStartScheduler+0xc8>)
 800a582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a584:	4b22      	ldr	r3, [pc, #136]	@ (800a610 <vTaskStartScheduler+0xc8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a58c:	2301      	movs	r3, #1
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e001      	b.n	800a596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a592:	2300      	movs	r3, #0
 800a594:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d102      	bne.n	800a5a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a59c:	f000 fd16 	bl	800afcc <xTimerCreateTimerTask>
 800a5a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d11b      	bne.n	800a5e0 <vTaskStartScheduler+0x98>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	613b      	str	r3, [r7, #16]
}
 800a5ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5bc:	4b15      	ldr	r3, [pc, #84]	@ (800a614 <vTaskStartScheduler+0xcc>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3354      	adds	r3, #84	@ 0x54
 800a5c2:	4a15      	ldr	r2, [pc, #84]	@ (800a618 <vTaskStartScheduler+0xd0>)
 800a5c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5c6:	4b15      	ldr	r3, [pc, #84]	@ (800a61c <vTaskStartScheduler+0xd4>)
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5ce:	4b14      	ldr	r3, [pc, #80]	@ (800a620 <vTaskStartScheduler+0xd8>)
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5d4:	4b13      	ldr	r3, [pc, #76]	@ (800a624 <vTaskStartScheduler+0xdc>)
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5da:	f001 f8cd 	bl	800b778 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5de:	e00f      	b.n	800a600 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d10b      	bne.n	800a600 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ec:	f383 8811 	msr	BASEPRI, r3
 800a5f0:	f3bf 8f6f 	isb	sy
 800a5f4:	f3bf 8f4f 	dsb	sy
 800a5f8:	60fb      	str	r3, [r7, #12]
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	e7fd      	b.n	800a5fc <vTaskStartScheduler+0xb4>
}
 800a600:	bf00      	nop
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	0800d84c 	.word	0x0800d84c
 800a60c:	0800ac51 	.word	0x0800ac51
 800a610:	20000fb0 	.word	0x20000fb0
 800a614:	20000ab8 	.word	0x20000ab8
 800a618:	200001ac 	.word	0x200001ac
 800a61c:	20000fac 	.word	0x20000fac
 800a620:	20000f98 	.word	0x20000f98
 800a624:	20000f90 	.word	0x20000f90

0800a628 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a62c:	4b04      	ldr	r3, [pc, #16]	@ (800a640 <vTaskSuspendAll+0x18>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	4a03      	ldr	r2, [pc, #12]	@ (800a640 <vTaskSuspendAll+0x18>)
 800a634:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a636:	bf00      	nop
 800a638:	46bd      	mov	sp, r7
 800a63a:	bc80      	pop	{r7}
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	20000fb4 	.word	0x20000fb4

0800a644 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a64e:	2300      	movs	r3, #0
 800a650:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a652:	4b42      	ldr	r3, [pc, #264]	@ (800a75c <xTaskResumeAll+0x118>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <xTaskResumeAll+0x2e>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	603b      	str	r3, [r7, #0]
}
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
 800a670:	e7fd      	b.n	800a66e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a672:	f001 f8f3 	bl	800b85c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a676:	4b39      	ldr	r3, [pc, #228]	@ (800a75c <xTaskResumeAll+0x118>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	4a37      	ldr	r2, [pc, #220]	@ (800a75c <xTaskResumeAll+0x118>)
 800a67e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a680:	4b36      	ldr	r3, [pc, #216]	@ (800a75c <xTaskResumeAll+0x118>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d162      	bne.n	800a74e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a688:	4b35      	ldr	r3, [pc, #212]	@ (800a760 <xTaskResumeAll+0x11c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d05e      	beq.n	800a74e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a690:	e02f      	b.n	800a6f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a692:	4b34      	ldr	r3, [pc, #208]	@ (800a764 <xTaskResumeAll+0x120>)
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	3318      	adds	r3, #24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff f83c 	bl	800971c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3304      	adds	r3, #4
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff f837 	bl	800971c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b2:	4b2d      	ldr	r3, [pc, #180]	@ (800a768 <xTaskResumeAll+0x124>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d903      	bls.n	800a6c2 <xTaskResumeAll+0x7e>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6be:	4a2a      	ldr	r2, [pc, #168]	@ (800a768 <xTaskResumeAll+0x124>)
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4a27      	ldr	r2, [pc, #156]	@ (800a76c <xTaskResumeAll+0x128>)
 800a6d0:	441a      	add	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7fe ffc4 	bl	8009666 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e2:	4b23      	ldr	r3, [pc, #140]	@ (800a770 <xTaskResumeAll+0x12c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d302      	bcc.n	800a6f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a6ec:	4b21      	ldr	r3, [pc, #132]	@ (800a774 <xTaskResumeAll+0x130>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a764 <xTaskResumeAll+0x120>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1cb      	bne.n	800a692 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a700:	f000 fb62 	bl	800adc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a704:	4b1c      	ldr	r3, [pc, #112]	@ (800a778 <xTaskResumeAll+0x134>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d010      	beq.n	800a732 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a710:	f000 f844 	bl	800a79c <xTaskIncrementTick>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a71a:	4b16      	ldr	r3, [pc, #88]	@ (800a774 <xTaskResumeAll+0x130>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3b01      	subs	r3, #1
 800a724:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f1      	bne.n	800a710 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a72c:	4b12      	ldr	r3, [pc, #72]	@ (800a778 <xTaskResumeAll+0x134>)
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a732:	4b10      	ldr	r3, [pc, #64]	@ (800a774 <xTaskResumeAll+0x130>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a73a:	2301      	movs	r3, #1
 800a73c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a73e:	4b0f      	ldr	r3, [pc, #60]	@ (800a77c <xTaskResumeAll+0x138>)
 800a740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a74e:	f001 f8b5 	bl	800b8bc <vPortExitCritical>

	return xAlreadyYielded;
 800a752:	68bb      	ldr	r3, [r7, #8]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000fb4 	.word	0x20000fb4
 800a760:	20000f8c 	.word	0x20000f8c
 800a764:	20000f4c 	.word	0x20000f4c
 800a768:	20000f94 	.word	0x20000f94
 800a76c:	20000abc 	.word	0x20000abc
 800a770:	20000ab8 	.word	0x20000ab8
 800a774:	20000fa0 	.word	0x20000fa0
 800a778:	20000f9c 	.word	0x20000f9c
 800a77c:	e000ed04 	.word	0xe000ed04

0800a780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a786:	4b04      	ldr	r3, [pc, #16]	@ (800a798 <xTaskGetTickCount+0x18>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a78c:	687b      	ldr	r3, [r7, #4]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	bc80      	pop	{r7}
 800a796:	4770      	bx	lr
 800a798:	20000f90 	.word	0x20000f90

0800a79c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a8e4 <xTaskIncrementTick+0x148>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f040 8090 	bne.w	800a8d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a8e8 <xTaskIncrementTick+0x14c>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7b8:	4a4b      	ldr	r2, [pc, #300]	@ (800a8e8 <xTaskIncrementTick+0x14c>)
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d121      	bne.n	800a808 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7c4:	4b49      	ldr	r3, [pc, #292]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	603b      	str	r3, [r7, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <xTaskIncrementTick+0x46>
 800a7e6:	4b41      	ldr	r3, [pc, #260]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	4b40      	ldr	r3, [pc, #256]	@ (800a8f0 <xTaskIncrementTick+0x154>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a3e      	ldr	r2, [pc, #248]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a8f0 <xTaskIncrementTick+0x154>)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f4 <xTaskIncrementTick+0x158>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3301      	adds	r3, #1
 800a800:	4a3c      	ldr	r2, [pc, #240]	@ (800a8f4 <xTaskIncrementTick+0x158>)
 800a802:	6013      	str	r3, [r2, #0]
 800a804:	f000 fae0 	bl	800adc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a808:	4b3b      	ldr	r3, [pc, #236]	@ (800a8f8 <xTaskIncrementTick+0x15c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d349      	bcc.n	800a8a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a812:	4b36      	ldr	r3, [pc, #216]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d104      	bne.n	800a826 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a81c:	4b36      	ldr	r3, [pc, #216]	@ (800a8f8 <xTaskIncrementTick+0x15c>)
 800a81e:	f04f 32ff 	mov.w	r2, #4294967295
 800a822:	601a      	str	r2, [r3, #0]
					break;
 800a824:	e03f      	b.n	800a8a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a826:	4b31      	ldr	r3, [pc, #196]	@ (800a8ec <xTaskIncrementTick+0x150>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a836:	693a      	ldr	r2, [r7, #16]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d203      	bcs.n	800a846 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a83e:	4a2e      	ldr	r2, [pc, #184]	@ (800a8f8 <xTaskIncrementTick+0x15c>)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a844:	e02f      	b.n	800a8a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3304      	adds	r3, #4
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe ff66 	bl	800971c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	3318      	adds	r3, #24
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe ff5d 	bl	800971c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a866:	4b25      	ldr	r3, [pc, #148]	@ (800a8fc <xTaskIncrementTick+0x160>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d903      	bls.n	800a876 <xTaskIncrementTick+0xda>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a872:	4a22      	ldr	r2, [pc, #136]	@ (800a8fc <xTaskIncrementTick+0x160>)
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4a1f      	ldr	r2, [pc, #124]	@ (800a900 <xTaskIncrementTick+0x164>)
 800a884:	441a      	add	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	3304      	adds	r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f7fe feea 	bl	8009666 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a896:	4b1b      	ldr	r3, [pc, #108]	@ (800a904 <xTaskIncrementTick+0x168>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d3b8      	bcc.n	800a812 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a4:	e7b5      	b.n	800a812 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8a6:	4b17      	ldr	r3, [pc, #92]	@ (800a904 <xTaskIncrementTick+0x168>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ac:	4914      	ldr	r1, [pc, #80]	@ (800a900 <xTaskIncrementTick+0x164>)
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d901      	bls.n	800a8c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8c2:	4b11      	ldr	r3, [pc, #68]	@ (800a908 <xTaskIncrementTick+0x16c>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d007      	beq.n	800a8da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e004      	b.n	800a8da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a90c <xTaskIncrementTick+0x170>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a90c <xTaskIncrementTick+0x170>)
 800a8d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8da:	697b      	ldr	r3, [r7, #20]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000fb4 	.word	0x20000fb4
 800a8e8:	20000f90 	.word	0x20000f90
 800a8ec:	20000f44 	.word	0x20000f44
 800a8f0:	20000f48 	.word	0x20000f48
 800a8f4:	20000fa4 	.word	0x20000fa4
 800a8f8:	20000fac 	.word	0x20000fac
 800a8fc:	20000f94 	.word	0x20000f94
 800a900:	20000abc 	.word	0x20000abc
 800a904:	20000ab8 	.word	0x20000ab8
 800a908:	20000fa0 	.word	0x20000fa0
 800a90c:	20000f9c 	.word	0x20000f9c

0800a910 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a916:	4b2a      	ldr	r3, [pc, #168]	@ (800a9c0 <vTaskSwitchContext+0xb0>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a91e:	4b29      	ldr	r3, [pc, #164]	@ (800a9c4 <vTaskSwitchContext+0xb4>)
 800a920:	2201      	movs	r2, #1
 800a922:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a924:	e047      	b.n	800a9b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a926:	4b27      	ldr	r3, [pc, #156]	@ (800a9c4 <vTaskSwitchContext+0xb4>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92c:	4b26      	ldr	r3, [pc, #152]	@ (800a9c8 <vTaskSwitchContext+0xb8>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	e011      	b.n	800a958 <vTaskSwitchContext+0x48>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10b      	bne.n	800a952 <vTaskSwitchContext+0x42>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	607b      	str	r3, [r7, #4]
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	e7fd      	b.n	800a94e <vTaskSwitchContext+0x3e>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	3b01      	subs	r3, #1
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	491c      	ldr	r1, [pc, #112]	@ (800a9cc <vTaskSwitchContext+0xbc>)
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	440b      	add	r3, r1
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0e3      	beq.n	800a934 <vTaskSwitchContext+0x24>
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4a15      	ldr	r2, [pc, #84]	@ (800a9cc <vTaskSwitchContext+0xbc>)
 800a978:	4413      	add	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	605a      	str	r2, [r3, #4]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	3308      	adds	r3, #8
 800a98e:	429a      	cmp	r2, r3
 800a990:	d104      	bne.n	800a99c <vTaskSwitchContext+0x8c>
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	605a      	str	r2, [r3, #4]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	4a0b      	ldr	r2, [pc, #44]	@ (800a9d0 <vTaskSwitchContext+0xc0>)
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	4a08      	ldr	r2, [pc, #32]	@ (800a9c8 <vTaskSwitchContext+0xb8>)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9ac:	4b08      	ldr	r3, [pc, #32]	@ (800a9d0 <vTaskSwitchContext+0xc0>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	3354      	adds	r3, #84	@ 0x54
 800a9b2:	4a08      	ldr	r2, [pc, #32]	@ (800a9d4 <vTaskSwitchContext+0xc4>)
 800a9b4:	6013      	str	r3, [r2, #0]
}
 800a9b6:	bf00      	nop
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bc80      	pop	{r7}
 800a9be:	4770      	bx	lr
 800a9c0:	20000fb4 	.word	0x20000fb4
 800a9c4:	20000fa0 	.word	0x20000fa0
 800a9c8:	20000f94 	.word	0x20000f94
 800a9cc:	20000abc 	.word	0x20000abc
 800a9d0:	20000ab8 	.word	0x20000ab8
 800a9d4:	200001ac 	.word	0x200001ac

0800a9d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d10b      	bne.n	800aa00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ec:	f383 8811 	msr	BASEPRI, r3
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	60fb      	str	r3, [r7, #12]
}
 800a9fa:	bf00      	nop
 800a9fc:	bf00      	nop
 800a9fe:	e7fd      	b.n	800a9fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa00:	4b07      	ldr	r3, [pc, #28]	@ (800aa20 <vTaskPlaceOnEventList+0x48>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3318      	adds	r3, #24
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7fe fe4f 	bl	80096ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa0e:	2101      	movs	r1, #1
 800aa10:	6838      	ldr	r0, [r7, #0]
 800aa12:	f000 fa87 	bl	800af24 <prvAddCurrentTaskToDelayedList>
}
 800aa16:	bf00      	nop
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000ab8 	.word	0x20000ab8

0800aa24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10b      	bne.n	800aa4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	617b      	str	r3, [r7, #20]
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	e7fd      	b.n	800aa4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa4e:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3318      	adds	r3, #24
 800aa54:	4619      	mov	r1, r3
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fe fe05 	bl	8009666 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800aa62:	f04f 33ff 	mov.w	r3, #4294967295
 800aa66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	68b8      	ldr	r0, [r7, #8]
 800aa6c:	f000 fa5a 	bl	800af24 <prvAddCurrentTaskToDelayedList>
	}
 800aa70:	bf00      	nop
 800aa72:	3718      	adds	r7, #24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}
 800aa78:	20000ab8 	.word	0x20000ab8

0800aa7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10b      	bne.n	800aaaa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60fb      	str	r3, [r7, #12]
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	e7fd      	b.n	800aaa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3318      	adds	r3, #24
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe fe34 	bl	800971c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab2c <xTaskRemoveFromEventList+0xb0>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d11d      	bne.n	800aaf8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fe2b 	bl	800971c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaca:	4b19      	ldr	r3, [pc, #100]	@ (800ab30 <xTaskRemoveFromEventList+0xb4>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d903      	bls.n	800aada <xTaskRemoveFromEventList+0x5e>
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	4a16      	ldr	r2, [pc, #88]	@ (800ab30 <xTaskRemoveFromEventList+0xb4>)
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4a13      	ldr	r2, [pc, #76]	@ (800ab34 <xTaskRemoveFromEventList+0xb8>)
 800aae8:	441a      	add	r2, r3
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	3304      	adds	r3, #4
 800aaee:	4619      	mov	r1, r3
 800aaf0:	4610      	mov	r0, r2
 800aaf2:	f7fe fdb8 	bl	8009666 <vListInsertEnd>
 800aaf6:	e005      	b.n	800ab04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	3318      	adds	r3, #24
 800aafc:	4619      	mov	r1, r3
 800aafe:	480e      	ldr	r0, [pc, #56]	@ (800ab38 <xTaskRemoveFromEventList+0xbc>)
 800ab00:	f7fe fdb1 	bl	8009666 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab08:	4b0c      	ldr	r3, [pc, #48]	@ (800ab3c <xTaskRemoveFromEventList+0xc0>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d905      	bls.n	800ab1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ab12:	2301      	movs	r3, #1
 800ab14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ab16:	4b0a      	ldr	r3, [pc, #40]	@ (800ab40 <xTaskRemoveFromEventList+0xc4>)
 800ab18:	2201      	movs	r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]
 800ab1c:	e001      	b.n	800ab22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab22:	697b      	ldr	r3, [r7, #20]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000fb4 	.word	0x20000fb4
 800ab30:	20000f94 	.word	0x20000f94
 800ab34:	20000abc 	.word	0x20000abc
 800ab38:	20000f4c 	.word	0x20000f4c
 800ab3c:	20000ab8 	.word	0x20000ab8
 800ab40:	20000fa0 	.word	0x20000fa0

0800ab44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab4c:	4b06      	ldr	r3, [pc, #24]	@ (800ab68 <vTaskInternalSetTimeOutState+0x24>)
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab54:	4b05      	ldr	r3, [pc, #20]	@ (800ab6c <vTaskInternalSetTimeOutState+0x28>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	605a      	str	r2, [r3, #4]
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bc80      	pop	{r7}
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	20000fa4 	.word	0x20000fa4
 800ab6c:	20000f90 	.word	0x20000f90

0800ab70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b088      	sub	sp, #32
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10b      	bne.n	800ab98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	613b      	str	r3, [r7, #16]
}
 800ab92:	bf00      	nop
 800ab94:	bf00      	nop
 800ab96:	e7fd      	b.n	800ab94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10b      	bne.n	800abb6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60fb      	str	r3, [r7, #12]
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	e7fd      	b.n	800abb2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800abb6:	f000 fe51 	bl	800b85c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800abba:	4b1d      	ldr	r3, [pc, #116]	@ (800ac30 <xTaskCheckForTimeOut+0xc0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd2:	d102      	bne.n	800abda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800abd4:	2300      	movs	r3, #0
 800abd6:	61fb      	str	r3, [r7, #28]
 800abd8:	e023      	b.n	800ac22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4b15      	ldr	r3, [pc, #84]	@ (800ac34 <xTaskCheckForTimeOut+0xc4>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d007      	beq.n	800abf6 <xTaskCheckForTimeOut+0x86>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	69ba      	ldr	r2, [r7, #24]
 800abec:	429a      	cmp	r2, r3
 800abee:	d302      	bcc.n	800abf6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abf0:	2301      	movs	r3, #1
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	e015      	b.n	800ac22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d20b      	bcs.n	800ac18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	1ad2      	subs	r2, r2, r3
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff ff99 	bl	800ab44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ac12:	2300      	movs	r3, #0
 800ac14:	61fb      	str	r3, [r7, #28]
 800ac16:	e004      	b.n	800ac22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ac22:	f000 fe4b 	bl	800b8bc <vPortExitCritical>

	return xReturn;
 800ac26:	69fb      	ldr	r3, [r7, #28]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3720      	adds	r7, #32
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	20000f90 	.word	0x20000f90
 800ac34:	20000fa4 	.word	0x20000fa4

0800ac38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac3c:	4b03      	ldr	r3, [pc, #12]	@ (800ac4c <vTaskMissedYield+0x14>)
 800ac3e:	2201      	movs	r2, #1
 800ac40:	601a      	str	r2, [r3, #0]
}
 800ac42:	bf00      	nop
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	20000fa0 	.word	0x20000fa0

0800ac50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac58:	f000 f852 	bl	800ad00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac5c:	4b06      	ldr	r3, [pc, #24]	@ (800ac78 <prvIdleTask+0x28>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d9f9      	bls.n	800ac58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac64:	4b05      	ldr	r3, [pc, #20]	@ (800ac7c <prvIdleTask+0x2c>)
 800ac66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac74:	e7f0      	b.n	800ac58 <prvIdleTask+0x8>
 800ac76:	bf00      	nop
 800ac78:	20000abc 	.word	0x20000abc
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac86:	2300      	movs	r3, #0
 800ac88:	607b      	str	r3, [r7, #4]
 800ac8a:	e00c      	b.n	800aca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4a12      	ldr	r2, [pc, #72]	@ (800ace0 <prvInitialiseTaskLists+0x60>)
 800ac98:	4413      	add	r3, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fcb8 	bl	8009610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3301      	adds	r3, #1
 800aca4:	607b      	str	r3, [r7, #4]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b37      	cmp	r3, #55	@ 0x37
 800acaa:	d9ef      	bls.n	800ac8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800acac:	480d      	ldr	r0, [pc, #52]	@ (800ace4 <prvInitialiseTaskLists+0x64>)
 800acae:	f7fe fcaf 	bl	8009610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800acb2:	480d      	ldr	r0, [pc, #52]	@ (800ace8 <prvInitialiseTaskLists+0x68>)
 800acb4:	f7fe fcac 	bl	8009610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800acb8:	480c      	ldr	r0, [pc, #48]	@ (800acec <prvInitialiseTaskLists+0x6c>)
 800acba:	f7fe fca9 	bl	8009610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800acbe:	480c      	ldr	r0, [pc, #48]	@ (800acf0 <prvInitialiseTaskLists+0x70>)
 800acc0:	f7fe fca6 	bl	8009610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800acc4:	480b      	ldr	r0, [pc, #44]	@ (800acf4 <prvInitialiseTaskLists+0x74>)
 800acc6:	f7fe fca3 	bl	8009610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800acca:	4b0b      	ldr	r3, [pc, #44]	@ (800acf8 <prvInitialiseTaskLists+0x78>)
 800accc:	4a05      	ldr	r2, [pc, #20]	@ (800ace4 <prvInitialiseTaskLists+0x64>)
 800acce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800acd0:	4b0a      	ldr	r3, [pc, #40]	@ (800acfc <prvInitialiseTaskLists+0x7c>)
 800acd2:	4a05      	ldr	r2, [pc, #20]	@ (800ace8 <prvInitialiseTaskLists+0x68>)
 800acd4:	601a      	str	r2, [r3, #0]
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20000abc 	.word	0x20000abc
 800ace4:	20000f1c 	.word	0x20000f1c
 800ace8:	20000f30 	.word	0x20000f30
 800acec:	20000f4c 	.word	0x20000f4c
 800acf0:	20000f60 	.word	0x20000f60
 800acf4:	20000f78 	.word	0x20000f78
 800acf8:	20000f44 	.word	0x20000f44
 800acfc:	20000f48 	.word	0x20000f48

0800ad00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad06:	e019      	b.n	800ad3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ad08:	f000 fda8 	bl	800b85c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad0c:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <prvCheckTasksWaitingTermination+0x50>)
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fe fcff 	bl	800971c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad54 <prvCheckTasksWaitingTermination+0x54>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	4a0b      	ldr	r2, [pc, #44]	@ (800ad54 <prvCheckTasksWaitingTermination+0x54>)
 800ad26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ad28:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <prvCheckTasksWaitingTermination+0x58>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ad58 <prvCheckTasksWaitingTermination+0x58>)
 800ad30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad32:	f000 fdc3 	bl	800b8bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f810 	bl	800ad5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad3c:	4b06      	ldr	r3, [pc, #24]	@ (800ad58 <prvCheckTasksWaitingTermination+0x58>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e1      	bne.n	800ad08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000f60 	.word	0x20000f60
 800ad54:	20000f8c 	.word	0x20000f8c
 800ad58:	20000f74 	.word	0x20000f74

0800ad5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3354      	adds	r3, #84	@ 0x54
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f001 ff29 	bl	800cbc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d108      	bne.n	800ad8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 ff3d 	bl	800bbfc <vPortFree>
				vPortFree( pxTCB );
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 ff3a 	bl	800bbfc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad88:	e019      	b.n	800adbe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d103      	bne.n	800ad9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 ff31 	bl	800bbfc <vPortFree>
	}
 800ad9a:	e010      	b.n	800adbe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d00b      	beq.n	800adbe <prvDeleteTCB+0x62>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60fb      	str	r3, [r7, #12]
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	e7fd      	b.n	800adba <prvDeleteTCB+0x5e>
	}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adce:	4b0c      	ldr	r3, [pc, #48]	@ (800ae00 <prvResetNextTaskUnblockTime+0x38>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d104      	bne.n	800ade2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800add8:	4b0a      	ldr	r3, [pc, #40]	@ (800ae04 <prvResetNextTaskUnblockTime+0x3c>)
 800adda:	f04f 32ff 	mov.w	r2, #4294967295
 800adde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ade0:	e008      	b.n	800adf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ade2:	4b07      	ldr	r3, [pc, #28]	@ (800ae00 <prvResetNextTaskUnblockTime+0x38>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4a04      	ldr	r2, [pc, #16]	@ (800ae04 <prvResetNextTaskUnblockTime+0x3c>)
 800adf2:	6013      	str	r3, [r2, #0]
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bc80      	pop	{r7}
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20000f44 	.word	0x20000f44
 800ae04:	20000fac 	.word	0x20000fac

0800ae08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ae0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae3c <xTaskGetSchedulerState+0x34>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d102      	bne.n	800ae1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ae16:	2301      	movs	r3, #1
 800ae18:	607b      	str	r3, [r7, #4]
 800ae1a:	e008      	b.n	800ae2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae1c:	4b08      	ldr	r3, [pc, #32]	@ (800ae40 <xTaskGetSchedulerState+0x38>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d102      	bne.n	800ae2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ae24:	2302      	movs	r3, #2
 800ae26:	607b      	str	r3, [r7, #4]
 800ae28:	e001      	b.n	800ae2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ae2e:	687b      	ldr	r3, [r7, #4]
	}
 800ae30:	4618      	mov	r0, r3
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bc80      	pop	{r7}
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	20000f98 	.word	0x20000f98
 800ae40:	20000fb4 	.word	0x20000fb4

0800ae44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d058      	beq.n	800af0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae5a:	4b2f      	ldr	r3, [pc, #188]	@ (800af18 <xTaskPriorityDisinherit+0xd4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d00b      	beq.n	800ae7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ae64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	60fb      	str	r3, [r7, #12]
}
 800ae76:	bf00      	nop
 800ae78:	bf00      	nop
 800ae7a:	e7fd      	b.n	800ae78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10b      	bne.n	800ae9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ae84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	60bb      	str	r3, [r7, #8]
}
 800ae96:	bf00      	nop
 800ae98:	bf00      	nop
 800ae9a:	e7fd      	b.n	800ae98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea0:	1e5a      	subs	r2, r3, #1
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d02c      	beq.n	800af0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d128      	bne.n	800af0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fe fc2c 	bl	800971c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aedc:	4b0f      	ldr	r3, [pc, #60]	@ (800af1c <xTaskPriorityDisinherit+0xd8>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d903      	bls.n	800aeec <xTaskPriorityDisinherit+0xa8>
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee8:	4a0c      	ldr	r2, [pc, #48]	@ (800af1c <xTaskPriorityDisinherit+0xd8>)
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef0:	4613      	mov	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4a09      	ldr	r2, [pc, #36]	@ (800af20 <xTaskPriorityDisinherit+0xdc>)
 800aefa:	441a      	add	r2, r3
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	3304      	adds	r3, #4
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f7fe fbaf 	bl	8009666 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800af08:	2301      	movs	r3, #1
 800af0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800af0c:	697b      	ldr	r3, [r7, #20]
	}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20000ab8 	.word	0x20000ab8
 800af1c:	20000f94 	.word	0x20000f94
 800af20:	20000abc 	.word	0x20000abc

0800af24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af2e:	4b21      	ldr	r3, [pc, #132]	@ (800afb4 <prvAddCurrentTaskToDelayedList+0x90>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af34:	4b20      	ldr	r3, [pc, #128]	@ (800afb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3304      	adds	r3, #4
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fbee 	bl	800971c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af46:	d10a      	bne.n	800af5e <prvAddCurrentTaskToDelayedList+0x3a>
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d007      	beq.n	800af5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af4e:	4b1a      	ldr	r3, [pc, #104]	@ (800afb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	3304      	adds	r3, #4
 800af54:	4619      	mov	r1, r3
 800af56:	4819      	ldr	r0, [pc, #100]	@ (800afbc <prvAddCurrentTaskToDelayedList+0x98>)
 800af58:	f7fe fb85 	bl	8009666 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af5c:	e026      	b.n	800afac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4413      	add	r3, r2
 800af64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af66:	4b14      	ldr	r3, [pc, #80]	@ (800afb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	429a      	cmp	r2, r3
 800af74:	d209      	bcs.n	800af8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af76:	4b12      	ldr	r3, [pc, #72]	@ (800afc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	4b0f      	ldr	r3, [pc, #60]	@ (800afb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	3304      	adds	r3, #4
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f7fe fb92 	bl	80096ac <vListInsert>
}
 800af88:	e010      	b.n	800afac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af8a:	4b0e      	ldr	r3, [pc, #56]	@ (800afc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	4b0a      	ldr	r3, [pc, #40]	@ (800afb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4610      	mov	r0, r2
 800af98:	f7fe fb88 	bl	80096ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af9c:	4b0a      	ldr	r3, [pc, #40]	@ (800afc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68ba      	ldr	r2, [r7, #8]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d202      	bcs.n	800afac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800afa6:	4a08      	ldr	r2, [pc, #32]	@ (800afc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6013      	str	r3, [r2, #0]
}
 800afac:	bf00      	nop
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20000f90 	.word	0x20000f90
 800afb8:	20000ab8 	.word	0x20000ab8
 800afbc:	20000f78 	.word	0x20000f78
 800afc0:	20000f48 	.word	0x20000f48
 800afc4:	20000f44 	.word	0x20000f44
 800afc8:	20000fac 	.word	0x20000fac

0800afcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08a      	sub	sp, #40	@ 0x28
 800afd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800afd6:	f000 fb11 	bl	800b5fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afda:	4b1d      	ldr	r3, [pc, #116]	@ (800b050 <xTimerCreateTimerTask+0x84>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d021      	beq.n	800b026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afe6:	2300      	movs	r3, #0
 800afe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afea:	1d3a      	adds	r2, r7, #4
 800afec:	f107 0108 	add.w	r1, r7, #8
 800aff0:	f107 030c 	add.w	r3, r7, #12
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fe faf1 	bl	80095dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	68fa      	ldr	r2, [r7, #12]
 800b000:	9202      	str	r2, [sp, #8]
 800b002:	9301      	str	r3, [sp, #4]
 800b004:	2302      	movs	r3, #2
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	2300      	movs	r3, #0
 800b00a:	460a      	mov	r2, r1
 800b00c:	4911      	ldr	r1, [pc, #68]	@ (800b054 <xTimerCreateTimerTask+0x88>)
 800b00e:	4812      	ldr	r0, [pc, #72]	@ (800b058 <xTimerCreateTimerTask+0x8c>)
 800b010:	f7ff f8a6 	bl	800a160 <xTaskCreateStatic>
 800b014:	4603      	mov	r3, r0
 800b016:	4a11      	ldr	r2, [pc, #68]	@ (800b05c <xTimerCreateTimerTask+0x90>)
 800b018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b01a:	4b10      	ldr	r3, [pc, #64]	@ (800b05c <xTimerCreateTimerTask+0x90>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b022:	2301      	movs	r3, #1
 800b024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10b      	bne.n	800b044 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	613b      	str	r3, [r7, #16]
}
 800b03e:	bf00      	nop
 800b040:	bf00      	nop
 800b042:	e7fd      	b.n	800b040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b044:	697b      	ldr	r3, [r7, #20]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000fe8 	.word	0x20000fe8
 800b054:	0800d854 	.word	0x0800d854
 800b058:	0800b199 	.word	0x0800b199
 800b05c:	20000fec 	.word	0x20000fec

0800b060 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b08a      	sub	sp, #40	@ 0x28
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b06e:	2300      	movs	r3, #0
 800b070:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10b      	bne.n	800b090 <xTimerGenericCommand+0x30>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	623b      	str	r3, [r7, #32]
}
 800b08a:	bf00      	nop
 800b08c:	bf00      	nop
 800b08e:	e7fd      	b.n	800b08c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b090:	4b19      	ldr	r3, [pc, #100]	@ (800b0f8 <xTimerGenericCommand+0x98>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d02a      	beq.n	800b0ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b05      	cmp	r3, #5
 800b0a8:	dc18      	bgt.n	800b0dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b0aa:	f7ff fead 	bl	800ae08 <xTaskGetSchedulerState>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d109      	bne.n	800b0c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0b4:	4b10      	ldr	r3, [pc, #64]	@ (800b0f8 <xTimerGenericCommand+0x98>)
 800b0b6:	6818      	ldr	r0, [r3, #0]
 800b0b8:	f107 0110 	add.w	r1, r7, #16
 800b0bc:	2300      	movs	r3, #0
 800b0be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c0:	f7fe fc60 	bl	8009984 <xQueueGenericSend>
 800b0c4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0c6:	e012      	b.n	800b0ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0c8:	4b0b      	ldr	r3, [pc, #44]	@ (800b0f8 <xTimerGenericCommand+0x98>)
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	f107 0110 	add.w	r1, r7, #16
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f7fe fc56 	bl	8009984 <xQueueGenericSend>
 800b0d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0da:	e008      	b.n	800b0ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0dc:	4b06      	ldr	r3, [pc, #24]	@ (800b0f8 <xTimerGenericCommand+0x98>)
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	f107 0110 	add.w	r1, r7, #16
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	f7fe fd4e 	bl	8009b88 <xQueueGenericSendFromISR>
 800b0ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3728      	adds	r7, #40	@ 0x28
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000fe8 	.word	0x20000fe8

0800b0fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b088      	sub	sp, #32
 800b100:	af02      	add	r7, sp, #8
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b106:	4b23      	ldr	r3, [pc, #140]	@ (800b194 <prvProcessExpiredTimer+0x98>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	3304      	adds	r3, #4
 800b114:	4618      	mov	r0, r3
 800b116:	f7fe fb01 	bl	800971c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b120:	f003 0304 	and.w	r3, r3, #4
 800b124:	2b00      	cmp	r3, #0
 800b126:	d023      	beq.n	800b170 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	699a      	ldr	r2, [r3, #24]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	18d1      	adds	r1, r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	683a      	ldr	r2, [r7, #0]
 800b134:	6978      	ldr	r0, [r7, #20]
 800b136:	f000 f8d3 	bl	800b2e0 <prvInsertTimerInActiveList>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d020      	beq.n	800b182 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b140:	2300      	movs	r3, #0
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	2300      	movs	r3, #0
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	2100      	movs	r1, #0
 800b14a:	6978      	ldr	r0, [r7, #20]
 800b14c:	f7ff ff88 	bl	800b060 <xTimerGenericCommand>
 800b150:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d114      	bne.n	800b182 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	60fb      	str	r3, [r7, #12]
}
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	e7fd      	b.n	800b16c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b176:	f023 0301 	bic.w	r3, r3, #1
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	6a1b      	ldr	r3, [r3, #32]
 800b186:	6978      	ldr	r0, [r7, #20]
 800b188:	4798      	blx	r3
}
 800b18a:	bf00      	nop
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000fe0 	.word	0x20000fe0

0800b198 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1a0:	f107 0308 	add.w	r3, r7, #8
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 f859 	bl	800b25c <prvGetNextExpireTime>
 800b1aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 f805 	bl	800b1c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1b6:	f000 f8d5 	bl	800b364 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1ba:	bf00      	nop
 800b1bc:	e7f0      	b.n	800b1a0 <prvTimerTask+0x8>
	...

0800b1c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1ca:	f7ff fa2d 	bl	800a628 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1ce:	f107 0308 	add.w	r3, r7, #8
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f000 f864 	bl	800b2a0 <prvSampleTimeNow>
 800b1d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d130      	bne.n	800b242 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10a      	bne.n	800b1fc <prvProcessTimerOrBlockTask+0x3c>
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d806      	bhi.n	800b1fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1ee:	f7ff fa29 	bl	800a644 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1f2:	68f9      	ldr	r1, [r7, #12]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f7ff ff81 	bl	800b0fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1fa:	e024      	b.n	800b246 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d008      	beq.n	800b214 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b202:	4b13      	ldr	r3, [pc, #76]	@ (800b250 <prvProcessTimerOrBlockTask+0x90>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <prvProcessTimerOrBlockTask+0x50>
 800b20c:	2301      	movs	r3, #1
 800b20e:	e000      	b.n	800b212 <prvProcessTimerOrBlockTask+0x52>
 800b210:	2300      	movs	r3, #0
 800b212:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b214:	4b0f      	ldr	r3, [pc, #60]	@ (800b254 <prvProcessTimerOrBlockTask+0x94>)
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	4619      	mov	r1, r3
 800b222:	f7fe ff69 	bl	800a0f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b226:	f7ff fa0d 	bl	800a644 <xTaskResumeAll>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10a      	bne.n	800b246 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b230:	4b09      	ldr	r3, [pc, #36]	@ (800b258 <prvProcessTimerOrBlockTask+0x98>)
 800b232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	f3bf 8f6f 	isb	sy
}
 800b240:	e001      	b.n	800b246 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b242:	f7ff f9ff 	bl	800a644 <xTaskResumeAll>
}
 800b246:	bf00      	nop
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	20000fe4 	.word	0x20000fe4
 800b254:	20000fe8 	.word	0x20000fe8
 800b258:	e000ed04 	.word	0xe000ed04

0800b25c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b264:	4b0d      	ldr	r3, [pc, #52]	@ (800b29c <prvGetNextExpireTime+0x40>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <prvGetNextExpireTime+0x16>
 800b26e:	2201      	movs	r2, #1
 800b270:	e000      	b.n	800b274 <prvGetNextExpireTime+0x18>
 800b272:	2200      	movs	r2, #0
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d105      	bne.n	800b28c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b280:	4b06      	ldr	r3, [pc, #24]	@ (800b29c <prvGetNextExpireTime+0x40>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	60fb      	str	r3, [r7, #12]
 800b28a:	e001      	b.n	800b290 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b290:	68fb      	ldr	r3, [r7, #12]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	bc80      	pop	{r7}
 800b29a:	4770      	bx	lr
 800b29c:	20000fe0 	.word	0x20000fe0

0800b2a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b2a8:	f7ff fa6a 	bl	800a780 <xTaskGetTickCount>
 800b2ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b2ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b2dc <prvSampleTimeNow+0x3c>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d205      	bcs.n	800b2c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2b8:	f000 f93a 	bl	800b530 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	e002      	b.n	800b2ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b2ca:	4a04      	ldr	r2, [pc, #16]	@ (800b2dc <prvSampleTimeNow+0x3c>)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000ff0 	.word	0x20000ff0

0800b2e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	68ba      	ldr	r2, [r7, #8]
 800b2f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	429a      	cmp	r2, r3
 800b304:	d812      	bhi.n	800b32c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	1ad2      	subs	r2, r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	d302      	bcc.n	800b31a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
 800b318:	e01b      	b.n	800b352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b31a:	4b10      	ldr	r3, [pc, #64]	@ (800b35c <prvInsertTimerInActiveList+0x7c>)
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3304      	adds	r3, #4
 800b322:	4619      	mov	r1, r3
 800b324:	4610      	mov	r0, r2
 800b326:	f7fe f9c1 	bl	80096ac <vListInsert>
 800b32a:	e012      	b.n	800b352 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	d206      	bcs.n	800b342 <prvInsertTimerInActiveList+0x62>
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d302      	bcc.n	800b342 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b33c:	2301      	movs	r3, #1
 800b33e:	617b      	str	r3, [r7, #20]
 800b340:	e007      	b.n	800b352 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b342:	4b07      	ldr	r3, [pc, #28]	@ (800b360 <prvInsertTimerInActiveList+0x80>)
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3304      	adds	r3, #4
 800b34a:	4619      	mov	r1, r3
 800b34c:	4610      	mov	r0, r2
 800b34e:	f7fe f9ad 	bl	80096ac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b352:	697b      	ldr	r3, [r7, #20]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3718      	adds	r7, #24
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	20000fe4 	.word	0x20000fe4
 800b360:	20000fe0 	.word	0x20000fe0

0800b364 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08e      	sub	sp, #56	@ 0x38
 800b368:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b36a:	e0ce      	b.n	800b50a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	da19      	bge.n	800b3a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b372:	1d3b      	adds	r3, r7, #4
 800b374:	3304      	adds	r3, #4
 800b376:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10b      	bne.n	800b396 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	61fb      	str	r3, [r7, #28]
}
 800b390:	bf00      	nop
 800b392:	bf00      	nop
 800b394:	e7fd      	b.n	800b392 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b39c:	6850      	ldr	r0, [r2, #4]
 800b39e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3a0:	6892      	ldr	r2, [r2, #8]
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f2c0 80ae 	blt.w	800b50a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3bc:	3304      	adds	r3, #4
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe f9ac 	bl	800971c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3c4:	463b      	mov	r3, r7
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff ff6a 	bl	800b2a0 <prvSampleTimeNow>
 800b3cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b09      	cmp	r3, #9
 800b3d2:	f200 8097 	bhi.w	800b504 <prvProcessReceivedCommands+0x1a0>
 800b3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3dc <prvProcessReceivedCommands+0x78>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b405 	.word	0x0800b405
 800b3e0:	0800b405 	.word	0x0800b405
 800b3e4:	0800b405 	.word	0x0800b405
 800b3e8:	0800b47b 	.word	0x0800b47b
 800b3ec:	0800b48f 	.word	0x0800b48f
 800b3f0:	0800b4db 	.word	0x0800b4db
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b405 	.word	0x0800b405
 800b3fc:	0800b47b 	.word	0x0800b47b
 800b400:	0800b48f 	.word	0x0800b48f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b406:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b40a:	f043 0301 	orr.w	r3, r3, #1
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b412:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	18d1      	adds	r1, r2, r3
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b424:	f7ff ff5c 	bl	800b2e0 <prvInsertTimerInActiveList>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d06c      	beq.n	800b508 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b434:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b43c:	f003 0304 	and.w	r3, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	d061      	beq.n	800b508 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b448:	699b      	ldr	r3, [r3, #24]
 800b44a:	441a      	add	r2, r3
 800b44c:	2300      	movs	r3, #0
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	2300      	movs	r3, #0
 800b452:	2100      	movs	r1, #0
 800b454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b456:	f7ff fe03 	bl	800b060 <xTimerGenericCommand>
 800b45a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d152      	bne.n	800b508 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	61bb      	str	r3, [r7, #24]
}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	e7fd      	b.n	800b476 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b480:	f023 0301 	bic.w	r3, r3, #1
 800b484:	b2da      	uxtb	r2, r3
 800b486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b488:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b48c:	e03d      	b.n	800b50a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b490:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b494:	f043 0301 	orr.w	r3, r3, #1
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b4a0:	68ba      	ldr	r2, [r7, #8]
 800b4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10b      	bne.n	800b4c6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	617b      	str	r3, [r7, #20]
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	e7fd      	b.n	800b4c2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	18d1      	adds	r1, r2, r3
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4d4:	f7ff ff04 	bl	800b2e0 <prvInsertTimerInActiveList>
					break;
 800b4d8:	e017      	b.n	800b50a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4e0:	f003 0302 	and.w	r3, r3, #2
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d103      	bne.n	800b4f0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b4e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b4ea:	f000 fb87 	bl	800bbfc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4ee:	e00c      	b.n	800b50a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b4f6:	f023 0301 	bic.w	r3, r3, #1
 800b4fa:	b2da      	uxtb	r2, r3
 800b4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b502:	e002      	b.n	800b50a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b504:	bf00      	nop
 800b506:	e000      	b.n	800b50a <prvProcessReceivedCommands+0x1a6>
					break;
 800b508:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b50a:	4b08      	ldr	r3, [pc, #32]	@ (800b52c <prvProcessReceivedCommands+0x1c8>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	1d39      	adds	r1, r7, #4
 800b510:	2200      	movs	r2, #0
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe fbd6 	bl	8009cc4 <xQueueReceive>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	f47f af26 	bne.w	800b36c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b520:	bf00      	nop
 800b522:	bf00      	nop
 800b524:	3730      	adds	r7, #48	@ 0x30
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000fe8 	.word	0x20000fe8

0800b530 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b088      	sub	sp, #32
 800b534:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b536:	e049      	b.n	800b5cc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b538:	4b2e      	ldr	r3, [pc, #184]	@ (800b5f4 <prvSwitchTimerLists+0xc4>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b542:	4b2c      	ldr	r3, [pc, #176]	@ (800b5f4 <prvSwitchTimerLists+0xc4>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68db      	ldr	r3, [r3, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3304      	adds	r3, #4
 800b550:	4618      	mov	r0, r3
 800b552:	f7fe f8e3 	bl	800971c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6a1b      	ldr	r3, [r3, #32]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b564:	f003 0304 	and.w	r3, r3, #4
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d02f      	beq.n	800b5cc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	693a      	ldr	r2, [r7, #16]
 800b572:	4413      	add	r3, r2
 800b574:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d90e      	bls.n	800b59c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b58a:	4b1a      	ldr	r3, [pc, #104]	@ (800b5f4 <prvSwitchTimerLists+0xc4>)
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3304      	adds	r3, #4
 800b592:	4619      	mov	r1, r3
 800b594:	4610      	mov	r0, r2
 800b596:	f7fe f889 	bl	80096ac <vListInsert>
 800b59a:	e017      	b.n	800b5cc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b59c:	2300      	movs	r3, #0
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fd5a 	bl	800b060 <xTimerGenericCommand>
 800b5ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10b      	bne.n	800b5cc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	603b      	str	r3, [r7, #0]
}
 800b5c6:	bf00      	nop
 800b5c8:	bf00      	nop
 800b5ca:	e7fd      	b.n	800b5c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5cc:	4b09      	ldr	r3, [pc, #36]	@ (800b5f4 <prvSwitchTimerLists+0xc4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1b0      	bne.n	800b538 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5d6:	4b07      	ldr	r3, [pc, #28]	@ (800b5f4 <prvSwitchTimerLists+0xc4>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5dc:	4b06      	ldr	r3, [pc, #24]	@ (800b5f8 <prvSwitchTimerLists+0xc8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a04      	ldr	r2, [pc, #16]	@ (800b5f4 <prvSwitchTimerLists+0xc4>)
 800b5e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5e4:	4a04      	ldr	r2, [pc, #16]	@ (800b5f8 <prvSwitchTimerLists+0xc8>)
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	6013      	str	r3, [r2, #0]
}
 800b5ea:	bf00      	nop
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20000fe0 	.word	0x20000fe0
 800b5f8:	20000fe4 	.word	0x20000fe4

0800b5fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b082      	sub	sp, #8
 800b600:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b602:	f000 f92b 	bl	800b85c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b606:	4b15      	ldr	r3, [pc, #84]	@ (800b65c <prvCheckForValidListAndQueue+0x60>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d120      	bne.n	800b650 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b60e:	4814      	ldr	r0, [pc, #80]	@ (800b660 <prvCheckForValidListAndQueue+0x64>)
 800b610:	f7fd fffe 	bl	8009610 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b614:	4813      	ldr	r0, [pc, #76]	@ (800b664 <prvCheckForValidListAndQueue+0x68>)
 800b616:	f7fd fffb 	bl	8009610 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b61a:	4b13      	ldr	r3, [pc, #76]	@ (800b668 <prvCheckForValidListAndQueue+0x6c>)
 800b61c:	4a10      	ldr	r2, [pc, #64]	@ (800b660 <prvCheckForValidListAndQueue+0x64>)
 800b61e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b620:	4b12      	ldr	r3, [pc, #72]	@ (800b66c <prvCheckForValidListAndQueue+0x70>)
 800b622:	4a10      	ldr	r2, [pc, #64]	@ (800b664 <prvCheckForValidListAndQueue+0x68>)
 800b624:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b626:	2300      	movs	r3, #0
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	4b11      	ldr	r3, [pc, #68]	@ (800b670 <prvCheckForValidListAndQueue+0x74>)
 800b62c:	4a11      	ldr	r2, [pc, #68]	@ (800b674 <prvCheckForValidListAndQueue+0x78>)
 800b62e:	2110      	movs	r1, #16
 800b630:	200a      	movs	r0, #10
 800b632:	f7fe f907 	bl	8009844 <xQueueGenericCreateStatic>
 800b636:	4603      	mov	r3, r0
 800b638:	4a08      	ldr	r2, [pc, #32]	@ (800b65c <prvCheckForValidListAndQueue+0x60>)
 800b63a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b63c:	4b07      	ldr	r3, [pc, #28]	@ (800b65c <prvCheckForValidListAndQueue+0x60>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d005      	beq.n	800b650 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b644:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <prvCheckForValidListAndQueue+0x60>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	490b      	ldr	r1, [pc, #44]	@ (800b678 <prvCheckForValidListAndQueue+0x7c>)
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe fd2c 	bl	800a0a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b650:	f000 f934 	bl	800b8bc <vPortExitCritical>
}
 800b654:	bf00      	nop
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}
 800b65a:	bf00      	nop
 800b65c:	20000fe8 	.word	0x20000fe8
 800b660:	20000fb8 	.word	0x20000fb8
 800b664:	20000fcc 	.word	0x20000fcc
 800b668:	20000fe0 	.word	0x20000fe0
 800b66c:	20000fe4 	.word	0x20000fe4
 800b670:	20001094 	.word	0x20001094
 800b674:	20000ff4 	.word	0x20000ff4
 800b678:	0800d85c 	.word	0x0800d85c

0800b67c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3b04      	subs	r3, #4
 800b68c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3b04      	subs	r3, #4
 800b69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	f023 0201 	bic.w	r2, r3, #1
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	3b04      	subs	r3, #4
 800b6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b6ac:	4a08      	ldr	r2, [pc, #32]	@ (800b6d0 <pxPortInitialiseStack+0x54>)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3b14      	subs	r3, #20
 800b6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3b20      	subs	r3, #32
 800b6c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bc80      	pop	{r7}
 800b6ce:	4770      	bx	lr
 800b6d0:	0800b6d5 	.word	0x0800b6d5

0800b6d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6de:	4b12      	ldr	r3, [pc, #72]	@ (800b728 <prvTaskExitError+0x54>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e6:	d00b      	beq.n	800b700 <prvTaskExitError+0x2c>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	60fb      	str	r3, [r7, #12]
}
 800b6fa:	bf00      	nop
 800b6fc:	bf00      	nop
 800b6fe:	e7fd      	b.n	800b6fc <prvTaskExitError+0x28>
	__asm volatile
 800b700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b704:	f383 8811 	msr	BASEPRI, r3
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	60bb      	str	r3, [r7, #8]
}
 800b712:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b714:	bf00      	nop
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0fc      	beq.n	800b716 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b71c:	bf00      	nop
 800b71e:	bf00      	nop
 800b720:	3714      	adds	r7, #20
 800b722:	46bd      	mov	sp, r7
 800b724:	bc80      	pop	{r7}
 800b726:	4770      	bx	lr
 800b728:	2000013c 	.word	0x2000013c
 800b72c:	00000000 	.word	0x00000000

0800b730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b730:	4b07      	ldr	r3, [pc, #28]	@ (800b750 <pxCurrentTCBConst2>)
 800b732:	6819      	ldr	r1, [r3, #0]
 800b734:	6808      	ldr	r0, [r1, #0]
 800b736:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b73a:	f380 8809 	msr	PSP, r0
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f04f 0000 	mov.w	r0, #0
 800b746:	f380 8811 	msr	BASEPRI, r0
 800b74a:	f04e 0e0d 	orr.w	lr, lr, #13
 800b74e:	4770      	bx	lr

0800b750 <pxCurrentTCBConst2>:
 800b750:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop

0800b758 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b758:	4806      	ldr	r0, [pc, #24]	@ (800b774 <prvPortStartFirstTask+0x1c>)
 800b75a:	6800      	ldr	r0, [r0, #0]
 800b75c:	6800      	ldr	r0, [r0, #0]
 800b75e:	f380 8808 	msr	MSP, r0
 800b762:	b662      	cpsie	i
 800b764:	b661      	cpsie	f
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	df00      	svc	0
 800b770:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b772:	bf00      	nop
 800b774:	e000ed08 	.word	0xe000ed08

0800b778 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b77e:	4b32      	ldr	r3, [pc, #200]	@ (800b848 <xPortStartScheduler+0xd0>)
 800b780:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	22ff      	movs	r2, #255	@ 0xff
 800b78e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b798:	78fb      	ldrb	r3, [r7, #3]
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7a0:	b2da      	uxtb	r2, r3
 800b7a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b84c <xPortStartScheduler+0xd4>)
 800b7a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7a6:	4b2a      	ldr	r3, [pc, #168]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b7a8:	2207      	movs	r2, #7
 800b7aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7ac:	e009      	b.n	800b7c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b7ae:	4b28      	ldr	r3, [pc, #160]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	4a26      	ldr	r2, [pc, #152]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b7b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7b8:	78fb      	ldrb	r3, [r7, #3]
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7c2:	78fb      	ldrb	r3, [r7, #3]
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7ca:	2b80      	cmp	r3, #128	@ 0x80
 800b7cc:	d0ef      	beq.n	800b7ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7ce:	4b20      	ldr	r3, [pc, #128]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f1c3 0307 	rsb	r3, r3, #7
 800b7d6:	2b04      	cmp	r3, #4
 800b7d8:	d00b      	beq.n	800b7f2 <xPortStartScheduler+0x7a>
	__asm volatile
 800b7da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7de:	f383 8811 	msr	BASEPRI, r3
 800b7e2:	f3bf 8f6f 	isb	sy
 800b7e6:	f3bf 8f4f 	dsb	sy
 800b7ea:	60bb      	str	r3, [r7, #8]
}
 800b7ec:	bf00      	nop
 800b7ee:	bf00      	nop
 800b7f0:	e7fd      	b.n	800b7ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b7f2:	4b17      	ldr	r3, [pc, #92]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	4a15      	ldr	r2, [pc, #84]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b7fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b7fc:	4b14      	ldr	r3, [pc, #80]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b804:	4a12      	ldr	r2, [pc, #72]	@ (800b850 <xPortStartScheduler+0xd8>)
 800b806:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b810:	4b10      	ldr	r3, [pc, #64]	@ (800b854 <xPortStartScheduler+0xdc>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a0f      	ldr	r2, [pc, #60]	@ (800b854 <xPortStartScheduler+0xdc>)
 800b816:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b81a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b81c:	4b0d      	ldr	r3, [pc, #52]	@ (800b854 <xPortStartScheduler+0xdc>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a0c      	ldr	r2, [pc, #48]	@ (800b854 <xPortStartScheduler+0xdc>)
 800b822:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b826:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b828:	f000 f8b8 	bl	800b99c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b82c:	4b0a      	ldr	r3, [pc, #40]	@ (800b858 <xPortStartScheduler+0xe0>)
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b832:	f7ff ff91 	bl	800b758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b836:	f7ff f86b 	bl	800a910 <vTaskSwitchContext>
	prvTaskExitError();
 800b83a:	f7ff ff4b 	bl	800b6d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3710      	adds	r7, #16
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000e400 	.word	0xe000e400
 800b84c:	200010e4 	.word	0x200010e4
 800b850:	200010e8 	.word	0x200010e8
 800b854:	e000ed20 	.word	0xe000ed20
 800b858:	2000013c 	.word	0x2000013c

0800b85c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	607b      	str	r3, [r7, #4]
}
 800b874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b876:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b4 <vPortEnterCritical+0x58>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3301      	adds	r3, #1
 800b87c:	4a0d      	ldr	r2, [pc, #52]	@ (800b8b4 <vPortEnterCritical+0x58>)
 800b87e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b880:	4b0c      	ldr	r3, [pc, #48]	@ (800b8b4 <vPortEnterCritical+0x58>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d110      	bne.n	800b8aa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b888:	4b0b      	ldr	r3, [pc, #44]	@ (800b8b8 <vPortEnterCritical+0x5c>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00b      	beq.n	800b8aa <vPortEnterCritical+0x4e>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	603b      	str	r3, [r7, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	bf00      	nop
 800b8a8:	e7fd      	b.n	800b8a6 <vPortEnterCritical+0x4a>
	}
}
 800b8aa:	bf00      	nop
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bc80      	pop	{r7}
 800b8b2:	4770      	bx	lr
 800b8b4:	2000013c 	.word	0x2000013c
 800b8b8:	e000ed04 	.word	0xe000ed04

0800b8bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8c2:	4b12      	ldr	r3, [pc, #72]	@ (800b90c <vPortExitCritical+0x50>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10b      	bne.n	800b8e2 <vPortExitCritical+0x26>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	607b      	str	r3, [r7, #4]
}
 800b8dc:	bf00      	nop
 800b8de:	bf00      	nop
 800b8e0:	e7fd      	b.n	800b8de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b90c <vPortExitCritical+0x50>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	4a08      	ldr	r2, [pc, #32]	@ (800b90c <vPortExitCritical+0x50>)
 800b8ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b8ec:	4b07      	ldr	r3, [pc, #28]	@ (800b90c <vPortExitCritical+0x50>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d105      	bne.n	800b900 <vPortExitCritical+0x44>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	f383 8811 	msr	BASEPRI, r3
}
 800b8fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b900:	bf00      	nop
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	bc80      	pop	{r7}
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	2000013c 	.word	0x2000013c

0800b910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b910:	f3ef 8009 	mrs	r0, PSP
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	4b0d      	ldr	r3, [pc, #52]	@ (800b950 <pxCurrentTCBConst>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b920:	6010      	str	r0, [r2, #0]
 800b922:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b926:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b92a:	f380 8811 	msr	BASEPRI, r0
 800b92e:	f7fe ffef 	bl	800a910 <vTaskSwitchContext>
 800b932:	f04f 0000 	mov.w	r0, #0
 800b936:	f380 8811 	msr	BASEPRI, r0
 800b93a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b93e:	6819      	ldr	r1, [r3, #0]
 800b940:	6808      	ldr	r0, [r1, #0]
 800b942:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b946:	f380 8809 	msr	PSP, r0
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	4770      	bx	lr

0800b950 <pxCurrentTCBConst>:
 800b950:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop

0800b958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	607b      	str	r3, [r7, #4]
}
 800b970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b972:	f7fe ff13 	bl	800a79c <xTaskIncrementTick>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <xPortSysTickHandler+0x40>)
 800b97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b982:	601a      	str	r2, [r3, #0]
 800b984:	2300      	movs	r3, #0
 800b986:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	f383 8811 	msr	BASEPRI, r3
}
 800b98e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	e000ed04 	.word	0xe000ed04

0800b99c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9cc <vPortSetupTimerInterrupt+0x30>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <vPortSetupTimerInterrupt+0x34>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b9ac:	4b09      	ldr	r3, [pc, #36]	@ (800b9d4 <vPortSetupTimerInterrupt+0x38>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a09      	ldr	r2, [pc, #36]	@ (800b9d8 <vPortSetupTimerInterrupt+0x3c>)
 800b9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b6:	099b      	lsrs	r3, r3, #6
 800b9b8:	4a08      	ldr	r2, [pc, #32]	@ (800b9dc <vPortSetupTimerInterrupt+0x40>)
 800b9ba:	3b01      	subs	r3, #1
 800b9bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b9be:	4b03      	ldr	r3, [pc, #12]	@ (800b9cc <vPortSetupTimerInterrupt+0x30>)
 800b9c0:	2207      	movs	r2, #7
 800b9c2:	601a      	str	r2, [r3, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bc80      	pop	{r7}
 800b9ca:	4770      	bx	lr
 800b9cc:	e000e010 	.word	0xe000e010
 800b9d0:	e000e018 	.word	0xe000e018
 800b9d4:	20000020 	.word	0x20000020
 800b9d8:	10624dd3 	.word	0x10624dd3
 800b9dc:	e000e014 	.word	0xe000e014

0800b9e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b9e6:	f3ef 8305 	mrs	r3, IPSR
 800b9ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2b0f      	cmp	r3, #15
 800b9f0:	d915      	bls.n	800ba1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b9f2:	4a17      	ldr	r2, [pc, #92]	@ (800ba50 <vPortValidateInterruptPriority+0x70>)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	781b      	ldrb	r3, [r3, #0]
 800b9fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b9fc:	4b15      	ldr	r3, [pc, #84]	@ (800ba54 <vPortValidateInterruptPriority+0x74>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	7afa      	ldrb	r2, [r7, #11]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d20b      	bcs.n	800ba1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	607b      	str	r3, [r7, #4]
}
 800ba18:	bf00      	nop
 800ba1a:	bf00      	nop
 800ba1c:	e7fd      	b.n	800ba1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba58 <vPortValidateInterruptPriority+0x78>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ba26:	4b0d      	ldr	r3, [pc, #52]	@ (800ba5c <vPortValidateInterruptPriority+0x7c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d90b      	bls.n	800ba46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	603b      	str	r3, [r7, #0]
}
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
 800ba44:	e7fd      	b.n	800ba42 <vPortValidateInterruptPriority+0x62>
	}
 800ba46:	bf00      	nop
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bc80      	pop	{r7}
 800ba4e:	4770      	bx	lr
 800ba50:	e000e3f0 	.word	0xe000e3f0
 800ba54:	200010e4 	.word	0x200010e4
 800ba58:	e000ed0c 	.word	0xe000ed0c
 800ba5c:	200010e8 	.word	0x200010e8

0800ba60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b08a      	sub	sp, #40	@ 0x28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ba6c:	f7fe fddc 	bl	800a628 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ba70:	4b5c      	ldr	r3, [pc, #368]	@ (800bbe4 <pvPortMalloc+0x184>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ba78:	f000 f924 	bl	800bcc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ba7c:	4b5a      	ldr	r3, [pc, #360]	@ (800bbe8 <pvPortMalloc+0x188>)
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4013      	ands	r3, r2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f040 8095 	bne.w	800bbb4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d01e      	beq.n	800bace <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ba90:	2208      	movs	r2, #8
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4413      	add	r3, r2
 800ba96:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d015      	beq.n	800bace <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f023 0307 	bic.w	r3, r3, #7
 800baa8:	3308      	adds	r3, #8
 800baaa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f003 0307 	and.w	r3, r3, #7
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00b      	beq.n	800bace <pvPortMalloc+0x6e>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	617b      	str	r3, [r7, #20]
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	e7fd      	b.n	800baca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d06f      	beq.n	800bbb4 <pvPortMalloc+0x154>
 800bad4:	4b45      	ldr	r3, [pc, #276]	@ (800bbec <pvPortMalloc+0x18c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	429a      	cmp	r2, r3
 800badc:	d86a      	bhi.n	800bbb4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bade:	4b44      	ldr	r3, [pc, #272]	@ (800bbf0 <pvPortMalloc+0x190>)
 800bae0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bae2:	4b43      	ldr	r3, [pc, #268]	@ (800bbf0 <pvPortMalloc+0x190>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bae8:	e004      	b.n	800baf4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800baea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800baee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d903      	bls.n	800bb06 <pvPortMalloc+0xa6>
 800bafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d1f1      	bne.n	800baea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb06:	4b37      	ldr	r3, [pc, #220]	@ (800bbe4 <pvPortMalloc+0x184>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d051      	beq.n	800bbb4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2208      	movs	r2, #8
 800bb16:	4413      	add	r3, r2
 800bb18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	1ad2      	subs	r2, r2, r3
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d920      	bls.n	800bb74 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4413      	add	r3, r2
 800bb38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	f003 0307 	and.w	r3, r3, #7
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00b      	beq.n	800bb5c <pvPortMalloc+0xfc>
	__asm volatile
 800bb44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb48:	f383 8811 	msr	BASEPRI, r3
 800bb4c:	f3bf 8f6f 	isb	sy
 800bb50:	f3bf 8f4f 	dsb	sy
 800bb54:	613b      	str	r3, [r7, #16]
}
 800bb56:	bf00      	nop
 800bb58:	bf00      	nop
 800bb5a:	e7fd      	b.n	800bb58 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bb5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	1ad2      	subs	r2, r2, r3
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bb6e:	69b8      	ldr	r0, [r7, #24]
 800bb70:	f000 f90a 	bl	800bd88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bb74:	4b1d      	ldr	r3, [pc, #116]	@ (800bbec <pvPortMalloc+0x18c>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	4a1b      	ldr	r2, [pc, #108]	@ (800bbec <pvPortMalloc+0x18c>)
 800bb80:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bb82:	4b1a      	ldr	r3, [pc, #104]	@ (800bbec <pvPortMalloc+0x18c>)
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	4b1b      	ldr	r3, [pc, #108]	@ (800bbf4 <pvPortMalloc+0x194>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d203      	bcs.n	800bb96 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bb8e:	4b17      	ldr	r3, [pc, #92]	@ (800bbec <pvPortMalloc+0x18c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a18      	ldr	r2, [pc, #96]	@ (800bbf4 <pvPortMalloc+0x194>)
 800bb94:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	685a      	ldr	r2, [r3, #4]
 800bb9a:	4b13      	ldr	r3, [pc, #76]	@ (800bbe8 <pvPortMalloc+0x188>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	431a      	orrs	r2, r3
 800bba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba6:	2200      	movs	r2, #0
 800bba8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bbaa:	4b13      	ldr	r3, [pc, #76]	@ (800bbf8 <pvPortMalloc+0x198>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	4a11      	ldr	r2, [pc, #68]	@ (800bbf8 <pvPortMalloc+0x198>)
 800bbb2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bbb4:	f7fe fd46 	bl	800a644 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	f003 0307 	and.w	r3, r3, #7
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00b      	beq.n	800bbda <pvPortMalloc+0x17a>
	__asm volatile
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	60fb      	str	r3, [r7, #12]
}
 800bbd4:	bf00      	nop
 800bbd6:	bf00      	nop
 800bbd8:	e7fd      	b.n	800bbd6 <pvPortMalloc+0x176>
	return pvReturn;
 800bbda:	69fb      	ldr	r3, [r7, #28]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3728      	adds	r7, #40	@ 0x28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	20001cf4 	.word	0x20001cf4
 800bbe8:	20001d08 	.word	0x20001d08
 800bbec:	20001cf8 	.word	0x20001cf8
 800bbf0:	20001cec 	.word	0x20001cec
 800bbf4:	20001cfc 	.word	0x20001cfc
 800bbf8:	20001d00 	.word	0x20001d00

0800bbfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d04f      	beq.n	800bcae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc0e:	2308      	movs	r3, #8
 800bc10:	425b      	negs	r3, r3
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	4413      	add	r3, r2
 800bc16:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	4b25      	ldr	r3, [pc, #148]	@ (800bcb8 <vPortFree+0xbc>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4013      	ands	r3, r2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10b      	bne.n	800bc42 <vPortFree+0x46>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	60fb      	str	r3, [r7, #12]
}
 800bc3c:	bf00      	nop
 800bc3e:	bf00      	nop
 800bc40:	e7fd      	b.n	800bc3e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00b      	beq.n	800bc62 <vPortFree+0x66>
	__asm volatile
 800bc4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc4e:	f383 8811 	msr	BASEPRI, r3
 800bc52:	f3bf 8f6f 	isb	sy
 800bc56:	f3bf 8f4f 	dsb	sy
 800bc5a:	60bb      	str	r3, [r7, #8]
}
 800bc5c:	bf00      	nop
 800bc5e:	bf00      	nop
 800bc60:	e7fd      	b.n	800bc5e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	4b14      	ldr	r3, [pc, #80]	@ (800bcb8 <vPortFree+0xbc>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d01e      	beq.n	800bcae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d11a      	bne.n	800bcae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bcb8 <vPortFree+0xbc>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	43db      	mvns	r3, r3
 800bc82:	401a      	ands	r2, r3
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bc88:	f7fe fcce 	bl	800a628 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	4b0a      	ldr	r3, [pc, #40]	@ (800bcbc <vPortFree+0xc0>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4413      	add	r3, r2
 800bc96:	4a09      	ldr	r2, [pc, #36]	@ (800bcbc <vPortFree+0xc0>)
 800bc98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bc9a:	6938      	ldr	r0, [r7, #16]
 800bc9c:	f000 f874 	bl	800bd88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bca0:	4b07      	ldr	r3, [pc, #28]	@ (800bcc0 <vPortFree+0xc4>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3301      	adds	r3, #1
 800bca6:	4a06      	ldr	r2, [pc, #24]	@ (800bcc0 <vPortFree+0xc4>)
 800bca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bcaa:	f7fe fccb 	bl	800a644 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcae:	bf00      	nop
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20001d08 	.word	0x20001d08
 800bcbc:	20001cf8 	.word	0x20001cf8
 800bcc0:	20001d04 	.word	0x20001d04

0800bcc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bcca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bcce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bcd0:	4b27      	ldr	r3, [pc, #156]	@ (800bd70 <prvHeapInit+0xac>)
 800bcd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f003 0307 	and.w	r3, r3, #7
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00c      	beq.n	800bcf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3307      	adds	r3, #7
 800bce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f023 0307 	bic.w	r3, r3, #7
 800bcea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	4a1f      	ldr	r2, [pc, #124]	@ (800bd70 <prvHeapInit+0xac>)
 800bcf4:	4413      	add	r3, r2
 800bcf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bcfc:	4a1d      	ldr	r2, [pc, #116]	@ (800bd74 <prvHeapInit+0xb0>)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd02:	4b1c      	ldr	r3, [pc, #112]	@ (800bd74 <prvHeapInit+0xb0>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd10:	2208      	movs	r2, #8
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	1a9b      	subs	r3, r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f023 0307 	bic.w	r3, r3, #7
 800bd1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4a15      	ldr	r2, [pc, #84]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd26:	4b14      	ldr	r3, [pc, #80]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd2e:	4b12      	ldr	r3, [pc, #72]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	1ad2      	subs	r2, r2, r3
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd44:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <prvHeapInit+0xb4>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	4a0a      	ldr	r2, [pc, #40]	@ (800bd7c <prvHeapInit+0xb8>)
 800bd52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	4a09      	ldr	r2, [pc, #36]	@ (800bd80 <prvHeapInit+0xbc>)
 800bd5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd5c:	4b09      	ldr	r3, [pc, #36]	@ (800bd84 <prvHeapInit+0xc0>)
 800bd5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bd62:	601a      	str	r2, [r3, #0]
}
 800bd64:	bf00      	nop
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bc80      	pop	{r7}
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	200010ec 	.word	0x200010ec
 800bd74:	20001cec 	.word	0x20001cec
 800bd78:	20001cf4 	.word	0x20001cf4
 800bd7c:	20001cfc 	.word	0x20001cfc
 800bd80:	20001cf8 	.word	0x20001cf8
 800bd84:	20001d08 	.word	0x20001d08

0800bd88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bd90:	4b27      	ldr	r3, [pc, #156]	@ (800be30 <prvInsertBlockIntoFreeList+0xa8>)
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	e002      	b.n	800bd9c <prvInsertBlockIntoFreeList+0x14>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	60fb      	str	r3, [r7, #12]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d8f7      	bhi.n	800bd96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d108      	bne.n	800bdca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	441a      	add	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	441a      	add	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d118      	bne.n	800be10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	4b14      	ldr	r3, [pc, #80]	@ (800be34 <prvInsertBlockIntoFreeList+0xac>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d00d      	beq.n	800be06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685a      	ldr	r2, [r3, #4]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	441a      	add	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	e008      	b.n	800be18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be06:	4b0b      	ldr	r3, [pc, #44]	@ (800be34 <prvInsertBlockIntoFreeList+0xac>)
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	e003      	b.n	800be18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d002      	beq.n	800be26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be26:	bf00      	nop
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr
 800be30:	20001cec 	.word	0x20001cec
 800be34:	20001cf4 	.word	0x20001cf4

0800be38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800be3c:	2200      	movs	r2, #0
 800be3e:	4912      	ldr	r1, [pc, #72]	@ (800be88 <MX_USB_DEVICE_Init+0x50>)
 800be40:	4812      	ldr	r0, [pc, #72]	@ (800be8c <MX_USB_DEVICE_Init+0x54>)
 800be42:	f7fc f9e2 	bl	800820a <USBD_Init>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800be4c:	f7f5 f8ec 	bl	8001028 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800be50:	490f      	ldr	r1, [pc, #60]	@ (800be90 <MX_USB_DEVICE_Init+0x58>)
 800be52:	480e      	ldr	r0, [pc, #56]	@ (800be8c <MX_USB_DEVICE_Init+0x54>)
 800be54:	f7fc fa04 	bl	8008260 <USBD_RegisterClass>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800be5e:	f7f5 f8e3 	bl	8001028 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800be62:	490c      	ldr	r1, [pc, #48]	@ (800be94 <MX_USB_DEVICE_Init+0x5c>)
 800be64:	4809      	ldr	r0, [pc, #36]	@ (800be8c <MX_USB_DEVICE_Init+0x54>)
 800be66:	f7fc f935 	bl	80080d4 <USBD_CDC_RegisterInterface>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d001      	beq.n	800be74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800be70:	f7f5 f8da 	bl	8001028 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800be74:	4805      	ldr	r0, [pc, #20]	@ (800be8c <MX_USB_DEVICE_Init+0x54>)
 800be76:	f7fc fa0c 	bl	8008292 <USBD_Start>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800be80:	f7f5 f8d2 	bl	8001028 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800be84:	bf00      	nop
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20000150 	.word	0x20000150
 800be8c:	20001d0c 	.word	0x20001d0c
 800be90:	20000038 	.word	0x20000038
 800be94:	20000140 	.word	0x20000140

0800be98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800be9c:	2200      	movs	r2, #0
 800be9e:	4905      	ldr	r1, [pc, #20]	@ (800beb4 <CDC_Init_FS+0x1c>)
 800bea0:	4805      	ldr	r0, [pc, #20]	@ (800beb8 <CDC_Init_FS+0x20>)
 800bea2:	f7fc f92d 	bl	8008100 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bea6:	4905      	ldr	r1, [pc, #20]	@ (800bebc <CDC_Init_FS+0x24>)
 800bea8:	4803      	ldr	r0, [pc, #12]	@ (800beb8 <CDC_Init_FS+0x20>)
 800beaa:	f7fc f942 	bl	8008132 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800beae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	200023d0 	.word	0x200023d0
 800beb8:	20001d0c 	.word	0x20001d0c
 800bebc:	20001fd0 	.word	0x20001fd0

0800bec0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bec0:	b480      	push	{r7}
 800bec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bec4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	46bd      	mov	sp, r7
 800beca:	bc80      	pop	{r7}
 800becc:	4770      	bx	lr
	...

0800bed0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	4603      	mov	r3, r0
 800bed8:	6039      	str	r1, [r7, #0]
 800beda:	71fb      	strb	r3, [r7, #7]
 800bedc:	4613      	mov	r3, r2
 800bede:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bee0:	79fb      	ldrb	r3, [r7, #7]
 800bee2:	2b23      	cmp	r3, #35	@ 0x23
 800bee4:	d84a      	bhi.n	800bf7c <CDC_Control_FS+0xac>
 800bee6:	a201      	add	r2, pc, #4	@ (adr r2, 800beec <CDC_Control_FS+0x1c>)
 800bee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beec:	0800bf7d 	.word	0x0800bf7d
 800bef0:	0800bf7d 	.word	0x0800bf7d
 800bef4:	0800bf7d 	.word	0x0800bf7d
 800bef8:	0800bf7d 	.word	0x0800bf7d
 800befc:	0800bf7d 	.word	0x0800bf7d
 800bf00:	0800bf7d 	.word	0x0800bf7d
 800bf04:	0800bf7d 	.word	0x0800bf7d
 800bf08:	0800bf7d 	.word	0x0800bf7d
 800bf0c:	0800bf7d 	.word	0x0800bf7d
 800bf10:	0800bf7d 	.word	0x0800bf7d
 800bf14:	0800bf7d 	.word	0x0800bf7d
 800bf18:	0800bf7d 	.word	0x0800bf7d
 800bf1c:	0800bf7d 	.word	0x0800bf7d
 800bf20:	0800bf7d 	.word	0x0800bf7d
 800bf24:	0800bf7d 	.word	0x0800bf7d
 800bf28:	0800bf7d 	.word	0x0800bf7d
 800bf2c:	0800bf7d 	.word	0x0800bf7d
 800bf30:	0800bf7d 	.word	0x0800bf7d
 800bf34:	0800bf7d 	.word	0x0800bf7d
 800bf38:	0800bf7d 	.word	0x0800bf7d
 800bf3c:	0800bf7d 	.word	0x0800bf7d
 800bf40:	0800bf7d 	.word	0x0800bf7d
 800bf44:	0800bf7d 	.word	0x0800bf7d
 800bf48:	0800bf7d 	.word	0x0800bf7d
 800bf4c:	0800bf7d 	.word	0x0800bf7d
 800bf50:	0800bf7d 	.word	0x0800bf7d
 800bf54:	0800bf7d 	.word	0x0800bf7d
 800bf58:	0800bf7d 	.word	0x0800bf7d
 800bf5c:	0800bf7d 	.word	0x0800bf7d
 800bf60:	0800bf7d 	.word	0x0800bf7d
 800bf64:	0800bf7d 	.word	0x0800bf7d
 800bf68:	0800bf7d 	.word	0x0800bf7d
 800bf6c:	0800bf7d 	.word	0x0800bf7d
 800bf70:	0800bf7d 	.word	0x0800bf7d
 800bf74:	0800bf7d 	.word	0x0800bf7d
 800bf78:	0800bf7d 	.word	0x0800bf7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bf7c:	bf00      	nop
  }

  return (USBD_OK);
 800bf7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bc80      	pop	{r7}
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop

0800bf8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Gọi callback người dùng để xử lý dữ liệu nhận

	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	4808      	ldr	r0, [pc, #32]	@ (800bfbc <CDC_Receive_FS+0x30>)
 800bf9a:	f7fc f8ca 	bl	8008132 <USBD_CDC_SetRxBuffer>
	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bf9e:	4807      	ldr	r0, [pc, #28]	@ (800bfbc <CDC_Receive_FS+0x30>)
 800bfa0:	f7fc f909 	bl	80081b6 <USBD_CDC_ReceivePacket>
	    CDC_ReceiveCallback(Buf, *Len);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f7f4 fda8 	bl	8000b00 <CDC_ReceiveCallback>
	    return (USBD_OK);
 800bfb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20001d0c 	.word	0x20001d0c

0800bfc0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	460b      	mov	r3, r1
 800bfca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	@ (800c008 <CDC_Transmit_FS+0x48>)
 800bfd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e00b      	b.n	800bffe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bfe6:	887b      	ldrh	r3, [r7, #2]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6879      	ldr	r1, [r7, #4]
 800bfec:	4806      	ldr	r0, [pc, #24]	@ (800c008 <CDC_Transmit_FS+0x48>)
 800bfee:	f7fc f887 	bl	8008100 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bff2:	4805      	ldr	r0, [pc, #20]	@ (800c008 <CDC_Transmit_FS+0x48>)
 800bff4:	f7fc f8b0 	bl	8008158 <USBD_CDC_TransmitPacket>
 800bff8:	4603      	mov	r3, r0
 800bffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bffc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3710      	adds	r7, #16
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	20001d0c 	.word	0x20001d0c

0800c00c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	6039      	str	r1, [r7, #0]
 800c016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	2212      	movs	r2, #18
 800c01c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c01e:	4b03      	ldr	r3, [pc, #12]	@ (800c02c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	bc80      	pop	{r7}
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	2000016c 	.word	0x2000016c

0800c030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	6039      	str	r1, [r7, #0]
 800c03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	2204      	movs	r2, #4
 800c040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c042:	4b03      	ldr	r3, [pc, #12]	@ (800c050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c044:	4618      	mov	r0, r3
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	bc80      	pop	{r7}
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	20000180 	.word	0x20000180

0800c054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	4603      	mov	r3, r0
 800c05c:	6039      	str	r1, [r7, #0]
 800c05e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c060:	79fb      	ldrb	r3, [r7, #7]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d105      	bne.n	800c072 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	4907      	ldr	r1, [pc, #28]	@ (800c088 <USBD_FS_ProductStrDescriptor+0x34>)
 800c06a:	4808      	ldr	r0, [pc, #32]	@ (800c08c <USBD_FS_ProductStrDescriptor+0x38>)
 800c06c:	f7fd f887 	bl	800917e <USBD_GetString>
 800c070:	e004      	b.n	800c07c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	4904      	ldr	r1, [pc, #16]	@ (800c088 <USBD_FS_ProductStrDescriptor+0x34>)
 800c076:	4805      	ldr	r0, [pc, #20]	@ (800c08c <USBD_FS_ProductStrDescriptor+0x38>)
 800c078:	f7fd f881 	bl	800917e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	200027d0 	.word	0x200027d0
 800c08c:	0800d864 	.word	0x0800d864

0800c090 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	6039      	str	r1, [r7, #0]
 800c09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	4904      	ldr	r1, [pc, #16]	@ (800c0b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c0a0:	4804      	ldr	r0, [pc, #16]	@ (800c0b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c0a2:	f7fd f86c 	bl	800917e <USBD_GetString>
  return USBD_StrDesc;
 800c0a6:	4b02      	ldr	r3, [pc, #8]	@ (800c0b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	200027d0 	.word	0x200027d0
 800c0b4:	0800d87c 	.word	0x0800d87c

0800c0b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	4603      	mov	r3, r0
 800c0c0:	6039      	str	r1, [r7, #0]
 800c0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	221a      	movs	r2, #26
 800c0c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c0ca:	f000 f843 	bl	800c154 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c0ce:	4b02      	ldr	r3, [pc, #8]	@ (800c0d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	20000184 	.word	0x20000184

0800c0dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	6039      	str	r1, [r7, #0]
 800c0e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c0e8:	79fb      	ldrb	r3, [r7, #7]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d105      	bne.n	800c0fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	4907      	ldr	r1, [pc, #28]	@ (800c110 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c0f2:	4808      	ldr	r0, [pc, #32]	@ (800c114 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c0f4:	f7fd f843 	bl	800917e <USBD_GetString>
 800c0f8:	e004      	b.n	800c104 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	4904      	ldr	r1, [pc, #16]	@ (800c110 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c0fe:	4805      	ldr	r0, [pc, #20]	@ (800c114 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c100:	f7fd f83d 	bl	800917e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c104:	4b02      	ldr	r3, [pc, #8]	@ (800c110 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	200027d0 	.word	0x200027d0
 800c114:	0800d890 	.word	0x0800d890

0800c118 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	4603      	mov	r3, r0
 800c120:	6039      	str	r1, [r7, #0]
 800c122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c124:	79fb      	ldrb	r3, [r7, #7]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d105      	bne.n	800c136 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	4907      	ldr	r1, [pc, #28]	@ (800c14c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c12e:	4808      	ldr	r0, [pc, #32]	@ (800c150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c130:	f7fd f825 	bl	800917e <USBD_GetString>
 800c134:	e004      	b.n	800c140 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	4904      	ldr	r1, [pc, #16]	@ (800c14c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c13a:	4805      	ldr	r0, [pc, #20]	@ (800c150 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c13c:	f7fd f81f 	bl	800917e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c140:	4b02      	ldr	r3, [pc, #8]	@ (800c14c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	200027d0 	.word	0x200027d0
 800c150:	0800d89c 	.word	0x0800d89c

0800c154 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c15a:	4b0f      	ldr	r3, [pc, #60]	@ (800c198 <Get_SerialNum+0x44>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c160:	4b0e      	ldr	r3, [pc, #56]	@ (800c19c <Get_SerialNum+0x48>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c166:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a0 <Get_SerialNum+0x4c>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4413      	add	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d009      	beq.n	800c18e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c17a:	2208      	movs	r2, #8
 800c17c:	4909      	ldr	r1, [pc, #36]	@ (800c1a4 <Get_SerialNum+0x50>)
 800c17e:	68f8      	ldr	r0, [r7, #12]
 800c180:	f000 f814 	bl	800c1ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c184:	2204      	movs	r2, #4
 800c186:	4908      	ldr	r1, [pc, #32]	@ (800c1a8 <Get_SerialNum+0x54>)
 800c188:	68b8      	ldr	r0, [r7, #8]
 800c18a:	f000 f80f 	bl	800c1ac <IntToUnicode>
  }
}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	1ffff7e8 	.word	0x1ffff7e8
 800c19c:	1ffff7ec 	.word	0x1ffff7ec
 800c1a0:	1ffff7f0 	.word	0x1ffff7f0
 800c1a4:	20000186 	.word	0x20000186
 800c1a8:	20000196 	.word	0x20000196

0800c1ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c1ac:	b480      	push	{r7}
 800c1ae:	b087      	sub	sp, #28
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c1be:	2300      	movs	r3, #0
 800c1c0:	75fb      	strb	r3, [r7, #23]
 800c1c2:	e027      	b.n	800c214 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	0f1b      	lsrs	r3, r3, #28
 800c1c8:	2b09      	cmp	r3, #9
 800c1ca:	d80b      	bhi.n	800c1e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	0f1b      	lsrs	r3, r3, #28
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	440b      	add	r3, r1
 800c1dc:	3230      	adds	r2, #48	@ 0x30
 800c1de:	b2d2      	uxtb	r2, r2
 800c1e0:	701a      	strb	r2, [r3, #0]
 800c1e2:	e00a      	b.n	800c1fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	0f1b      	lsrs	r3, r3, #28
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3237      	adds	r2, #55	@ 0x37
 800c1f6:	b2d2      	uxtb	r2, r2
 800c1f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	011b      	lsls	r3, r3, #4
 800c1fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c200:	7dfb      	ldrb	r3, [r7, #23]
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	3301      	adds	r3, #1
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	4413      	add	r3, r2
 800c20a:	2200      	movs	r2, #0
 800c20c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	3301      	adds	r3, #1
 800c212:	75fb      	strb	r3, [r7, #23]
 800c214:	7dfa      	ldrb	r2, [r7, #23]
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d3d3      	bcc.n	800c1c4 <IntToUnicode+0x18>
  }
}
 800c21c:	bf00      	nop
 800c21e:	bf00      	nop
 800c220:	371c      	adds	r7, #28
 800c222:	46bd      	mov	sp, r7
 800c224:	bc80      	pop	{r7}
 800c226:	4770      	bx	lr

0800c228 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a0d      	ldr	r2, [pc, #52]	@ (800c26c <HAL_PCD_MspInit+0x44>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d113      	bne.n	800c262 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c23a:	4b0d      	ldr	r3, [pc, #52]	@ (800c270 <HAL_PCD_MspInit+0x48>)
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	4a0c      	ldr	r2, [pc, #48]	@ (800c270 <HAL_PCD_MspInit+0x48>)
 800c240:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c244:	61d3      	str	r3, [r2, #28]
 800c246:	4b0a      	ldr	r3, [pc, #40]	@ (800c270 <HAL_PCD_MspInit+0x48>)
 800c248:	69db      	ldr	r3, [r3, #28]
 800c24a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800c252:	2200      	movs	r2, #0
 800c254:	2105      	movs	r1, #5
 800c256:	2014      	movs	r0, #20
 800c258:	f7f5 f9d9 	bl	800160e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c25c:	2014      	movs	r0, #20
 800c25e:	f7f5 f9f2 	bl	8001646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c262:	bf00      	nop
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	40005c00 	.word	0x40005c00
 800c270:	40021000 	.word	0x40021000

0800c274 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c288:	4619      	mov	r1, r3
 800c28a:	4610      	mov	r0, r2
 800c28c:	f7fc f849 	bl	8008322 <USBD_LL_SetupStage>
}
 800c290:	bf00      	nop
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c2aa:	78fa      	ldrb	r2, [r7, #3]
 800c2ac:	6879      	ldr	r1, [r7, #4]
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	00db      	lsls	r3, r3, #3
 800c2b6:	440b      	add	r3, r1
 800c2b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	78fb      	ldrb	r3, [r7, #3]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	f7fc f87b 	bl	80083bc <USBD_LL_DataOutStage>
}
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b082      	sub	sp, #8
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800c2e0:	78fa      	ldrb	r2, [r7, #3]
 800c2e2:	6879      	ldr	r1, [r7, #4]
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	4413      	add	r3, r2
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	440b      	add	r3, r1
 800c2ee:	3324      	adds	r3, #36	@ 0x24
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	78fb      	ldrb	r3, [r7, #3]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	f7fc f8d2 	bl	800849e <USBD_LL_DataInStage>
}
 800c2fa:	bf00      	nop
 800c2fc:	3708      	adds	r7, #8
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b082      	sub	sp, #8
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c310:	4618      	mov	r0, r3
 800c312:	f7fc f9e2 	bl	80086da <USBD_LL_SOF>
}
 800c316:	bf00      	nop
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b084      	sub	sp, #16
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c326:	2301      	movs	r3, #1
 800c328:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	799b      	ldrb	r3, [r3, #6]
 800c32e:	2b02      	cmp	r3, #2
 800c330:	d001      	beq.n	800c336 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c332:	f7f4 fe79 	bl	8001028 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c33c:	7bfa      	ldrb	r2, [r7, #15]
 800c33e:	4611      	mov	r1, r2
 800c340:	4618      	mov	r0, r3
 800c342:	f7fc f992 	bl	800866a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fc f94b 	bl	80085e8 <USBD_LL_Reset>
}
 800c352:	bf00      	nop
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
	...

0800c35c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7fc f98c 	bl	8008688 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7a9b      	ldrb	r3, [r3, #10]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d005      	beq.n	800c384 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c378:	4b04      	ldr	r3, [pc, #16]	@ (800c38c <HAL_PCD_SuspendCallback+0x30>)
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	4a03      	ldr	r2, [pc, #12]	@ (800c38c <HAL_PCD_SuspendCallback+0x30>)
 800c37e:	f043 0306 	orr.w	r3, r3, #6
 800c382:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	e000ed00 	.word	0xe000ed00

0800c390 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fc f986 	bl	80086b0 <USBD_LL_Resume>
}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c3b4:	4a28      	ldr	r2, [pc, #160]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a26      	ldr	r2, [pc, #152]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3c0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c3c4:	4b24      	ldr	r3, [pc, #144]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3c6:	4a25      	ldr	r2, [pc, #148]	@ (800c45c <USBD_LL_Init+0xb0>)
 800c3c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c3ca:	4b23      	ldr	r3, [pc, #140]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c3d0:	4b21      	ldr	r3, [pc, #132]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c3d6:	4b20      	ldr	r3, [pc, #128]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c3dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c3e2:	4b1d      	ldr	r3, [pc, #116]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c3e8:	481b      	ldr	r0, [pc, #108]	@ (800c458 <USBD_LL_Init+0xac>)
 800c3ea:	f7f6 fc10 	bl	8002c0e <HAL_PCD_Init>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d001      	beq.n	800c3f8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c3f4:	f7f4 fe18 	bl	8001028 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c3fe:	2318      	movs	r3, #24
 800c400:	2200      	movs	r2, #0
 800c402:	2100      	movs	r1, #0
 800c404:	f7f8 f921 	bl	800464a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c40e:	2358      	movs	r3, #88	@ 0x58
 800c410:	2200      	movs	r2, #0
 800c412:	2180      	movs	r1, #128	@ 0x80
 800c414:	f7f8 f919 	bl	800464a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c41e:	23c0      	movs	r3, #192	@ 0xc0
 800c420:	2200      	movs	r2, #0
 800c422:	2181      	movs	r1, #129	@ 0x81
 800c424:	f7f8 f911 	bl	800464a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c42e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800c432:	2200      	movs	r2, #0
 800c434:	2101      	movs	r1, #1
 800c436:	f7f8 f908 	bl	800464a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c444:	2200      	movs	r2, #0
 800c446:	2182      	movs	r1, #130	@ 0x82
 800c448:	f7f8 f8ff 	bl	800464a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	200029d0 	.word	0x200029d0
 800c45c:	40005c00 	.word	0x40005c00

0800c460 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c468:	2300      	movs	r3, #0
 800c46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c476:	4618      	mov	r0, r3
 800c478:	f7f6 fcbf 	bl	8002dfa <HAL_PCD_Start>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c480:	7bfb      	ldrb	r3, [r7, #15]
 800c482:	4618      	mov	r0, r3
 800c484:	f000 f94e 	bl	800c724 <USBD_Get_USB_Status>
 800c488:	4603      	mov	r3, r0
 800c48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b084      	sub	sp, #16
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	4608      	mov	r0, r1
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	70fb      	strb	r3, [r7, #3]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	70bb      	strb	r3, [r7, #2]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c4be:	78bb      	ldrb	r3, [r7, #2]
 800c4c0:	883a      	ldrh	r2, [r7, #0]
 800c4c2:	78f9      	ldrb	r1, [r7, #3]
 800c4c4:	f7f6 fe13 	bl	80030ee <HAL_PCD_EP_Open>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f000 f928 	bl	800c724 <USBD_Get_USB_Status>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c4fc:	78fa      	ldrb	r2, [r7, #3]
 800c4fe:	4611      	mov	r1, r2
 800c500:	4618      	mov	r0, r3
 800c502:	f7f6 fe51 	bl	80031a8 <HAL_PCD_EP_Close>
 800c506:	4603      	mov	r3, r0
 800c508:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c50a:	7bfb      	ldrb	r3, [r7, #15]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 f909 	bl	800c724 <USBD_Get_USB_Status>
 800c512:	4603      	mov	r3, r0
 800c514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c516:	7bbb      	ldrb	r3, [r7, #14]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3710      	adds	r7, #16
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	460b      	mov	r3, r1
 800c52a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c530:	2300      	movs	r3, #0
 800c532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c53a:	78fa      	ldrb	r2, [r7, #3]
 800c53c:	4611      	mov	r1, r2
 800c53e:	4618      	mov	r0, r3
 800c540:	f7f6 fef9 	bl	8003336 <HAL_PCD_EP_SetStall>
 800c544:	4603      	mov	r3, r0
 800c546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f000 f8ea 	bl	800c724 <USBD_Get_USB_Status>
 800c550:	4603      	mov	r3, r0
 800c552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c554:	7bbb      	ldrb	r3, [r7, #14]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	460b      	mov	r3, r1
 800c568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c578:	78fa      	ldrb	r2, [r7, #3]
 800c57a:	4611      	mov	r1, r2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7f6 ff3a 	bl	80033f6 <HAL_PCD_EP_ClrStall>
 800c582:	4603      	mov	r3, r0
 800c584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c586:	7bfb      	ldrb	r3, [r7, #15]
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 f8cb 	bl	800c724 <USBD_Get_USB_Status>
 800c58e:	4603      	mov	r3, r0
 800c590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c592:	7bbb      	ldrb	r3, [r7, #14]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c5ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c5b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	da0b      	bge.n	800c5d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5be:	68f9      	ldr	r1, [r7, #12]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	00db      	lsls	r3, r3, #3
 800c5c8:	440b      	add	r3, r1
 800c5ca:	3312      	adds	r3, #18
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	e00b      	b.n	800c5e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5d6:	68f9      	ldr	r1, [r7, #12]
 800c5d8:	4613      	mov	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4413      	add	r3, r2
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	440b      	add	r3, r1
 800c5e2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800c5e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bc80      	pop	{r7}
 800c5f0:	4770      	bx	lr

0800c5f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5fe:	2300      	movs	r3, #0
 800c600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c60c:	78fa      	ldrb	r2, [r7, #3]
 800c60e:	4611      	mov	r1, r2
 800c610:	4618      	mov	r0, r3
 800c612:	f7f6 fd48 	bl	80030a6 <HAL_PCD_SetAddress>
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 f881 	bl	800c724 <USBD_Get_USB_Status>
 800c622:	4603      	mov	r3, r0
 800c624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c626:	7bbb      	ldrb	r3, [r7, #14]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	607a      	str	r2, [r7, #4]
 800c63a:	461a      	mov	r2, r3
 800c63c:	460b      	mov	r3, r1
 800c63e:	72fb      	strb	r3, [r7, #11]
 800c640:	4613      	mov	r3, r2
 800c642:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c648:	2300      	movs	r3, #0
 800c64a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c652:	893b      	ldrh	r3, [r7, #8]
 800c654:	7af9      	ldrb	r1, [r7, #11]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	f7f6 fe36 	bl	80032c8 <HAL_PCD_EP_Transmit>
 800c65c:	4603      	mov	r3, r0
 800c65e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c660:	7dfb      	ldrb	r3, [r7, #23]
 800c662:	4618      	mov	r0, r3
 800c664:	f000 f85e 	bl	800c724 <USBD_Get_USB_Status>
 800c668:	4603      	mov	r3, r0
 800c66a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c66c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b086      	sub	sp, #24
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	60f8      	str	r0, [r7, #12]
 800c67e:	607a      	str	r2, [r7, #4]
 800c680:	461a      	mov	r2, r3
 800c682:	460b      	mov	r3, r1
 800c684:	72fb      	strb	r3, [r7, #11]
 800c686:	4613      	mov	r3, r2
 800c688:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800c698:	893b      	ldrh	r3, [r7, #8]
 800c69a:	7af9      	ldrb	r1, [r7, #11]
 800c69c:	687a      	ldr	r2, [r7, #4]
 800c69e:	f7f6 fdcb 	bl	8003238 <HAL_PCD_EP_Receive>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 f83b 	bl	800c724 <USBD_Get_USB_Status>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800c6ce:	78fa      	ldrb	r2, [r7, #3]
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7f6 fde1 	bl	800329a <HAL_PCD_EP_GetRxCount>
 800c6d8:	4603      	mov	r3, r0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c6ec:	4b02      	ldr	r3, [pc, #8]	@ (800c6f8 <USBD_static_malloc+0x14>)
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr
 800c6f8:	20002ca8 	.word	0x20002ca8

0800c6fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]

}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	bc80      	pop	{r7}
 800c70c:	4770      	bx	lr

0800c70e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c70e:	b480      	push	{r7}
 800c710:	b083      	sub	sp, #12
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	460b      	mov	r3, r1
 800c718:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c71a:	bf00      	nop
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	bc80      	pop	{r7}
 800c722:	4770      	bx	lr

0800c724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c724:	b480      	push	{r7}
 800c726:	b085      	sub	sp, #20
 800c728:	af00      	add	r7, sp, #0
 800c72a:	4603      	mov	r3, r0
 800c72c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c732:	79fb      	ldrb	r3, [r7, #7]
 800c734:	2b03      	cmp	r3, #3
 800c736:	d817      	bhi.n	800c768 <USBD_Get_USB_Status+0x44>
 800c738:	a201      	add	r2, pc, #4	@ (adr r2, 800c740 <USBD_Get_USB_Status+0x1c>)
 800c73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73e:	bf00      	nop
 800c740:	0800c751 	.word	0x0800c751
 800c744:	0800c757 	.word	0x0800c757
 800c748:	0800c75d 	.word	0x0800c75d
 800c74c:	0800c763 	.word	0x0800c763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c750:	2300      	movs	r3, #0
 800c752:	73fb      	strb	r3, [r7, #15]
    break;
 800c754:	e00b      	b.n	800c76e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c756:	2302      	movs	r3, #2
 800c758:	73fb      	strb	r3, [r7, #15]
    break;
 800c75a:	e008      	b.n	800c76e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
    break;
 800c760:	e005      	b.n	800c76e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c762:	2302      	movs	r3, #2
 800c764:	73fb      	strb	r3, [r7, #15]
    break;
 800c766:	e002      	b.n	800c76e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c768:	2302      	movs	r3, #2
 800c76a:	73fb      	strb	r3, [r7, #15]
    break;
 800c76c:	bf00      	nop
  }
  return usb_status;
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c770:	4618      	mov	r0, r3
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	bc80      	pop	{r7}
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop

0800c77c <std>:
 800c77c:	2300      	movs	r3, #0
 800c77e:	b510      	push	{r4, lr}
 800c780:	4604      	mov	r4, r0
 800c782:	e9c0 3300 	strd	r3, r3, [r0]
 800c786:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c78a:	6083      	str	r3, [r0, #8]
 800c78c:	8181      	strh	r1, [r0, #12]
 800c78e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c790:	81c2      	strh	r2, [r0, #14]
 800c792:	6183      	str	r3, [r0, #24]
 800c794:	4619      	mov	r1, r3
 800c796:	2208      	movs	r2, #8
 800c798:	305c      	adds	r0, #92	@ 0x5c
 800c79a:	f000 f9f9 	bl	800cb90 <memset>
 800c79e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7d4 <std+0x58>)
 800c7a0:	6224      	str	r4, [r4, #32]
 800c7a2:	6263      	str	r3, [r4, #36]	@ 0x24
 800c7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c7d8 <std+0x5c>)
 800c7a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800c7dc <std+0x60>)
 800c7aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c7ac:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e0 <std+0x64>)
 800c7ae:	6323      	str	r3, [r4, #48]	@ 0x30
 800c7b0:	4b0c      	ldr	r3, [pc, #48]	@ (800c7e4 <std+0x68>)
 800c7b2:	429c      	cmp	r4, r3
 800c7b4:	d006      	beq.n	800c7c4 <std+0x48>
 800c7b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c7ba:	4294      	cmp	r4, r2
 800c7bc:	d002      	beq.n	800c7c4 <std+0x48>
 800c7be:	33d0      	adds	r3, #208	@ 0xd0
 800c7c0:	429c      	cmp	r4, r3
 800c7c2:	d105      	bne.n	800c7d0 <std+0x54>
 800c7c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c7c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7cc:	f000 baae 	b.w	800cd2c <__retarget_lock_init_recursive>
 800c7d0:	bd10      	pop	{r4, pc}
 800c7d2:	bf00      	nop
 800c7d4:	0800c9e1 	.word	0x0800c9e1
 800c7d8:	0800ca03 	.word	0x0800ca03
 800c7dc:	0800ca3b 	.word	0x0800ca3b
 800c7e0:	0800ca5f 	.word	0x0800ca5f
 800c7e4:	20002ec8 	.word	0x20002ec8

0800c7e8 <stdio_exit_handler>:
 800c7e8:	4a02      	ldr	r2, [pc, #8]	@ (800c7f4 <stdio_exit_handler+0xc>)
 800c7ea:	4903      	ldr	r1, [pc, #12]	@ (800c7f8 <stdio_exit_handler+0x10>)
 800c7ec:	4803      	ldr	r0, [pc, #12]	@ (800c7fc <stdio_exit_handler+0x14>)
 800c7ee:	f000 b869 	b.w	800c8c4 <_fwalk_sglue>
 800c7f2:	bf00      	nop
 800c7f4:	200001a0 	.word	0x200001a0
 800c7f8:	0800d5e1 	.word	0x0800d5e1
 800c7fc:	200001b0 	.word	0x200001b0

0800c800 <cleanup_stdio>:
 800c800:	6841      	ldr	r1, [r0, #4]
 800c802:	4b0c      	ldr	r3, [pc, #48]	@ (800c834 <cleanup_stdio+0x34>)
 800c804:	b510      	push	{r4, lr}
 800c806:	4299      	cmp	r1, r3
 800c808:	4604      	mov	r4, r0
 800c80a:	d001      	beq.n	800c810 <cleanup_stdio+0x10>
 800c80c:	f000 fee8 	bl	800d5e0 <_fflush_r>
 800c810:	68a1      	ldr	r1, [r4, #8]
 800c812:	4b09      	ldr	r3, [pc, #36]	@ (800c838 <cleanup_stdio+0x38>)
 800c814:	4299      	cmp	r1, r3
 800c816:	d002      	beq.n	800c81e <cleanup_stdio+0x1e>
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fee1 	bl	800d5e0 <_fflush_r>
 800c81e:	68e1      	ldr	r1, [r4, #12]
 800c820:	4b06      	ldr	r3, [pc, #24]	@ (800c83c <cleanup_stdio+0x3c>)
 800c822:	4299      	cmp	r1, r3
 800c824:	d004      	beq.n	800c830 <cleanup_stdio+0x30>
 800c826:	4620      	mov	r0, r4
 800c828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c82c:	f000 bed8 	b.w	800d5e0 <_fflush_r>
 800c830:	bd10      	pop	{r4, pc}
 800c832:	bf00      	nop
 800c834:	20002ec8 	.word	0x20002ec8
 800c838:	20002f30 	.word	0x20002f30
 800c83c:	20002f98 	.word	0x20002f98

0800c840 <global_stdio_init.part.0>:
 800c840:	b510      	push	{r4, lr}
 800c842:	4b0b      	ldr	r3, [pc, #44]	@ (800c870 <global_stdio_init.part.0+0x30>)
 800c844:	4c0b      	ldr	r4, [pc, #44]	@ (800c874 <global_stdio_init.part.0+0x34>)
 800c846:	4a0c      	ldr	r2, [pc, #48]	@ (800c878 <global_stdio_init.part.0+0x38>)
 800c848:	4620      	mov	r0, r4
 800c84a:	601a      	str	r2, [r3, #0]
 800c84c:	2104      	movs	r1, #4
 800c84e:	2200      	movs	r2, #0
 800c850:	f7ff ff94 	bl	800c77c <std>
 800c854:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c858:	2201      	movs	r2, #1
 800c85a:	2109      	movs	r1, #9
 800c85c:	f7ff ff8e 	bl	800c77c <std>
 800c860:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c864:	2202      	movs	r2, #2
 800c866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c86a:	2112      	movs	r1, #18
 800c86c:	f7ff bf86 	b.w	800c77c <std>
 800c870:	20003000 	.word	0x20003000
 800c874:	20002ec8 	.word	0x20002ec8
 800c878:	0800c7e9 	.word	0x0800c7e9

0800c87c <__sfp_lock_acquire>:
 800c87c:	4801      	ldr	r0, [pc, #4]	@ (800c884 <__sfp_lock_acquire+0x8>)
 800c87e:	f000 ba56 	b.w	800cd2e <__retarget_lock_acquire_recursive>
 800c882:	bf00      	nop
 800c884:	20003009 	.word	0x20003009

0800c888 <__sfp_lock_release>:
 800c888:	4801      	ldr	r0, [pc, #4]	@ (800c890 <__sfp_lock_release+0x8>)
 800c88a:	f000 ba51 	b.w	800cd30 <__retarget_lock_release_recursive>
 800c88e:	bf00      	nop
 800c890:	20003009 	.word	0x20003009

0800c894 <__sinit>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4604      	mov	r4, r0
 800c898:	f7ff fff0 	bl	800c87c <__sfp_lock_acquire>
 800c89c:	6a23      	ldr	r3, [r4, #32]
 800c89e:	b11b      	cbz	r3, 800c8a8 <__sinit+0x14>
 800c8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a4:	f7ff bff0 	b.w	800c888 <__sfp_lock_release>
 800c8a8:	4b04      	ldr	r3, [pc, #16]	@ (800c8bc <__sinit+0x28>)
 800c8aa:	6223      	str	r3, [r4, #32]
 800c8ac:	4b04      	ldr	r3, [pc, #16]	@ (800c8c0 <__sinit+0x2c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1f5      	bne.n	800c8a0 <__sinit+0xc>
 800c8b4:	f7ff ffc4 	bl	800c840 <global_stdio_init.part.0>
 800c8b8:	e7f2      	b.n	800c8a0 <__sinit+0xc>
 800c8ba:	bf00      	nop
 800c8bc:	0800c801 	.word	0x0800c801
 800c8c0:	20003000 	.word	0x20003000

0800c8c4 <_fwalk_sglue>:
 800c8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	4607      	mov	r7, r0
 800c8ca:	4688      	mov	r8, r1
 800c8cc:	4614      	mov	r4, r2
 800c8ce:	2600      	movs	r6, #0
 800c8d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8d4:	f1b9 0901 	subs.w	r9, r9, #1
 800c8d8:	d505      	bpl.n	800c8e6 <_fwalk_sglue+0x22>
 800c8da:	6824      	ldr	r4, [r4, #0]
 800c8dc:	2c00      	cmp	r4, #0
 800c8de:	d1f7      	bne.n	800c8d0 <_fwalk_sglue+0xc>
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8e6:	89ab      	ldrh	r3, [r5, #12]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d907      	bls.n	800c8fc <_fwalk_sglue+0x38>
 800c8ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	d003      	beq.n	800c8fc <_fwalk_sglue+0x38>
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	47c0      	blx	r8
 800c8fa:	4306      	orrs	r6, r0
 800c8fc:	3568      	adds	r5, #104	@ 0x68
 800c8fe:	e7e9      	b.n	800c8d4 <_fwalk_sglue+0x10>

0800c900 <iprintf>:
 800c900:	b40f      	push	{r0, r1, r2, r3}
 800c902:	b507      	push	{r0, r1, r2, lr}
 800c904:	4906      	ldr	r1, [pc, #24]	@ (800c920 <iprintf+0x20>)
 800c906:	ab04      	add	r3, sp, #16
 800c908:	6808      	ldr	r0, [r1, #0]
 800c90a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90e:	6881      	ldr	r1, [r0, #8]
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	f000 fb3b 	bl	800cf8c <_vfiprintf_r>
 800c916:	b003      	add	sp, #12
 800c918:	f85d eb04 	ldr.w	lr, [sp], #4
 800c91c:	b004      	add	sp, #16
 800c91e:	4770      	bx	lr
 800c920:	200001ac 	.word	0x200001ac

0800c924 <_puts_r>:
 800c924:	6a03      	ldr	r3, [r0, #32]
 800c926:	b570      	push	{r4, r5, r6, lr}
 800c928:	4605      	mov	r5, r0
 800c92a:	460e      	mov	r6, r1
 800c92c:	6884      	ldr	r4, [r0, #8]
 800c92e:	b90b      	cbnz	r3, 800c934 <_puts_r+0x10>
 800c930:	f7ff ffb0 	bl	800c894 <__sinit>
 800c934:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c936:	07db      	lsls	r3, r3, #31
 800c938:	d405      	bmi.n	800c946 <_puts_r+0x22>
 800c93a:	89a3      	ldrh	r3, [r4, #12]
 800c93c:	0598      	lsls	r0, r3, #22
 800c93e:	d402      	bmi.n	800c946 <_puts_r+0x22>
 800c940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c942:	f000 f9f4 	bl	800cd2e <__retarget_lock_acquire_recursive>
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	0719      	lsls	r1, r3, #28
 800c94a:	d502      	bpl.n	800c952 <_puts_r+0x2e>
 800c94c:	6923      	ldr	r3, [r4, #16]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d135      	bne.n	800c9be <_puts_r+0x9a>
 800c952:	4621      	mov	r1, r4
 800c954:	4628      	mov	r0, r5
 800c956:	f000 f8c5 	bl	800cae4 <__swsetup_r>
 800c95a:	b380      	cbz	r0, 800c9be <_puts_r+0x9a>
 800c95c:	f04f 35ff 	mov.w	r5, #4294967295
 800c960:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c962:	07da      	lsls	r2, r3, #31
 800c964:	d405      	bmi.n	800c972 <_puts_r+0x4e>
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	059b      	lsls	r3, r3, #22
 800c96a:	d402      	bmi.n	800c972 <_puts_r+0x4e>
 800c96c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c96e:	f000 f9df 	bl	800cd30 <__retarget_lock_release_recursive>
 800c972:	4628      	mov	r0, r5
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	2b00      	cmp	r3, #0
 800c978:	da04      	bge.n	800c984 <_puts_r+0x60>
 800c97a:	69a2      	ldr	r2, [r4, #24]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	dc17      	bgt.n	800c9b0 <_puts_r+0x8c>
 800c980:	290a      	cmp	r1, #10
 800c982:	d015      	beq.n	800c9b0 <_puts_r+0x8c>
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	6022      	str	r2, [r4, #0]
 800c98a:	7019      	strb	r1, [r3, #0]
 800c98c:	68a3      	ldr	r3, [r4, #8]
 800c98e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c992:	3b01      	subs	r3, #1
 800c994:	60a3      	str	r3, [r4, #8]
 800c996:	2900      	cmp	r1, #0
 800c998:	d1ed      	bne.n	800c976 <_puts_r+0x52>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	da11      	bge.n	800c9c2 <_puts_r+0x9e>
 800c99e:	4622      	mov	r2, r4
 800c9a0:	210a      	movs	r1, #10
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	f000 f85f 	bl	800ca66 <__swbuf_r>
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d0d7      	beq.n	800c95c <_puts_r+0x38>
 800c9ac:	250a      	movs	r5, #10
 800c9ae:	e7d7      	b.n	800c960 <_puts_r+0x3c>
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 f857 	bl	800ca66 <__swbuf_r>
 800c9b8:	3001      	adds	r0, #1
 800c9ba:	d1e7      	bne.n	800c98c <_puts_r+0x68>
 800c9bc:	e7ce      	b.n	800c95c <_puts_r+0x38>
 800c9be:	3e01      	subs	r6, #1
 800c9c0:	e7e4      	b.n	800c98c <_puts_r+0x68>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	1c5a      	adds	r2, r3, #1
 800c9c6:	6022      	str	r2, [r4, #0]
 800c9c8:	220a      	movs	r2, #10
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	e7ee      	b.n	800c9ac <_puts_r+0x88>
	...

0800c9d0 <puts>:
 800c9d0:	4b02      	ldr	r3, [pc, #8]	@ (800c9dc <puts+0xc>)
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	6818      	ldr	r0, [r3, #0]
 800c9d6:	f7ff bfa5 	b.w	800c924 <_puts_r>
 800c9da:	bf00      	nop
 800c9dc:	200001ac 	.word	0x200001ac

0800c9e0 <__sread>:
 800c9e0:	b510      	push	{r4, lr}
 800c9e2:	460c      	mov	r4, r1
 800c9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9e8:	f000 f952 	bl	800cc90 <_read_r>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	bfab      	itete	ge
 800c9f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9f4:	181b      	addge	r3, r3, r0
 800c9f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c9fa:	bfac      	ite	ge
 800c9fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c9fe:	81a3      	strhlt	r3, [r4, #12]
 800ca00:	bd10      	pop	{r4, pc}

0800ca02 <__swrite>:
 800ca02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca06:	461f      	mov	r7, r3
 800ca08:	898b      	ldrh	r3, [r1, #12]
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	05db      	lsls	r3, r3, #23
 800ca0e:	460c      	mov	r4, r1
 800ca10:	4616      	mov	r6, r2
 800ca12:	d505      	bpl.n	800ca20 <__swrite+0x1e>
 800ca14:	2302      	movs	r3, #2
 800ca16:	2200      	movs	r2, #0
 800ca18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca1c:	f000 f926 	bl	800cc6c <_lseek_r>
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	4632      	mov	r2, r6
 800ca24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca28:	81a3      	strh	r3, [r4, #12]
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	463b      	mov	r3, r7
 800ca2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca36:	f000 b93d 	b.w	800ccb4 <_write_r>

0800ca3a <__sseek>:
 800ca3a:	b510      	push	{r4, lr}
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca42:	f000 f913 	bl	800cc6c <_lseek_r>
 800ca46:	1c43      	adds	r3, r0, #1
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	bf15      	itete	ne
 800ca4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca56:	81a3      	strheq	r3, [r4, #12]
 800ca58:	bf18      	it	ne
 800ca5a:	81a3      	strhne	r3, [r4, #12]
 800ca5c:	bd10      	pop	{r4, pc}

0800ca5e <__sclose>:
 800ca5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca62:	f000 b89d 	b.w	800cba0 <_close_r>

0800ca66 <__swbuf_r>:
 800ca66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca68:	460e      	mov	r6, r1
 800ca6a:	4614      	mov	r4, r2
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	b118      	cbz	r0, 800ca78 <__swbuf_r+0x12>
 800ca70:	6a03      	ldr	r3, [r0, #32]
 800ca72:	b90b      	cbnz	r3, 800ca78 <__swbuf_r+0x12>
 800ca74:	f7ff ff0e 	bl	800c894 <__sinit>
 800ca78:	69a3      	ldr	r3, [r4, #24]
 800ca7a:	60a3      	str	r3, [r4, #8]
 800ca7c:	89a3      	ldrh	r3, [r4, #12]
 800ca7e:	071a      	lsls	r2, r3, #28
 800ca80:	d501      	bpl.n	800ca86 <__swbuf_r+0x20>
 800ca82:	6923      	ldr	r3, [r4, #16]
 800ca84:	b943      	cbnz	r3, 800ca98 <__swbuf_r+0x32>
 800ca86:	4621      	mov	r1, r4
 800ca88:	4628      	mov	r0, r5
 800ca8a:	f000 f82b 	bl	800cae4 <__swsetup_r>
 800ca8e:	b118      	cbz	r0, 800ca98 <__swbuf_r+0x32>
 800ca90:	f04f 37ff 	mov.w	r7, #4294967295
 800ca94:	4638      	mov	r0, r7
 800ca96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	6922      	ldr	r2, [r4, #16]
 800ca9c:	b2f6      	uxtb	r6, r6
 800ca9e:	1a98      	subs	r0, r3, r2
 800caa0:	6963      	ldr	r3, [r4, #20]
 800caa2:	4637      	mov	r7, r6
 800caa4:	4283      	cmp	r3, r0
 800caa6:	dc05      	bgt.n	800cab4 <__swbuf_r+0x4e>
 800caa8:	4621      	mov	r1, r4
 800caaa:	4628      	mov	r0, r5
 800caac:	f000 fd98 	bl	800d5e0 <_fflush_r>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1ed      	bne.n	800ca90 <__swbuf_r+0x2a>
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	6022      	str	r2, [r4, #0]
 800cac0:	701e      	strb	r6, [r3, #0]
 800cac2:	6962      	ldr	r2, [r4, #20]
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	429a      	cmp	r2, r3
 800cac8:	d004      	beq.n	800cad4 <__swbuf_r+0x6e>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	07db      	lsls	r3, r3, #31
 800cace:	d5e1      	bpl.n	800ca94 <__swbuf_r+0x2e>
 800cad0:	2e0a      	cmp	r6, #10
 800cad2:	d1df      	bne.n	800ca94 <__swbuf_r+0x2e>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 fd82 	bl	800d5e0 <_fflush_r>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d0d9      	beq.n	800ca94 <__swbuf_r+0x2e>
 800cae0:	e7d6      	b.n	800ca90 <__swbuf_r+0x2a>
	...

0800cae4 <__swsetup_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4b29      	ldr	r3, [pc, #164]	@ (800cb8c <__swsetup_r+0xa8>)
 800cae8:	4605      	mov	r5, r0
 800caea:	6818      	ldr	r0, [r3, #0]
 800caec:	460c      	mov	r4, r1
 800caee:	b118      	cbz	r0, 800caf8 <__swsetup_r+0x14>
 800caf0:	6a03      	ldr	r3, [r0, #32]
 800caf2:	b90b      	cbnz	r3, 800caf8 <__swsetup_r+0x14>
 800caf4:	f7ff fece 	bl	800c894 <__sinit>
 800caf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cafc:	0719      	lsls	r1, r3, #28
 800cafe:	d422      	bmi.n	800cb46 <__swsetup_r+0x62>
 800cb00:	06da      	lsls	r2, r3, #27
 800cb02:	d407      	bmi.n	800cb14 <__swsetup_r+0x30>
 800cb04:	2209      	movs	r2, #9
 800cb06:	602a      	str	r2, [r5, #0]
 800cb08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	e033      	b.n	800cb7c <__swsetup_r+0x98>
 800cb14:	0758      	lsls	r0, r3, #29
 800cb16:	d512      	bpl.n	800cb3e <__swsetup_r+0x5a>
 800cb18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb1a:	b141      	cbz	r1, 800cb2e <__swsetup_r+0x4a>
 800cb1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb20:	4299      	cmp	r1, r3
 800cb22:	d002      	beq.n	800cb2a <__swsetup_r+0x46>
 800cb24:	4628      	mov	r0, r5
 800cb26:	f000 f913 	bl	800cd50 <_free_r>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb34:	81a3      	strh	r3, [r4, #12]
 800cb36:	2300      	movs	r3, #0
 800cb38:	6063      	str	r3, [r4, #4]
 800cb3a:	6923      	ldr	r3, [r4, #16]
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	f043 0308 	orr.w	r3, r3, #8
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	6923      	ldr	r3, [r4, #16]
 800cb48:	b94b      	cbnz	r3, 800cb5e <__swsetup_r+0x7a>
 800cb4a:	89a3      	ldrh	r3, [r4, #12]
 800cb4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb54:	d003      	beq.n	800cb5e <__swsetup_r+0x7a>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	f000 fd8e 	bl	800d67a <__smakebuf_r>
 800cb5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb62:	f013 0201 	ands.w	r2, r3, #1
 800cb66:	d00a      	beq.n	800cb7e <__swsetup_r+0x9a>
 800cb68:	2200      	movs	r2, #0
 800cb6a:	60a2      	str	r2, [r4, #8]
 800cb6c:	6962      	ldr	r2, [r4, #20]
 800cb6e:	4252      	negs	r2, r2
 800cb70:	61a2      	str	r2, [r4, #24]
 800cb72:	6922      	ldr	r2, [r4, #16]
 800cb74:	b942      	cbnz	r2, 800cb88 <__swsetup_r+0xa4>
 800cb76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb7a:	d1c5      	bne.n	800cb08 <__swsetup_r+0x24>
 800cb7c:	bd38      	pop	{r3, r4, r5, pc}
 800cb7e:	0799      	lsls	r1, r3, #30
 800cb80:	bf58      	it	pl
 800cb82:	6962      	ldrpl	r2, [r4, #20]
 800cb84:	60a2      	str	r2, [r4, #8]
 800cb86:	e7f4      	b.n	800cb72 <__swsetup_r+0x8e>
 800cb88:	2000      	movs	r0, #0
 800cb8a:	e7f7      	b.n	800cb7c <__swsetup_r+0x98>
 800cb8c:	200001ac 	.word	0x200001ac

0800cb90 <memset>:
 800cb90:	4603      	mov	r3, r0
 800cb92:	4402      	add	r2, r0
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d100      	bne.n	800cb9a <memset+0xa>
 800cb98:	4770      	bx	lr
 800cb9a:	f803 1b01 	strb.w	r1, [r3], #1
 800cb9e:	e7f9      	b.n	800cb94 <memset+0x4>

0800cba0 <_close_r>:
 800cba0:	b538      	push	{r3, r4, r5, lr}
 800cba2:	2300      	movs	r3, #0
 800cba4:	4d05      	ldr	r5, [pc, #20]	@ (800cbbc <_close_r+0x1c>)
 800cba6:	4604      	mov	r4, r0
 800cba8:	4608      	mov	r0, r1
 800cbaa:	602b      	str	r3, [r5, #0]
 800cbac:	f7f4 fb91 	bl	80012d2 <_close>
 800cbb0:	1c43      	adds	r3, r0, #1
 800cbb2:	d102      	bne.n	800cbba <_close_r+0x1a>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	b103      	cbz	r3, 800cbba <_close_r+0x1a>
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	bd38      	pop	{r3, r4, r5, pc}
 800cbbc:	20003004 	.word	0x20003004

0800cbc0 <_reclaim_reent>:
 800cbc0:	4b29      	ldr	r3, [pc, #164]	@ (800cc68 <_reclaim_reent+0xa8>)
 800cbc2:	b570      	push	{r4, r5, r6, lr}
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4283      	cmp	r3, r0
 800cbca:	d04b      	beq.n	800cc64 <_reclaim_reent+0xa4>
 800cbcc:	69c3      	ldr	r3, [r0, #28]
 800cbce:	b1ab      	cbz	r3, 800cbfc <_reclaim_reent+0x3c>
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	b16b      	cbz	r3, 800cbf0 <_reclaim_reent+0x30>
 800cbd4:	2500      	movs	r5, #0
 800cbd6:	69e3      	ldr	r3, [r4, #28]
 800cbd8:	68db      	ldr	r3, [r3, #12]
 800cbda:	5959      	ldr	r1, [r3, r5]
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	d13b      	bne.n	800cc58 <_reclaim_reent+0x98>
 800cbe0:	3504      	adds	r5, #4
 800cbe2:	2d80      	cmp	r5, #128	@ 0x80
 800cbe4:	d1f7      	bne.n	800cbd6 <_reclaim_reent+0x16>
 800cbe6:	69e3      	ldr	r3, [r4, #28]
 800cbe8:	4620      	mov	r0, r4
 800cbea:	68d9      	ldr	r1, [r3, #12]
 800cbec:	f000 f8b0 	bl	800cd50 <_free_r>
 800cbf0:	69e3      	ldr	r3, [r4, #28]
 800cbf2:	6819      	ldr	r1, [r3, #0]
 800cbf4:	b111      	cbz	r1, 800cbfc <_reclaim_reent+0x3c>
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f000 f8aa 	bl	800cd50 <_free_r>
 800cbfc:	6961      	ldr	r1, [r4, #20]
 800cbfe:	b111      	cbz	r1, 800cc06 <_reclaim_reent+0x46>
 800cc00:	4620      	mov	r0, r4
 800cc02:	f000 f8a5 	bl	800cd50 <_free_r>
 800cc06:	69e1      	ldr	r1, [r4, #28]
 800cc08:	b111      	cbz	r1, 800cc10 <_reclaim_reent+0x50>
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f000 f8a0 	bl	800cd50 <_free_r>
 800cc10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cc12:	b111      	cbz	r1, 800cc1a <_reclaim_reent+0x5a>
 800cc14:	4620      	mov	r0, r4
 800cc16:	f000 f89b 	bl	800cd50 <_free_r>
 800cc1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc1c:	b111      	cbz	r1, 800cc24 <_reclaim_reent+0x64>
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f000 f896 	bl	800cd50 <_free_r>
 800cc24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cc26:	b111      	cbz	r1, 800cc2e <_reclaim_reent+0x6e>
 800cc28:	4620      	mov	r0, r4
 800cc2a:	f000 f891 	bl	800cd50 <_free_r>
 800cc2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cc30:	b111      	cbz	r1, 800cc38 <_reclaim_reent+0x78>
 800cc32:	4620      	mov	r0, r4
 800cc34:	f000 f88c 	bl	800cd50 <_free_r>
 800cc38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cc3a:	b111      	cbz	r1, 800cc42 <_reclaim_reent+0x82>
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 f887 	bl	800cd50 <_free_r>
 800cc42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cc44:	b111      	cbz	r1, 800cc4c <_reclaim_reent+0x8c>
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 f882 	bl	800cd50 <_free_r>
 800cc4c:	6a23      	ldr	r3, [r4, #32]
 800cc4e:	b14b      	cbz	r3, 800cc64 <_reclaim_reent+0xa4>
 800cc50:	4620      	mov	r0, r4
 800cc52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc56:	4718      	bx	r3
 800cc58:	680e      	ldr	r6, [r1, #0]
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 f878 	bl	800cd50 <_free_r>
 800cc60:	4631      	mov	r1, r6
 800cc62:	e7bb      	b.n	800cbdc <_reclaim_reent+0x1c>
 800cc64:	bd70      	pop	{r4, r5, r6, pc}
 800cc66:	bf00      	nop
 800cc68:	200001ac 	.word	0x200001ac

0800cc6c <_lseek_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4604      	mov	r4, r0
 800cc70:	4608      	mov	r0, r1
 800cc72:	4611      	mov	r1, r2
 800cc74:	2200      	movs	r2, #0
 800cc76:	4d05      	ldr	r5, [pc, #20]	@ (800cc8c <_lseek_r+0x20>)
 800cc78:	602a      	str	r2, [r5, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f7f4 fb4d 	bl	800131a <_lseek>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_lseek_r+0x1e>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_lseek_r+0x1e>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	20003004 	.word	0x20003004

0800cc90 <_read_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4604      	mov	r4, r0
 800cc94:	4608      	mov	r0, r1
 800cc96:	4611      	mov	r1, r2
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4d05      	ldr	r5, [pc, #20]	@ (800ccb0 <_read_r+0x20>)
 800cc9c:	602a      	str	r2, [r5, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f7f4 fade 	bl	8001260 <_read>
 800cca4:	1c43      	adds	r3, r0, #1
 800cca6:	d102      	bne.n	800ccae <_read_r+0x1e>
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	b103      	cbz	r3, 800ccae <_read_r+0x1e>
 800ccac:	6023      	str	r3, [r4, #0]
 800ccae:	bd38      	pop	{r3, r4, r5, pc}
 800ccb0:	20003004 	.word	0x20003004

0800ccb4 <_write_r>:
 800ccb4:	b538      	push	{r3, r4, r5, lr}
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	4611      	mov	r1, r2
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	4d05      	ldr	r5, [pc, #20]	@ (800ccd4 <_write_r+0x20>)
 800ccc0:	602a      	str	r2, [r5, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	f7f4 fae9 	bl	800129a <_write>
 800ccc8:	1c43      	adds	r3, r0, #1
 800ccca:	d102      	bne.n	800ccd2 <_write_r+0x1e>
 800cccc:	682b      	ldr	r3, [r5, #0]
 800ccce:	b103      	cbz	r3, 800ccd2 <_write_r+0x1e>
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	bd38      	pop	{r3, r4, r5, pc}
 800ccd4:	20003004 	.word	0x20003004

0800ccd8 <__errno>:
 800ccd8:	4b01      	ldr	r3, [pc, #4]	@ (800cce0 <__errno+0x8>)
 800ccda:	6818      	ldr	r0, [r3, #0]
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	200001ac 	.word	0x200001ac

0800cce4 <__libc_init_array>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	2600      	movs	r6, #0
 800cce8:	4d0c      	ldr	r5, [pc, #48]	@ (800cd1c <__libc_init_array+0x38>)
 800ccea:	4c0d      	ldr	r4, [pc, #52]	@ (800cd20 <__libc_init_array+0x3c>)
 800ccec:	1b64      	subs	r4, r4, r5
 800ccee:	10a4      	asrs	r4, r4, #2
 800ccf0:	42a6      	cmp	r6, r4
 800ccf2:	d109      	bne.n	800cd08 <__libc_init_array+0x24>
 800ccf4:	f000 fd3e 	bl	800d774 <_init>
 800ccf8:	2600      	movs	r6, #0
 800ccfa:	4d0a      	ldr	r5, [pc, #40]	@ (800cd24 <__libc_init_array+0x40>)
 800ccfc:	4c0a      	ldr	r4, [pc, #40]	@ (800cd28 <__libc_init_array+0x44>)
 800ccfe:	1b64      	subs	r4, r4, r5
 800cd00:	10a4      	asrs	r4, r4, #2
 800cd02:	42a6      	cmp	r6, r4
 800cd04:	d105      	bne.n	800cd12 <__libc_init_array+0x2e>
 800cd06:	bd70      	pop	{r4, r5, r6, pc}
 800cd08:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd0c:	4798      	blx	r3
 800cd0e:	3601      	adds	r6, #1
 800cd10:	e7ee      	b.n	800ccf0 <__libc_init_array+0xc>
 800cd12:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd16:	4798      	blx	r3
 800cd18:	3601      	adds	r6, #1
 800cd1a:	e7f2      	b.n	800cd02 <__libc_init_array+0x1e>
 800cd1c:	0800d95c 	.word	0x0800d95c
 800cd20:	0800d95c 	.word	0x0800d95c
 800cd24:	0800d95c 	.word	0x0800d95c
 800cd28:	0800d960 	.word	0x0800d960

0800cd2c <__retarget_lock_init_recursive>:
 800cd2c:	4770      	bx	lr

0800cd2e <__retarget_lock_acquire_recursive>:
 800cd2e:	4770      	bx	lr

0800cd30 <__retarget_lock_release_recursive>:
 800cd30:	4770      	bx	lr

0800cd32 <memcpy>:
 800cd32:	440a      	add	r2, r1
 800cd34:	4291      	cmp	r1, r2
 800cd36:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd3a:	d100      	bne.n	800cd3e <memcpy+0xc>
 800cd3c:	4770      	bx	lr
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd44:	4291      	cmp	r1, r2
 800cd46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd4a:	d1f9      	bne.n	800cd40 <memcpy+0xe>
 800cd4c:	bd10      	pop	{r4, pc}
	...

0800cd50 <_free_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4605      	mov	r5, r0
 800cd54:	2900      	cmp	r1, #0
 800cd56:	d040      	beq.n	800cdda <_free_r+0x8a>
 800cd58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd5c:	1f0c      	subs	r4, r1, #4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfb8      	it	lt
 800cd62:	18e4      	addlt	r4, r4, r3
 800cd64:	f000 f8de 	bl	800cf24 <__malloc_lock>
 800cd68:	4a1c      	ldr	r2, [pc, #112]	@ (800cddc <_free_r+0x8c>)
 800cd6a:	6813      	ldr	r3, [r2, #0]
 800cd6c:	b933      	cbnz	r3, 800cd7c <_free_r+0x2c>
 800cd6e:	6063      	str	r3, [r4, #4]
 800cd70:	6014      	str	r4, [r2, #0]
 800cd72:	4628      	mov	r0, r5
 800cd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd78:	f000 b8da 	b.w	800cf30 <__malloc_unlock>
 800cd7c:	42a3      	cmp	r3, r4
 800cd7e:	d908      	bls.n	800cd92 <_free_r+0x42>
 800cd80:	6820      	ldr	r0, [r4, #0]
 800cd82:	1821      	adds	r1, r4, r0
 800cd84:	428b      	cmp	r3, r1
 800cd86:	bf01      	itttt	eq
 800cd88:	6819      	ldreq	r1, [r3, #0]
 800cd8a:	685b      	ldreq	r3, [r3, #4]
 800cd8c:	1809      	addeq	r1, r1, r0
 800cd8e:	6021      	streq	r1, [r4, #0]
 800cd90:	e7ed      	b.n	800cd6e <_free_r+0x1e>
 800cd92:	461a      	mov	r2, r3
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	b10b      	cbz	r3, 800cd9c <_free_r+0x4c>
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d9fa      	bls.n	800cd92 <_free_r+0x42>
 800cd9c:	6811      	ldr	r1, [r2, #0]
 800cd9e:	1850      	adds	r0, r2, r1
 800cda0:	42a0      	cmp	r0, r4
 800cda2:	d10b      	bne.n	800cdbc <_free_r+0x6c>
 800cda4:	6820      	ldr	r0, [r4, #0]
 800cda6:	4401      	add	r1, r0
 800cda8:	1850      	adds	r0, r2, r1
 800cdaa:	4283      	cmp	r3, r0
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	d1e0      	bne.n	800cd72 <_free_r+0x22>
 800cdb0:	6818      	ldr	r0, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	4408      	add	r0, r1
 800cdb6:	6010      	str	r0, [r2, #0]
 800cdb8:	6053      	str	r3, [r2, #4]
 800cdba:	e7da      	b.n	800cd72 <_free_r+0x22>
 800cdbc:	d902      	bls.n	800cdc4 <_free_r+0x74>
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	602b      	str	r3, [r5, #0]
 800cdc2:	e7d6      	b.n	800cd72 <_free_r+0x22>
 800cdc4:	6820      	ldr	r0, [r4, #0]
 800cdc6:	1821      	adds	r1, r4, r0
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	bf01      	itttt	eq
 800cdcc:	6819      	ldreq	r1, [r3, #0]
 800cdce:	685b      	ldreq	r3, [r3, #4]
 800cdd0:	1809      	addeq	r1, r1, r0
 800cdd2:	6021      	streq	r1, [r4, #0]
 800cdd4:	6063      	str	r3, [r4, #4]
 800cdd6:	6054      	str	r4, [r2, #4]
 800cdd8:	e7cb      	b.n	800cd72 <_free_r+0x22>
 800cdda:	bd38      	pop	{r3, r4, r5, pc}
 800cddc:	20003010 	.word	0x20003010

0800cde0 <sbrk_aligned>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	4e0f      	ldr	r6, [pc, #60]	@ (800ce20 <sbrk_aligned+0x40>)
 800cde4:	460c      	mov	r4, r1
 800cde6:	6831      	ldr	r1, [r6, #0]
 800cde8:	4605      	mov	r5, r0
 800cdea:	b911      	cbnz	r1, 800cdf2 <sbrk_aligned+0x12>
 800cdec:	f000 fca4 	bl	800d738 <_sbrk_r>
 800cdf0:	6030      	str	r0, [r6, #0]
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f000 fc9f 	bl	800d738 <_sbrk_r>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	d103      	bne.n	800ce06 <sbrk_aligned+0x26>
 800cdfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ce02:	4620      	mov	r0, r4
 800ce04:	bd70      	pop	{r4, r5, r6, pc}
 800ce06:	1cc4      	adds	r4, r0, #3
 800ce08:	f024 0403 	bic.w	r4, r4, #3
 800ce0c:	42a0      	cmp	r0, r4
 800ce0e:	d0f8      	beq.n	800ce02 <sbrk_aligned+0x22>
 800ce10:	1a21      	subs	r1, r4, r0
 800ce12:	4628      	mov	r0, r5
 800ce14:	f000 fc90 	bl	800d738 <_sbrk_r>
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d1f2      	bne.n	800ce02 <sbrk_aligned+0x22>
 800ce1c:	e7ef      	b.n	800cdfe <sbrk_aligned+0x1e>
 800ce1e:	bf00      	nop
 800ce20:	2000300c 	.word	0x2000300c

0800ce24 <_malloc_r>:
 800ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce28:	1ccd      	adds	r5, r1, #3
 800ce2a:	f025 0503 	bic.w	r5, r5, #3
 800ce2e:	3508      	adds	r5, #8
 800ce30:	2d0c      	cmp	r5, #12
 800ce32:	bf38      	it	cc
 800ce34:	250c      	movcc	r5, #12
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	4606      	mov	r6, r0
 800ce3a:	db01      	blt.n	800ce40 <_malloc_r+0x1c>
 800ce3c:	42a9      	cmp	r1, r5
 800ce3e:	d904      	bls.n	800ce4a <_malloc_r+0x26>
 800ce40:	230c      	movs	r3, #12
 800ce42:	6033      	str	r3, [r6, #0]
 800ce44:	2000      	movs	r0, #0
 800ce46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf20 <_malloc_r+0xfc>
 800ce4e:	f000 f869 	bl	800cf24 <__malloc_lock>
 800ce52:	f8d8 3000 	ldr.w	r3, [r8]
 800ce56:	461c      	mov	r4, r3
 800ce58:	bb44      	cbnz	r4, 800ceac <_malloc_r+0x88>
 800ce5a:	4629      	mov	r1, r5
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7ff ffbf 	bl	800cde0 <sbrk_aligned>
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	4604      	mov	r4, r0
 800ce66:	d158      	bne.n	800cf1a <_malloc_r+0xf6>
 800ce68:	f8d8 4000 	ldr.w	r4, [r8]
 800ce6c:	4627      	mov	r7, r4
 800ce6e:	2f00      	cmp	r7, #0
 800ce70:	d143      	bne.n	800cefa <_malloc_r+0xd6>
 800ce72:	2c00      	cmp	r4, #0
 800ce74:	d04b      	beq.n	800cf0e <_malloc_r+0xea>
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	4639      	mov	r1, r7
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	eb04 0903 	add.w	r9, r4, r3
 800ce80:	f000 fc5a 	bl	800d738 <_sbrk_r>
 800ce84:	4581      	cmp	r9, r0
 800ce86:	d142      	bne.n	800cf0e <_malloc_r+0xea>
 800ce88:	6821      	ldr	r1, [r4, #0]
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	1a6d      	subs	r5, r5, r1
 800ce8e:	4629      	mov	r1, r5
 800ce90:	f7ff ffa6 	bl	800cde0 <sbrk_aligned>
 800ce94:	3001      	adds	r0, #1
 800ce96:	d03a      	beq.n	800cf0e <_malloc_r+0xea>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	442b      	add	r3, r5
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	f8d8 3000 	ldr.w	r3, [r8]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	bb62      	cbnz	r2, 800cf00 <_malloc_r+0xdc>
 800cea6:	f8c8 7000 	str.w	r7, [r8]
 800ceaa:	e00f      	b.n	800cecc <_malloc_r+0xa8>
 800ceac:	6822      	ldr	r2, [r4, #0]
 800ceae:	1b52      	subs	r2, r2, r5
 800ceb0:	d420      	bmi.n	800cef4 <_malloc_r+0xd0>
 800ceb2:	2a0b      	cmp	r2, #11
 800ceb4:	d917      	bls.n	800cee6 <_malloc_r+0xc2>
 800ceb6:	1961      	adds	r1, r4, r5
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	6025      	str	r5, [r4, #0]
 800cebc:	bf18      	it	ne
 800cebe:	6059      	strne	r1, [r3, #4]
 800cec0:	6863      	ldr	r3, [r4, #4]
 800cec2:	bf08      	it	eq
 800cec4:	f8c8 1000 	streq.w	r1, [r8]
 800cec8:	5162      	str	r2, [r4, r5]
 800ceca:	604b      	str	r3, [r1, #4]
 800cecc:	4630      	mov	r0, r6
 800cece:	f000 f82f 	bl	800cf30 <__malloc_unlock>
 800ced2:	f104 000b 	add.w	r0, r4, #11
 800ced6:	1d23      	adds	r3, r4, #4
 800ced8:	f020 0007 	bic.w	r0, r0, #7
 800cedc:	1ac2      	subs	r2, r0, r3
 800cede:	bf1c      	itt	ne
 800cee0:	1a1b      	subne	r3, r3, r0
 800cee2:	50a3      	strne	r3, [r4, r2]
 800cee4:	e7af      	b.n	800ce46 <_malloc_r+0x22>
 800cee6:	6862      	ldr	r2, [r4, #4]
 800cee8:	42a3      	cmp	r3, r4
 800ceea:	bf0c      	ite	eq
 800ceec:	f8c8 2000 	streq.w	r2, [r8]
 800cef0:	605a      	strne	r2, [r3, #4]
 800cef2:	e7eb      	b.n	800cecc <_malloc_r+0xa8>
 800cef4:	4623      	mov	r3, r4
 800cef6:	6864      	ldr	r4, [r4, #4]
 800cef8:	e7ae      	b.n	800ce58 <_malloc_r+0x34>
 800cefa:	463c      	mov	r4, r7
 800cefc:	687f      	ldr	r7, [r7, #4]
 800cefe:	e7b6      	b.n	800ce6e <_malloc_r+0x4a>
 800cf00:	461a      	mov	r2, r3
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	42a3      	cmp	r3, r4
 800cf06:	d1fb      	bne.n	800cf00 <_malloc_r+0xdc>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	6053      	str	r3, [r2, #4]
 800cf0c:	e7de      	b.n	800cecc <_malloc_r+0xa8>
 800cf0e:	230c      	movs	r3, #12
 800cf10:	4630      	mov	r0, r6
 800cf12:	6033      	str	r3, [r6, #0]
 800cf14:	f000 f80c 	bl	800cf30 <__malloc_unlock>
 800cf18:	e794      	b.n	800ce44 <_malloc_r+0x20>
 800cf1a:	6005      	str	r5, [r0, #0]
 800cf1c:	e7d6      	b.n	800cecc <_malloc_r+0xa8>
 800cf1e:	bf00      	nop
 800cf20:	20003010 	.word	0x20003010

0800cf24 <__malloc_lock>:
 800cf24:	4801      	ldr	r0, [pc, #4]	@ (800cf2c <__malloc_lock+0x8>)
 800cf26:	f7ff bf02 	b.w	800cd2e <__retarget_lock_acquire_recursive>
 800cf2a:	bf00      	nop
 800cf2c:	20003008 	.word	0x20003008

0800cf30 <__malloc_unlock>:
 800cf30:	4801      	ldr	r0, [pc, #4]	@ (800cf38 <__malloc_unlock+0x8>)
 800cf32:	f7ff befd 	b.w	800cd30 <__retarget_lock_release_recursive>
 800cf36:	bf00      	nop
 800cf38:	20003008 	.word	0x20003008

0800cf3c <__sfputc_r>:
 800cf3c:	6893      	ldr	r3, [r2, #8]
 800cf3e:	b410      	push	{r4}
 800cf40:	3b01      	subs	r3, #1
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	6093      	str	r3, [r2, #8]
 800cf46:	da07      	bge.n	800cf58 <__sfputc_r+0x1c>
 800cf48:	6994      	ldr	r4, [r2, #24]
 800cf4a:	42a3      	cmp	r3, r4
 800cf4c:	db01      	blt.n	800cf52 <__sfputc_r+0x16>
 800cf4e:	290a      	cmp	r1, #10
 800cf50:	d102      	bne.n	800cf58 <__sfputc_r+0x1c>
 800cf52:	bc10      	pop	{r4}
 800cf54:	f7ff bd87 	b.w	800ca66 <__swbuf_r>
 800cf58:	6813      	ldr	r3, [r2, #0]
 800cf5a:	1c58      	adds	r0, r3, #1
 800cf5c:	6010      	str	r0, [r2, #0]
 800cf5e:	7019      	strb	r1, [r3, #0]
 800cf60:	4608      	mov	r0, r1
 800cf62:	bc10      	pop	{r4}
 800cf64:	4770      	bx	lr

0800cf66 <__sfputs_r>:
 800cf66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf68:	4606      	mov	r6, r0
 800cf6a:	460f      	mov	r7, r1
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	18d5      	adds	r5, r2, r3
 800cf70:	42ac      	cmp	r4, r5
 800cf72:	d101      	bne.n	800cf78 <__sfputs_r+0x12>
 800cf74:	2000      	movs	r0, #0
 800cf76:	e007      	b.n	800cf88 <__sfputs_r+0x22>
 800cf78:	463a      	mov	r2, r7
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf80:	f7ff ffdc 	bl	800cf3c <__sfputc_r>
 800cf84:	1c43      	adds	r3, r0, #1
 800cf86:	d1f3      	bne.n	800cf70 <__sfputs_r+0xa>
 800cf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf8c <_vfiprintf_r>:
 800cf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf90:	460d      	mov	r5, r1
 800cf92:	4614      	mov	r4, r2
 800cf94:	4698      	mov	r8, r3
 800cf96:	4606      	mov	r6, r0
 800cf98:	b09d      	sub	sp, #116	@ 0x74
 800cf9a:	b118      	cbz	r0, 800cfa4 <_vfiprintf_r+0x18>
 800cf9c:	6a03      	ldr	r3, [r0, #32]
 800cf9e:	b90b      	cbnz	r3, 800cfa4 <_vfiprintf_r+0x18>
 800cfa0:	f7ff fc78 	bl	800c894 <__sinit>
 800cfa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa6:	07d9      	lsls	r1, r3, #31
 800cfa8:	d405      	bmi.n	800cfb6 <_vfiprintf_r+0x2a>
 800cfaa:	89ab      	ldrh	r3, [r5, #12]
 800cfac:	059a      	lsls	r2, r3, #22
 800cfae:	d402      	bmi.n	800cfb6 <_vfiprintf_r+0x2a>
 800cfb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfb2:	f7ff febc 	bl	800cd2e <__retarget_lock_acquire_recursive>
 800cfb6:	89ab      	ldrh	r3, [r5, #12]
 800cfb8:	071b      	lsls	r3, r3, #28
 800cfba:	d501      	bpl.n	800cfc0 <_vfiprintf_r+0x34>
 800cfbc:	692b      	ldr	r3, [r5, #16]
 800cfbe:	b99b      	cbnz	r3, 800cfe8 <_vfiprintf_r+0x5c>
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	4630      	mov	r0, r6
 800cfc4:	f7ff fd8e 	bl	800cae4 <__swsetup_r>
 800cfc8:	b170      	cbz	r0, 800cfe8 <_vfiprintf_r+0x5c>
 800cfca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfcc:	07dc      	lsls	r4, r3, #31
 800cfce:	d504      	bpl.n	800cfda <_vfiprintf_r+0x4e>
 800cfd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd4:	b01d      	add	sp, #116	@ 0x74
 800cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	0598      	lsls	r0, r3, #22
 800cfde:	d4f7      	bmi.n	800cfd0 <_vfiprintf_r+0x44>
 800cfe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfe2:	f7ff fea5 	bl	800cd30 <__retarget_lock_release_recursive>
 800cfe6:	e7f3      	b.n	800cfd0 <_vfiprintf_r+0x44>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfec:	2320      	movs	r3, #32
 800cfee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cff2:	2330      	movs	r3, #48	@ 0x30
 800cff4:	f04f 0901 	mov.w	r9, #1
 800cff8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cffc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d1a8 <_vfiprintf_r+0x21c>
 800d000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d004:	4623      	mov	r3, r4
 800d006:	469a      	mov	sl, r3
 800d008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d00c:	b10a      	cbz	r2, 800d012 <_vfiprintf_r+0x86>
 800d00e:	2a25      	cmp	r2, #37	@ 0x25
 800d010:	d1f9      	bne.n	800d006 <_vfiprintf_r+0x7a>
 800d012:	ebba 0b04 	subs.w	fp, sl, r4
 800d016:	d00b      	beq.n	800d030 <_vfiprintf_r+0xa4>
 800d018:	465b      	mov	r3, fp
 800d01a:	4622      	mov	r2, r4
 800d01c:	4629      	mov	r1, r5
 800d01e:	4630      	mov	r0, r6
 800d020:	f7ff ffa1 	bl	800cf66 <__sfputs_r>
 800d024:	3001      	adds	r0, #1
 800d026:	f000 80a7 	beq.w	800d178 <_vfiprintf_r+0x1ec>
 800d02a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d02c:	445a      	add	r2, fp
 800d02e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d030:	f89a 3000 	ldrb.w	r3, [sl]
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 809f 	beq.w	800d178 <_vfiprintf_r+0x1ec>
 800d03a:	2300      	movs	r3, #0
 800d03c:	f04f 32ff 	mov.w	r2, #4294967295
 800d040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d044:	f10a 0a01 	add.w	sl, sl, #1
 800d048:	9304      	str	r3, [sp, #16]
 800d04a:	9307      	str	r3, [sp, #28]
 800d04c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d050:	931a      	str	r3, [sp, #104]	@ 0x68
 800d052:	4654      	mov	r4, sl
 800d054:	2205      	movs	r2, #5
 800d056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05a:	4853      	ldr	r0, [pc, #332]	@ (800d1a8 <_vfiprintf_r+0x21c>)
 800d05c:	f000 fb7c 	bl	800d758 <memchr>
 800d060:	9a04      	ldr	r2, [sp, #16]
 800d062:	b9d8      	cbnz	r0, 800d09c <_vfiprintf_r+0x110>
 800d064:	06d1      	lsls	r1, r2, #27
 800d066:	bf44      	itt	mi
 800d068:	2320      	movmi	r3, #32
 800d06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d06e:	0713      	lsls	r3, r2, #28
 800d070:	bf44      	itt	mi
 800d072:	232b      	movmi	r3, #43	@ 0x2b
 800d074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d078:	f89a 3000 	ldrb.w	r3, [sl]
 800d07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d07e:	d015      	beq.n	800d0ac <_vfiprintf_r+0x120>
 800d080:	4654      	mov	r4, sl
 800d082:	2000      	movs	r0, #0
 800d084:	f04f 0c0a 	mov.w	ip, #10
 800d088:	9a07      	ldr	r2, [sp, #28]
 800d08a:	4621      	mov	r1, r4
 800d08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d090:	3b30      	subs	r3, #48	@ 0x30
 800d092:	2b09      	cmp	r3, #9
 800d094:	d94b      	bls.n	800d12e <_vfiprintf_r+0x1a2>
 800d096:	b1b0      	cbz	r0, 800d0c6 <_vfiprintf_r+0x13a>
 800d098:	9207      	str	r2, [sp, #28]
 800d09a:	e014      	b.n	800d0c6 <_vfiprintf_r+0x13a>
 800d09c:	eba0 0308 	sub.w	r3, r0, r8
 800d0a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	46a2      	mov	sl, r4
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	e7d2      	b.n	800d052 <_vfiprintf_r+0xc6>
 800d0ac:	9b03      	ldr	r3, [sp, #12]
 800d0ae:	1d19      	adds	r1, r3, #4
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	9103      	str	r1, [sp, #12]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	bfbb      	ittet	lt
 800d0b8:	425b      	neglt	r3, r3
 800d0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d0be:	9307      	strge	r3, [sp, #28]
 800d0c0:	9307      	strlt	r3, [sp, #28]
 800d0c2:	bfb8      	it	lt
 800d0c4:	9204      	strlt	r2, [sp, #16]
 800d0c6:	7823      	ldrb	r3, [r4, #0]
 800d0c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0ca:	d10a      	bne.n	800d0e2 <_vfiprintf_r+0x156>
 800d0cc:	7863      	ldrb	r3, [r4, #1]
 800d0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0d0:	d132      	bne.n	800d138 <_vfiprintf_r+0x1ac>
 800d0d2:	9b03      	ldr	r3, [sp, #12]
 800d0d4:	3402      	adds	r4, #2
 800d0d6:	1d1a      	adds	r2, r3, #4
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	9203      	str	r2, [sp, #12]
 800d0dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d0e0:	9305      	str	r3, [sp, #20]
 800d0e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d1ac <_vfiprintf_r+0x220>
 800d0e6:	2203      	movs	r2, #3
 800d0e8:	4650      	mov	r0, sl
 800d0ea:	7821      	ldrb	r1, [r4, #0]
 800d0ec:	f000 fb34 	bl	800d758 <memchr>
 800d0f0:	b138      	cbz	r0, 800d102 <_vfiprintf_r+0x176>
 800d0f2:	2240      	movs	r2, #64	@ 0x40
 800d0f4:	9b04      	ldr	r3, [sp, #16]
 800d0f6:	eba0 000a 	sub.w	r0, r0, sl
 800d0fa:	4082      	lsls	r2, r0
 800d0fc:	4313      	orrs	r3, r2
 800d0fe:	3401      	adds	r4, #1
 800d100:	9304      	str	r3, [sp, #16]
 800d102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d106:	2206      	movs	r2, #6
 800d108:	4829      	ldr	r0, [pc, #164]	@ (800d1b0 <_vfiprintf_r+0x224>)
 800d10a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d10e:	f000 fb23 	bl	800d758 <memchr>
 800d112:	2800      	cmp	r0, #0
 800d114:	d03f      	beq.n	800d196 <_vfiprintf_r+0x20a>
 800d116:	4b27      	ldr	r3, [pc, #156]	@ (800d1b4 <_vfiprintf_r+0x228>)
 800d118:	bb1b      	cbnz	r3, 800d162 <_vfiprintf_r+0x1d6>
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	3307      	adds	r3, #7
 800d11e:	f023 0307 	bic.w	r3, r3, #7
 800d122:	3308      	adds	r3, #8
 800d124:	9303      	str	r3, [sp, #12]
 800d126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d128:	443b      	add	r3, r7
 800d12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d12c:	e76a      	b.n	800d004 <_vfiprintf_r+0x78>
 800d12e:	460c      	mov	r4, r1
 800d130:	2001      	movs	r0, #1
 800d132:	fb0c 3202 	mla	r2, ip, r2, r3
 800d136:	e7a8      	b.n	800d08a <_vfiprintf_r+0xfe>
 800d138:	2300      	movs	r3, #0
 800d13a:	f04f 0c0a 	mov.w	ip, #10
 800d13e:	4619      	mov	r1, r3
 800d140:	3401      	adds	r4, #1
 800d142:	9305      	str	r3, [sp, #20]
 800d144:	4620      	mov	r0, r4
 800d146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d14a:	3a30      	subs	r2, #48	@ 0x30
 800d14c:	2a09      	cmp	r2, #9
 800d14e:	d903      	bls.n	800d158 <_vfiprintf_r+0x1cc>
 800d150:	2b00      	cmp	r3, #0
 800d152:	d0c6      	beq.n	800d0e2 <_vfiprintf_r+0x156>
 800d154:	9105      	str	r1, [sp, #20]
 800d156:	e7c4      	b.n	800d0e2 <_vfiprintf_r+0x156>
 800d158:	4604      	mov	r4, r0
 800d15a:	2301      	movs	r3, #1
 800d15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d160:	e7f0      	b.n	800d144 <_vfiprintf_r+0x1b8>
 800d162:	ab03      	add	r3, sp, #12
 800d164:	9300      	str	r3, [sp, #0]
 800d166:	462a      	mov	r2, r5
 800d168:	4630      	mov	r0, r6
 800d16a:	4b13      	ldr	r3, [pc, #76]	@ (800d1b8 <_vfiprintf_r+0x22c>)
 800d16c:	a904      	add	r1, sp, #16
 800d16e:	f3af 8000 	nop.w
 800d172:	4607      	mov	r7, r0
 800d174:	1c78      	adds	r0, r7, #1
 800d176:	d1d6      	bne.n	800d126 <_vfiprintf_r+0x19a>
 800d178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d17a:	07d9      	lsls	r1, r3, #31
 800d17c:	d405      	bmi.n	800d18a <_vfiprintf_r+0x1fe>
 800d17e:	89ab      	ldrh	r3, [r5, #12]
 800d180:	059a      	lsls	r2, r3, #22
 800d182:	d402      	bmi.n	800d18a <_vfiprintf_r+0x1fe>
 800d184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d186:	f7ff fdd3 	bl	800cd30 <__retarget_lock_release_recursive>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	065b      	lsls	r3, r3, #25
 800d18e:	f53f af1f 	bmi.w	800cfd0 <_vfiprintf_r+0x44>
 800d192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d194:	e71e      	b.n	800cfd4 <_vfiprintf_r+0x48>
 800d196:	ab03      	add	r3, sp, #12
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	462a      	mov	r2, r5
 800d19c:	4630      	mov	r0, r6
 800d19e:	4b06      	ldr	r3, [pc, #24]	@ (800d1b8 <_vfiprintf_r+0x22c>)
 800d1a0:	a904      	add	r1, sp, #16
 800d1a2:	f000 f87d 	bl	800d2a0 <_printf_i>
 800d1a6:	e7e4      	b.n	800d172 <_vfiprintf_r+0x1e6>
 800d1a8:	0800d91e 	.word	0x0800d91e
 800d1ac:	0800d924 	.word	0x0800d924
 800d1b0:	0800d928 	.word	0x0800d928
 800d1b4:	00000000 	.word	0x00000000
 800d1b8:	0800cf67 	.word	0x0800cf67

0800d1bc <_printf_common>:
 800d1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	4698      	mov	r8, r3
 800d1c4:	688a      	ldr	r2, [r1, #8]
 800d1c6:	690b      	ldr	r3, [r1, #16]
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	bfb8      	it	lt
 800d1ce:	4613      	movlt	r3, r2
 800d1d0:	6033      	str	r3, [r6, #0]
 800d1d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1dc:	b10a      	cbz	r2, 800d1e2 <_printf_common+0x26>
 800d1de:	3301      	adds	r3, #1
 800d1e0:	6033      	str	r3, [r6, #0]
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	0699      	lsls	r1, r3, #26
 800d1e6:	bf42      	ittt	mi
 800d1e8:	6833      	ldrmi	r3, [r6, #0]
 800d1ea:	3302      	addmi	r3, #2
 800d1ec:	6033      	strmi	r3, [r6, #0]
 800d1ee:	6825      	ldr	r5, [r4, #0]
 800d1f0:	f015 0506 	ands.w	r5, r5, #6
 800d1f4:	d106      	bne.n	800d204 <_printf_common+0x48>
 800d1f6:	f104 0a19 	add.w	sl, r4, #25
 800d1fa:	68e3      	ldr	r3, [r4, #12]
 800d1fc:	6832      	ldr	r2, [r6, #0]
 800d1fe:	1a9b      	subs	r3, r3, r2
 800d200:	42ab      	cmp	r3, r5
 800d202:	dc2b      	bgt.n	800d25c <_printf_common+0xa0>
 800d204:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d208:	6822      	ldr	r2, [r4, #0]
 800d20a:	3b00      	subs	r3, #0
 800d20c:	bf18      	it	ne
 800d20e:	2301      	movne	r3, #1
 800d210:	0692      	lsls	r2, r2, #26
 800d212:	d430      	bmi.n	800d276 <_printf_common+0xba>
 800d214:	4641      	mov	r1, r8
 800d216:	4638      	mov	r0, r7
 800d218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d21c:	47c8      	blx	r9
 800d21e:	3001      	adds	r0, #1
 800d220:	d023      	beq.n	800d26a <_printf_common+0xae>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	6922      	ldr	r2, [r4, #16]
 800d226:	f003 0306 	and.w	r3, r3, #6
 800d22a:	2b04      	cmp	r3, #4
 800d22c:	bf14      	ite	ne
 800d22e:	2500      	movne	r5, #0
 800d230:	6833      	ldreq	r3, [r6, #0]
 800d232:	f04f 0600 	mov.w	r6, #0
 800d236:	bf08      	it	eq
 800d238:	68e5      	ldreq	r5, [r4, #12]
 800d23a:	f104 041a 	add.w	r4, r4, #26
 800d23e:	bf08      	it	eq
 800d240:	1aed      	subeq	r5, r5, r3
 800d242:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d246:	bf08      	it	eq
 800d248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d24c:	4293      	cmp	r3, r2
 800d24e:	bfc4      	itt	gt
 800d250:	1a9b      	subgt	r3, r3, r2
 800d252:	18ed      	addgt	r5, r5, r3
 800d254:	42b5      	cmp	r5, r6
 800d256:	d11a      	bne.n	800d28e <_printf_common+0xd2>
 800d258:	2000      	movs	r0, #0
 800d25a:	e008      	b.n	800d26e <_printf_common+0xb2>
 800d25c:	2301      	movs	r3, #1
 800d25e:	4652      	mov	r2, sl
 800d260:	4641      	mov	r1, r8
 800d262:	4638      	mov	r0, r7
 800d264:	47c8      	blx	r9
 800d266:	3001      	adds	r0, #1
 800d268:	d103      	bne.n	800d272 <_printf_common+0xb6>
 800d26a:	f04f 30ff 	mov.w	r0, #4294967295
 800d26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d272:	3501      	adds	r5, #1
 800d274:	e7c1      	b.n	800d1fa <_printf_common+0x3e>
 800d276:	2030      	movs	r0, #48	@ 0x30
 800d278:	18e1      	adds	r1, r4, r3
 800d27a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d284:	4422      	add	r2, r4
 800d286:	3302      	adds	r3, #2
 800d288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d28c:	e7c2      	b.n	800d214 <_printf_common+0x58>
 800d28e:	2301      	movs	r3, #1
 800d290:	4622      	mov	r2, r4
 800d292:	4641      	mov	r1, r8
 800d294:	4638      	mov	r0, r7
 800d296:	47c8      	blx	r9
 800d298:	3001      	adds	r0, #1
 800d29a:	d0e6      	beq.n	800d26a <_printf_common+0xae>
 800d29c:	3601      	adds	r6, #1
 800d29e:	e7d9      	b.n	800d254 <_printf_common+0x98>

0800d2a0 <_printf_i>:
 800d2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	7e0f      	ldrb	r7, [r1, #24]
 800d2a6:	4691      	mov	r9, r2
 800d2a8:	2f78      	cmp	r7, #120	@ 0x78
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	460c      	mov	r4, r1
 800d2ae:	469a      	mov	sl, r3
 800d2b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d2b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d2b6:	d807      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2b8:	2f62      	cmp	r7, #98	@ 0x62
 800d2ba:	d80a      	bhi.n	800d2d2 <_printf_i+0x32>
 800d2bc:	2f00      	cmp	r7, #0
 800d2be:	f000 80d3 	beq.w	800d468 <_printf_i+0x1c8>
 800d2c2:	2f58      	cmp	r7, #88	@ 0x58
 800d2c4:	f000 80ba 	beq.w	800d43c <_printf_i+0x19c>
 800d2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2d0:	e03a      	b.n	800d348 <_printf_i+0xa8>
 800d2d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2d6:	2b15      	cmp	r3, #21
 800d2d8:	d8f6      	bhi.n	800d2c8 <_printf_i+0x28>
 800d2da:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e0 <_printf_i+0x40>)
 800d2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e0:	0800d339 	.word	0x0800d339
 800d2e4:	0800d34d 	.word	0x0800d34d
 800d2e8:	0800d2c9 	.word	0x0800d2c9
 800d2ec:	0800d2c9 	.word	0x0800d2c9
 800d2f0:	0800d2c9 	.word	0x0800d2c9
 800d2f4:	0800d2c9 	.word	0x0800d2c9
 800d2f8:	0800d34d 	.word	0x0800d34d
 800d2fc:	0800d2c9 	.word	0x0800d2c9
 800d300:	0800d2c9 	.word	0x0800d2c9
 800d304:	0800d2c9 	.word	0x0800d2c9
 800d308:	0800d2c9 	.word	0x0800d2c9
 800d30c:	0800d44f 	.word	0x0800d44f
 800d310:	0800d377 	.word	0x0800d377
 800d314:	0800d409 	.word	0x0800d409
 800d318:	0800d2c9 	.word	0x0800d2c9
 800d31c:	0800d2c9 	.word	0x0800d2c9
 800d320:	0800d471 	.word	0x0800d471
 800d324:	0800d2c9 	.word	0x0800d2c9
 800d328:	0800d377 	.word	0x0800d377
 800d32c:	0800d2c9 	.word	0x0800d2c9
 800d330:	0800d2c9 	.word	0x0800d2c9
 800d334:	0800d411 	.word	0x0800d411
 800d338:	6833      	ldr	r3, [r6, #0]
 800d33a:	1d1a      	adds	r2, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6032      	str	r2, [r6, #0]
 800d340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d348:	2301      	movs	r3, #1
 800d34a:	e09e      	b.n	800d48a <_printf_i+0x1ea>
 800d34c:	6833      	ldr	r3, [r6, #0]
 800d34e:	6820      	ldr	r0, [r4, #0]
 800d350:	1d19      	adds	r1, r3, #4
 800d352:	6031      	str	r1, [r6, #0]
 800d354:	0606      	lsls	r6, r0, #24
 800d356:	d501      	bpl.n	800d35c <_printf_i+0xbc>
 800d358:	681d      	ldr	r5, [r3, #0]
 800d35a:	e003      	b.n	800d364 <_printf_i+0xc4>
 800d35c:	0645      	lsls	r5, r0, #25
 800d35e:	d5fb      	bpl.n	800d358 <_printf_i+0xb8>
 800d360:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d364:	2d00      	cmp	r5, #0
 800d366:	da03      	bge.n	800d370 <_printf_i+0xd0>
 800d368:	232d      	movs	r3, #45	@ 0x2d
 800d36a:	426d      	negs	r5, r5
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d370:	230a      	movs	r3, #10
 800d372:	4859      	ldr	r0, [pc, #356]	@ (800d4d8 <_printf_i+0x238>)
 800d374:	e011      	b.n	800d39a <_printf_i+0xfa>
 800d376:	6821      	ldr	r1, [r4, #0]
 800d378:	6833      	ldr	r3, [r6, #0]
 800d37a:	0608      	lsls	r0, r1, #24
 800d37c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d380:	d402      	bmi.n	800d388 <_printf_i+0xe8>
 800d382:	0649      	lsls	r1, r1, #25
 800d384:	bf48      	it	mi
 800d386:	b2ad      	uxthmi	r5, r5
 800d388:	2f6f      	cmp	r7, #111	@ 0x6f
 800d38a:	6033      	str	r3, [r6, #0]
 800d38c:	bf14      	ite	ne
 800d38e:	230a      	movne	r3, #10
 800d390:	2308      	moveq	r3, #8
 800d392:	4851      	ldr	r0, [pc, #324]	@ (800d4d8 <_printf_i+0x238>)
 800d394:	2100      	movs	r1, #0
 800d396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d39a:	6866      	ldr	r6, [r4, #4]
 800d39c:	2e00      	cmp	r6, #0
 800d39e:	bfa8      	it	ge
 800d3a0:	6821      	ldrge	r1, [r4, #0]
 800d3a2:	60a6      	str	r6, [r4, #8]
 800d3a4:	bfa4      	itt	ge
 800d3a6:	f021 0104 	bicge.w	r1, r1, #4
 800d3aa:	6021      	strge	r1, [r4, #0]
 800d3ac:	b90d      	cbnz	r5, 800d3b2 <_printf_i+0x112>
 800d3ae:	2e00      	cmp	r6, #0
 800d3b0:	d04b      	beq.n	800d44a <_printf_i+0x1aa>
 800d3b2:	4616      	mov	r6, r2
 800d3b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800d3b8:	fb03 5711 	mls	r7, r3, r1, r5
 800d3bc:	5dc7      	ldrb	r7, [r0, r7]
 800d3be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3c2:	462f      	mov	r7, r5
 800d3c4:	42bb      	cmp	r3, r7
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	d9f4      	bls.n	800d3b4 <_printf_i+0x114>
 800d3ca:	2b08      	cmp	r3, #8
 800d3cc:	d10b      	bne.n	800d3e6 <_printf_i+0x146>
 800d3ce:	6823      	ldr	r3, [r4, #0]
 800d3d0:	07df      	lsls	r7, r3, #31
 800d3d2:	d508      	bpl.n	800d3e6 <_printf_i+0x146>
 800d3d4:	6923      	ldr	r3, [r4, #16]
 800d3d6:	6861      	ldr	r1, [r4, #4]
 800d3d8:	4299      	cmp	r1, r3
 800d3da:	bfde      	ittt	le
 800d3dc:	2330      	movle	r3, #48	@ 0x30
 800d3de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d3e6:	1b92      	subs	r2, r2, r6
 800d3e8:	6122      	str	r2, [r4, #16]
 800d3ea:	464b      	mov	r3, r9
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	f8cd a000 	str.w	sl, [sp]
 800d3f4:	aa03      	add	r2, sp, #12
 800d3f6:	f7ff fee1 	bl	800d1bc <_printf_common>
 800d3fa:	3001      	adds	r0, #1
 800d3fc:	d14a      	bne.n	800d494 <_printf_i+0x1f4>
 800d3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d402:	b004      	add	sp, #16
 800d404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	f043 0320 	orr.w	r3, r3, #32
 800d40e:	6023      	str	r3, [r4, #0]
 800d410:	2778      	movs	r7, #120	@ 0x78
 800d412:	4832      	ldr	r0, [pc, #200]	@ (800d4dc <_printf_i+0x23c>)
 800d414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	6831      	ldr	r1, [r6, #0]
 800d41c:	061f      	lsls	r7, r3, #24
 800d41e:	f851 5b04 	ldr.w	r5, [r1], #4
 800d422:	d402      	bmi.n	800d42a <_printf_i+0x18a>
 800d424:	065f      	lsls	r7, r3, #25
 800d426:	bf48      	it	mi
 800d428:	b2ad      	uxthmi	r5, r5
 800d42a:	6031      	str	r1, [r6, #0]
 800d42c:	07d9      	lsls	r1, r3, #31
 800d42e:	bf44      	itt	mi
 800d430:	f043 0320 	orrmi.w	r3, r3, #32
 800d434:	6023      	strmi	r3, [r4, #0]
 800d436:	b11d      	cbz	r5, 800d440 <_printf_i+0x1a0>
 800d438:	2310      	movs	r3, #16
 800d43a:	e7ab      	b.n	800d394 <_printf_i+0xf4>
 800d43c:	4826      	ldr	r0, [pc, #152]	@ (800d4d8 <_printf_i+0x238>)
 800d43e:	e7e9      	b.n	800d414 <_printf_i+0x174>
 800d440:	6823      	ldr	r3, [r4, #0]
 800d442:	f023 0320 	bic.w	r3, r3, #32
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	e7f6      	b.n	800d438 <_printf_i+0x198>
 800d44a:	4616      	mov	r6, r2
 800d44c:	e7bd      	b.n	800d3ca <_printf_i+0x12a>
 800d44e:	6833      	ldr	r3, [r6, #0]
 800d450:	6825      	ldr	r5, [r4, #0]
 800d452:	1d18      	adds	r0, r3, #4
 800d454:	6961      	ldr	r1, [r4, #20]
 800d456:	6030      	str	r0, [r6, #0]
 800d458:	062e      	lsls	r6, r5, #24
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	d501      	bpl.n	800d462 <_printf_i+0x1c2>
 800d45e:	6019      	str	r1, [r3, #0]
 800d460:	e002      	b.n	800d468 <_printf_i+0x1c8>
 800d462:	0668      	lsls	r0, r5, #25
 800d464:	d5fb      	bpl.n	800d45e <_printf_i+0x1be>
 800d466:	8019      	strh	r1, [r3, #0]
 800d468:	2300      	movs	r3, #0
 800d46a:	4616      	mov	r6, r2
 800d46c:	6123      	str	r3, [r4, #16]
 800d46e:	e7bc      	b.n	800d3ea <_printf_i+0x14a>
 800d470:	6833      	ldr	r3, [r6, #0]
 800d472:	2100      	movs	r1, #0
 800d474:	1d1a      	adds	r2, r3, #4
 800d476:	6032      	str	r2, [r6, #0]
 800d478:	681e      	ldr	r6, [r3, #0]
 800d47a:	6862      	ldr	r2, [r4, #4]
 800d47c:	4630      	mov	r0, r6
 800d47e:	f000 f96b 	bl	800d758 <memchr>
 800d482:	b108      	cbz	r0, 800d488 <_printf_i+0x1e8>
 800d484:	1b80      	subs	r0, r0, r6
 800d486:	6060      	str	r0, [r4, #4]
 800d488:	6863      	ldr	r3, [r4, #4]
 800d48a:	6123      	str	r3, [r4, #16]
 800d48c:	2300      	movs	r3, #0
 800d48e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d492:	e7aa      	b.n	800d3ea <_printf_i+0x14a>
 800d494:	4632      	mov	r2, r6
 800d496:	4649      	mov	r1, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	6923      	ldr	r3, [r4, #16]
 800d49c:	47d0      	blx	sl
 800d49e:	3001      	adds	r0, #1
 800d4a0:	d0ad      	beq.n	800d3fe <_printf_i+0x15e>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	079b      	lsls	r3, r3, #30
 800d4a6:	d413      	bmi.n	800d4d0 <_printf_i+0x230>
 800d4a8:	68e0      	ldr	r0, [r4, #12]
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	4298      	cmp	r0, r3
 800d4ae:	bfb8      	it	lt
 800d4b0:	4618      	movlt	r0, r3
 800d4b2:	e7a6      	b.n	800d402 <_printf_i+0x162>
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	4632      	mov	r2, r6
 800d4b8:	4649      	mov	r1, r9
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	47d0      	blx	sl
 800d4be:	3001      	adds	r0, #1
 800d4c0:	d09d      	beq.n	800d3fe <_printf_i+0x15e>
 800d4c2:	3501      	adds	r5, #1
 800d4c4:	68e3      	ldr	r3, [r4, #12]
 800d4c6:	9903      	ldr	r1, [sp, #12]
 800d4c8:	1a5b      	subs	r3, r3, r1
 800d4ca:	42ab      	cmp	r3, r5
 800d4cc:	dcf2      	bgt.n	800d4b4 <_printf_i+0x214>
 800d4ce:	e7eb      	b.n	800d4a8 <_printf_i+0x208>
 800d4d0:	2500      	movs	r5, #0
 800d4d2:	f104 0619 	add.w	r6, r4, #25
 800d4d6:	e7f5      	b.n	800d4c4 <_printf_i+0x224>
 800d4d8:	0800d92f 	.word	0x0800d92f
 800d4dc:	0800d940 	.word	0x0800d940

0800d4e0 <__sflush_r>:
 800d4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e6:	0716      	lsls	r6, r2, #28
 800d4e8:	4605      	mov	r5, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	d454      	bmi.n	800d598 <__sflush_r+0xb8>
 800d4ee:	684b      	ldr	r3, [r1, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	dc02      	bgt.n	800d4fa <__sflush_r+0x1a>
 800d4f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	dd48      	ble.n	800d58c <__sflush_r+0xac>
 800d4fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4fc:	2e00      	cmp	r6, #0
 800d4fe:	d045      	beq.n	800d58c <__sflush_r+0xac>
 800d500:	2300      	movs	r3, #0
 800d502:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d506:	682f      	ldr	r7, [r5, #0]
 800d508:	6a21      	ldr	r1, [r4, #32]
 800d50a:	602b      	str	r3, [r5, #0]
 800d50c:	d030      	beq.n	800d570 <__sflush_r+0x90>
 800d50e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d510:	89a3      	ldrh	r3, [r4, #12]
 800d512:	0759      	lsls	r1, r3, #29
 800d514:	d505      	bpl.n	800d522 <__sflush_r+0x42>
 800d516:	6863      	ldr	r3, [r4, #4]
 800d518:	1ad2      	subs	r2, r2, r3
 800d51a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d51c:	b10b      	cbz	r3, 800d522 <__sflush_r+0x42>
 800d51e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d520:	1ad2      	subs	r2, r2, r3
 800d522:	2300      	movs	r3, #0
 800d524:	4628      	mov	r0, r5
 800d526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d528:	6a21      	ldr	r1, [r4, #32]
 800d52a:	47b0      	blx	r6
 800d52c:	1c43      	adds	r3, r0, #1
 800d52e:	89a3      	ldrh	r3, [r4, #12]
 800d530:	d106      	bne.n	800d540 <__sflush_r+0x60>
 800d532:	6829      	ldr	r1, [r5, #0]
 800d534:	291d      	cmp	r1, #29
 800d536:	d82b      	bhi.n	800d590 <__sflush_r+0xb0>
 800d538:	4a28      	ldr	r2, [pc, #160]	@ (800d5dc <__sflush_r+0xfc>)
 800d53a:	410a      	asrs	r2, r1
 800d53c:	07d6      	lsls	r6, r2, #31
 800d53e:	d427      	bmi.n	800d590 <__sflush_r+0xb0>
 800d540:	2200      	movs	r2, #0
 800d542:	6062      	str	r2, [r4, #4]
 800d544:	6922      	ldr	r2, [r4, #16]
 800d546:	04d9      	lsls	r1, r3, #19
 800d548:	6022      	str	r2, [r4, #0]
 800d54a:	d504      	bpl.n	800d556 <__sflush_r+0x76>
 800d54c:	1c42      	adds	r2, r0, #1
 800d54e:	d101      	bne.n	800d554 <__sflush_r+0x74>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	b903      	cbnz	r3, 800d556 <__sflush_r+0x76>
 800d554:	6560      	str	r0, [r4, #84]	@ 0x54
 800d556:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d558:	602f      	str	r7, [r5, #0]
 800d55a:	b1b9      	cbz	r1, 800d58c <__sflush_r+0xac>
 800d55c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d560:	4299      	cmp	r1, r3
 800d562:	d002      	beq.n	800d56a <__sflush_r+0x8a>
 800d564:	4628      	mov	r0, r5
 800d566:	f7ff fbf3 	bl	800cd50 <_free_r>
 800d56a:	2300      	movs	r3, #0
 800d56c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d56e:	e00d      	b.n	800d58c <__sflush_r+0xac>
 800d570:	2301      	movs	r3, #1
 800d572:	4628      	mov	r0, r5
 800d574:	47b0      	blx	r6
 800d576:	4602      	mov	r2, r0
 800d578:	1c50      	adds	r0, r2, #1
 800d57a:	d1c9      	bne.n	800d510 <__sflush_r+0x30>
 800d57c:	682b      	ldr	r3, [r5, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d0c6      	beq.n	800d510 <__sflush_r+0x30>
 800d582:	2b1d      	cmp	r3, #29
 800d584:	d001      	beq.n	800d58a <__sflush_r+0xaa>
 800d586:	2b16      	cmp	r3, #22
 800d588:	d11d      	bne.n	800d5c6 <__sflush_r+0xe6>
 800d58a:	602f      	str	r7, [r5, #0]
 800d58c:	2000      	movs	r0, #0
 800d58e:	e021      	b.n	800d5d4 <__sflush_r+0xf4>
 800d590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d594:	b21b      	sxth	r3, r3
 800d596:	e01a      	b.n	800d5ce <__sflush_r+0xee>
 800d598:	690f      	ldr	r7, [r1, #16]
 800d59a:	2f00      	cmp	r7, #0
 800d59c:	d0f6      	beq.n	800d58c <__sflush_r+0xac>
 800d59e:	0793      	lsls	r3, r2, #30
 800d5a0:	bf18      	it	ne
 800d5a2:	2300      	movne	r3, #0
 800d5a4:	680e      	ldr	r6, [r1, #0]
 800d5a6:	bf08      	it	eq
 800d5a8:	694b      	ldreq	r3, [r1, #20]
 800d5aa:	1bf6      	subs	r6, r6, r7
 800d5ac:	600f      	str	r7, [r1, #0]
 800d5ae:	608b      	str	r3, [r1, #8]
 800d5b0:	2e00      	cmp	r6, #0
 800d5b2:	ddeb      	ble.n	800d58c <__sflush_r+0xac>
 800d5b4:	4633      	mov	r3, r6
 800d5b6:	463a      	mov	r2, r7
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	6a21      	ldr	r1, [r4, #32]
 800d5bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d5c0:	47e0      	blx	ip
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	dc07      	bgt.n	800d5d6 <__sflush_r+0xf6>
 800d5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d2:	81a3      	strh	r3, [r4, #12]
 800d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d6:	4407      	add	r7, r0
 800d5d8:	1a36      	subs	r6, r6, r0
 800d5da:	e7e9      	b.n	800d5b0 <__sflush_r+0xd0>
 800d5dc:	dfbffffe 	.word	0xdfbffffe

0800d5e0 <_fflush_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	690b      	ldr	r3, [r1, #16]
 800d5e4:	4605      	mov	r5, r0
 800d5e6:	460c      	mov	r4, r1
 800d5e8:	b913      	cbnz	r3, 800d5f0 <_fflush_r+0x10>
 800d5ea:	2500      	movs	r5, #0
 800d5ec:	4628      	mov	r0, r5
 800d5ee:	bd38      	pop	{r3, r4, r5, pc}
 800d5f0:	b118      	cbz	r0, 800d5fa <_fflush_r+0x1a>
 800d5f2:	6a03      	ldr	r3, [r0, #32]
 800d5f4:	b90b      	cbnz	r3, 800d5fa <_fflush_r+0x1a>
 800d5f6:	f7ff f94d 	bl	800c894 <__sinit>
 800d5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0f3      	beq.n	800d5ea <_fflush_r+0xa>
 800d602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d604:	07d0      	lsls	r0, r2, #31
 800d606:	d404      	bmi.n	800d612 <_fflush_r+0x32>
 800d608:	0599      	lsls	r1, r3, #22
 800d60a:	d402      	bmi.n	800d612 <_fflush_r+0x32>
 800d60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d60e:	f7ff fb8e 	bl	800cd2e <__retarget_lock_acquire_recursive>
 800d612:	4628      	mov	r0, r5
 800d614:	4621      	mov	r1, r4
 800d616:	f7ff ff63 	bl	800d4e0 <__sflush_r>
 800d61a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d61c:	4605      	mov	r5, r0
 800d61e:	07da      	lsls	r2, r3, #31
 800d620:	d4e4      	bmi.n	800d5ec <_fflush_r+0xc>
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	059b      	lsls	r3, r3, #22
 800d626:	d4e1      	bmi.n	800d5ec <_fflush_r+0xc>
 800d628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d62a:	f7ff fb81 	bl	800cd30 <__retarget_lock_release_recursive>
 800d62e:	e7dd      	b.n	800d5ec <_fflush_r+0xc>

0800d630 <__swhatbuf_r>:
 800d630:	b570      	push	{r4, r5, r6, lr}
 800d632:	460c      	mov	r4, r1
 800d634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d638:	4615      	mov	r5, r2
 800d63a:	2900      	cmp	r1, #0
 800d63c:	461e      	mov	r6, r3
 800d63e:	b096      	sub	sp, #88	@ 0x58
 800d640:	da0c      	bge.n	800d65c <__swhatbuf_r+0x2c>
 800d642:	89a3      	ldrh	r3, [r4, #12]
 800d644:	2100      	movs	r1, #0
 800d646:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d64a:	bf14      	ite	ne
 800d64c:	2340      	movne	r3, #64	@ 0x40
 800d64e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d652:	2000      	movs	r0, #0
 800d654:	6031      	str	r1, [r6, #0]
 800d656:	602b      	str	r3, [r5, #0]
 800d658:	b016      	add	sp, #88	@ 0x58
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	466a      	mov	r2, sp
 800d65e:	f000 f849 	bl	800d6f4 <_fstat_r>
 800d662:	2800      	cmp	r0, #0
 800d664:	dbed      	blt.n	800d642 <__swhatbuf_r+0x12>
 800d666:	9901      	ldr	r1, [sp, #4]
 800d668:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d66c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d670:	4259      	negs	r1, r3
 800d672:	4159      	adcs	r1, r3
 800d674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d678:	e7eb      	b.n	800d652 <__swhatbuf_r+0x22>

0800d67a <__smakebuf_r>:
 800d67a:	898b      	ldrh	r3, [r1, #12]
 800d67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d67e:	079d      	lsls	r5, r3, #30
 800d680:	4606      	mov	r6, r0
 800d682:	460c      	mov	r4, r1
 800d684:	d507      	bpl.n	800d696 <__smakebuf_r+0x1c>
 800d686:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d68a:	6023      	str	r3, [r4, #0]
 800d68c:	6123      	str	r3, [r4, #16]
 800d68e:	2301      	movs	r3, #1
 800d690:	6163      	str	r3, [r4, #20]
 800d692:	b003      	add	sp, #12
 800d694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d696:	466a      	mov	r2, sp
 800d698:	ab01      	add	r3, sp, #4
 800d69a:	f7ff ffc9 	bl	800d630 <__swhatbuf_r>
 800d69e:	9f00      	ldr	r7, [sp, #0]
 800d6a0:	4605      	mov	r5, r0
 800d6a2:	4639      	mov	r1, r7
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f7ff fbbd 	bl	800ce24 <_malloc_r>
 800d6aa:	b948      	cbnz	r0, 800d6c0 <__smakebuf_r+0x46>
 800d6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b0:	059a      	lsls	r2, r3, #22
 800d6b2:	d4ee      	bmi.n	800d692 <__smakebuf_r+0x18>
 800d6b4:	f023 0303 	bic.w	r3, r3, #3
 800d6b8:	f043 0302 	orr.w	r3, r3, #2
 800d6bc:	81a3      	strh	r3, [r4, #12]
 800d6be:	e7e2      	b.n	800d686 <__smakebuf_r+0xc>
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6ca:	81a3      	strh	r3, [r4, #12]
 800d6cc:	9b01      	ldr	r3, [sp, #4]
 800d6ce:	6020      	str	r0, [r4, #0]
 800d6d0:	b15b      	cbz	r3, 800d6ea <__smakebuf_r+0x70>
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6d8:	f000 f81e 	bl	800d718 <_isatty_r>
 800d6dc:	b128      	cbz	r0, 800d6ea <__smakebuf_r+0x70>
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	f023 0303 	bic.w	r3, r3, #3
 800d6e4:	f043 0301 	orr.w	r3, r3, #1
 800d6e8:	81a3      	strh	r3, [r4, #12]
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	431d      	orrs	r5, r3
 800d6ee:	81a5      	strh	r5, [r4, #12]
 800d6f0:	e7cf      	b.n	800d692 <__smakebuf_r+0x18>
	...

0800d6f4 <_fstat_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	4d06      	ldr	r5, [pc, #24]	@ (800d714 <_fstat_r+0x20>)
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	4608      	mov	r0, r1
 800d6fe:	4611      	mov	r1, r2
 800d700:	602b      	str	r3, [r5, #0]
 800d702:	f7f3 fdf1 	bl	80012e8 <_fstat>
 800d706:	1c43      	adds	r3, r0, #1
 800d708:	d102      	bne.n	800d710 <_fstat_r+0x1c>
 800d70a:	682b      	ldr	r3, [r5, #0]
 800d70c:	b103      	cbz	r3, 800d710 <_fstat_r+0x1c>
 800d70e:	6023      	str	r3, [r4, #0]
 800d710:	bd38      	pop	{r3, r4, r5, pc}
 800d712:	bf00      	nop
 800d714:	20003004 	.word	0x20003004

0800d718 <_isatty_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	2300      	movs	r3, #0
 800d71c:	4d05      	ldr	r5, [pc, #20]	@ (800d734 <_isatty_r+0x1c>)
 800d71e:	4604      	mov	r4, r0
 800d720:	4608      	mov	r0, r1
 800d722:	602b      	str	r3, [r5, #0]
 800d724:	f7f3 fdef 	bl	8001306 <_isatty>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d102      	bne.n	800d732 <_isatty_r+0x1a>
 800d72c:	682b      	ldr	r3, [r5, #0]
 800d72e:	b103      	cbz	r3, 800d732 <_isatty_r+0x1a>
 800d730:	6023      	str	r3, [r4, #0]
 800d732:	bd38      	pop	{r3, r4, r5, pc}
 800d734:	20003004 	.word	0x20003004

0800d738 <_sbrk_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	2300      	movs	r3, #0
 800d73c:	4d05      	ldr	r5, [pc, #20]	@ (800d754 <_sbrk_r+0x1c>)
 800d73e:	4604      	mov	r4, r0
 800d740:	4608      	mov	r0, r1
 800d742:	602b      	str	r3, [r5, #0]
 800d744:	f7f3 fdf6 	bl	8001334 <_sbrk>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_sbrk_r+0x1a>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_sbrk_r+0x1a>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	20003004 	.word	0x20003004

0800d758 <memchr>:
 800d758:	4603      	mov	r3, r0
 800d75a:	b510      	push	{r4, lr}
 800d75c:	b2c9      	uxtb	r1, r1
 800d75e:	4402      	add	r2, r0
 800d760:	4293      	cmp	r3, r2
 800d762:	4618      	mov	r0, r3
 800d764:	d101      	bne.n	800d76a <memchr+0x12>
 800d766:	2000      	movs	r0, #0
 800d768:	e003      	b.n	800d772 <memchr+0x1a>
 800d76a:	7804      	ldrb	r4, [r0, #0]
 800d76c:	3301      	adds	r3, #1
 800d76e:	428c      	cmp	r4, r1
 800d770:	d1f6      	bne.n	800d760 <memchr+0x8>
 800d772:	bd10      	pop	{r4, pc}

0800d774 <_init>:
 800d774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d776:	bf00      	nop
 800d778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d77a:	bc08      	pop	{r3}
 800d77c:	469e      	mov	lr, r3
 800d77e:	4770      	bx	lr

0800d780 <_fini>:
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d782:	bf00      	nop
 800d784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d786:	bc08      	pop	{r3}
 800d788:	469e      	mov	lr, r3
 800d78a:	4770      	bx	lr
