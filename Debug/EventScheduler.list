
EventScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c85c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800c970  0800c970  0000d970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cec8  0800cec8  0000e34c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cec8  0800cec8  0000dec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ced0  0800ced0  0000e34c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ced0  0800ced0  0000ded0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ced4  0800ced4  0000ded4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000034c  20000000  0800ced8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001444  2000034c  0800d224  0000e34c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001790  0800d224  0000e790  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e34c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe17  00000000  00000000  0000e375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003284  00000000  00000000  0001e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00021410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aef  00000000  00000000  000222a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab27  00000000  00000000  00022d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c0e  00000000  00000000  0003d8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899c9  00000000  00000000  000514cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dae95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  000daed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000dfa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c954 	.word	0x0800c954

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800c954 	.word	0x0800c954

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <DelayMicro>:
#include "dht22.h"
//--------------------------------------------------
__STATIC_INLINE void DelayMicro(__IO uint32_t micros)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
micros *= (SystemCoreClock / 1000000) / 9;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <DelayMicro+0x34>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <DelayMicro+0x38>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0ddb      	lsrs	r3, r3, #23
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	607b      	str	r3, [r7, #4]
/* Wait till done */
while (micros--) ;
 8000f74:	bf00      	nop
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	1e5a      	subs	r2, r3, #1
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1fa      	bne.n	8000f76 <DelayMicro+0x1e>
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	ee9bfab5 	.word	0xee9bfab5

08000f94 <dht22_init>:

//--------------------------------------------------
void dht22_init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_DeInit(data_port, data_pin);
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	480e      	ldr	r0, [pc, #56]	@ (8000fe4 <dht22_init+0x50>)
 8000faa:	f001 f8cf 	bl	800214c <HAL_GPIO_DeInit>
  GPIO_InitStruct.Pin = data_pin;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fb2:	2311      	movs	r3, #17
 8000fb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(data_port, &GPIO_InitStruct);
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4808      	ldr	r0, [pc, #32]	@ (8000fe4 <dht22_init+0x50>)
 8000fc4:	f000 ff3e 	bl	8001e44 <HAL_GPIO_Init>
	///////////////////////////////////////////////////////
  HAL_Delay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fcc:	f000 fe08 	bl	8001be0 <HAL_Delay>
  HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <dht22_init+0x50>)
 8000fd6:	f001 f98c 	bl	80022f2 <HAL_GPIO_WritePin>

}
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40010800 	.word	0x40010800

08000fe8 <DHT22_Get_Temp>:

uint8_t DHT22_Get_Temp(float *Temp)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	uint8_t dataArray[6], myChecksum;
	uint16_t Temp16;
	uint8_t i, j = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4854      	ldr	r0, [pc, #336]	@ (800114c <DHT22_Get_Temp+0x164>)
 8000ffa:	f001 f97a 	bl	80022f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2104      	movs	r1, #4
 8001002:	4852      	ldr	r0, [pc, #328]	@ (800114c <DHT22_Get_Temp+0x164>)
 8001004:	f001 f975 	bl	80022f2 <HAL_GPIO_WritePin>
	DelayMicro(2000);
 8001008:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800100c:	f7ff ffa4 	bl	8000f58 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2104      	movs	r1, #4
 8001014:	484d      	ldr	r0, [pc, #308]	@ (800114c <DHT22_Get_Temp+0x164>)
 8001016:	f001 f96c 	bl	80022f2 <HAL_GPIO_WritePin>
	DelayMicro(1200);
 800101a:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800101e:	f7ff ff9b 	bl	8000f58 <DelayMicro>
	HAL_GPIO_WritePin(data_port,data_pin,GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2104      	movs	r1, #4
 8001026:	4849      	ldr	r0, [pc, #292]	@ (800114c <DHT22_Get_Temp+0x164>)
 8001028:	f001 f963 	bl	80022f2 <HAL_GPIO_WritePin>
	DelayMicro(39);//20-40
 800102c:	2027      	movs	r0, #39	@ 0x27
 800102e:	f7ff ff93 	bl	8000f58 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_SET)
 8001032:	2104      	movs	r1, #4
 8001034:	4845      	ldr	r0, [pc, #276]	@ (800114c <DHT22_Get_Temp+0x164>)
 8001036:	f001 f945 	bl	80022c4 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <DHT22_Get_Temp+0x5c>
	{
		return 0;
 8001040:	2300      	movs	r3, #0
 8001042:	e07e      	b.n	8001142 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 8001044:	2050      	movs	r0, #80	@ 0x50
 8001046:	f7ff ff87 	bl	8000f58 <DelayMicro>
	if(HAL_GPIO_ReadPin(data_port,data_pin)==GPIO_PIN_RESET)
 800104a:	2104      	movs	r1, #4
 800104c:	483f      	ldr	r0, [pc, #252]	@ (800114c <DHT22_Get_Temp+0x164>)
 800104e:	f001 f939 	bl	80022c4 <HAL_GPIO_ReadPin>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <DHT22_Get_Temp+0x74>
	{
		return 0;
 8001058:	2300      	movs	r3, #0
 800105a:	e072      	b.n	8001142 <DHT22_Get_Temp+0x15a>
	}
	DelayMicro(80);
 800105c:	2050      	movs	r0, #80	@ 0x50
 800105e:	f7ff ff7b 	bl	8000f58 <DelayMicro>

	for (j=0; j<5; j++)
 8001062:	2300      	movs	r3, #0
 8001064:	757b      	strb	r3, [r7, #21]
 8001066:	e040      	b.n	80010ea <DHT22_Get_Temp+0x102>
	{
		dataArray[j]=0;
 8001068:	7d7b      	ldrb	r3, [r7, #21]
 800106a:	3318      	adds	r3, #24
 800106c:	443b      	add	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(i=0; i<8; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	75bb      	strb	r3, [r7, #22]
 8001078:	e031      	b.n	80010de <DHT22_Get_Temp+0xf6>
		{
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_RESET);
 800107a:	bf00      	nop
 800107c:	2104      	movs	r1, #4
 800107e:	4833      	ldr	r0, [pc, #204]	@ (800114c <DHT22_Get_Temp+0x164>)
 8001080:	f001 f920 	bl	80022c4 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f8      	beq.n	800107c <DHT22_Get_Temp+0x94>
			DelayMicro(30);
 800108a:	201e      	movs	r0, #30
 800108c:	f7ff ff64 	bl	8000f58 <DelayMicro>
				if(HAL_GPIO_ReadPin(data_port,data_pin))
 8001090:	2104      	movs	r1, #4
 8001092:	482e      	ldr	r0, [pc, #184]	@ (800114c <DHT22_Get_Temp+0x164>)
 8001094:	f001 f916 	bl	80022c4 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d014      	beq.n	80010c8 <DHT22_Get_Temp+0xe0>
				dataArray[j] |= (1<<(7-i));
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	3318      	adds	r3, #24
 80010a2:	443b      	add	r3, r7
 80010a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80010a8:	b25a      	sxtb	r2, r3
 80010aa:	7dbb      	ldrb	r3, [r7, #22]
 80010ac:	f1c3 0307 	rsb	r3, r3, #7
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	b25b      	sxtb	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25a      	sxtb	r2, r3
 80010bc:	7d7b      	ldrb	r3, [r7, #21]
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	3318      	adds	r3, #24
 80010c2:	443b      	add	r3, r7
 80010c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while((HAL_GPIO_ReadPin(data_port,data_pin))==GPIO_PIN_SET);
 80010c8:	bf00      	nop
 80010ca:	2104      	movs	r1, #4
 80010cc:	481f      	ldr	r0, [pc, #124]	@ (800114c <DHT22_Get_Temp+0x164>)
 80010ce:	f001 f8f9 	bl	80022c4 <HAL_GPIO_ReadPin>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d0f8      	beq.n	80010ca <DHT22_Get_Temp+0xe2>
		for(i=0; i<8; i++)
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	3301      	adds	r3, #1
 80010dc:	75bb      	strb	r3, [r7, #22]
 80010de:	7dbb      	ldrb	r3, [r7, #22]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d9ca      	bls.n	800107a <DHT22_Get_Temp+0x92>
	for (j=0; j<5; j++)
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	3301      	adds	r3, #1
 80010e8:	757b      	strb	r3, [r7, #21]
 80010ea:	7d7b      	ldrb	r3, [r7, #21]
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d9bb      	bls.n	8001068 <DHT22_Get_Temp+0x80>
		}
	}
	myChecksum = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	753b      	strb	r3, [r7, #20]
 80010f8:	e00a      	b.n	8001110 <DHT22_Get_Temp+0x128>
	{
		myChecksum += dataArray[k];
 80010fa:	7d3b      	ldrb	r3, [r7, #20]
 80010fc:	3318      	adds	r3, #24
 80010fe:	443b      	add	r3, r7
 8001100:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	4413      	add	r3, r2
 8001108:	75fb      	strb	r3, [r7, #23]
	for(uint8_t k=0; k<4; k++)
 800110a:	7d3b      	ldrb	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	753b      	strb	r3, [r7, #20]
 8001110:	7d3b      	ldrb	r3, [r7, #20]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d9f1      	bls.n	80010fa <DHT22_Get_Temp+0x112>
	}
		Temp16 = (dataArray[2] <<8) | dataArray[3];
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b21a      	sxth	r2, r3
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	827b      	strh	r3, [r7, #18]

		*Temp = Temp16/10.0f;
 8001126:	8a7b      	ldrh	r3, [r7, #18]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd71 	bl	8000c10 <__aeabi_i2f>
 800112e:	4603      	mov	r3, r0
 8001130:	4907      	ldr	r1, [pc, #28]	@ (8001150 <DHT22_Get_Temp+0x168>)
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fe74 	bl	8000e20 <__aeabi_fdiv>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
		return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010800 	.word	0x40010800
 8001150:	41200000 	.word	0x41200000

08001154 <__io_putchar>:
// ************** DEFINE ****************

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    while (CDC_Transmit_FS((uint8_t *)&ch, 1) == USBD_BUSY);
 800115c:	bf00      	nop
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2101      	movs	r1, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f008 fb1a 	bl	800979c <CDC_Transmit_FS>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d0f7      	beq.n	800115e <__io_putchar+0xa>
    return ch;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <MPU6050_Init>:
 * Reference to initialized common hi2c1 variable in main.c
 *
 * */
extern I2C_HandleTypeDef hi2c1;

inline void MPU6050_Init (void){
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af04      	add	r7, sp, #16
	uint8_t check,Data;
	// check the sensor ID (SEE WHO AM I DATASHEET)
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2301      	movs	r3, #1
 800118e:	2275      	movs	r2, #117	@ 0x75
 8001190:	21d0      	movs	r1, #208	@ 0xd0
 8001192:	4823      	ldr	r0, [pc, #140]	@ (8001220 <MPU6050_Init+0xa8>)
 8001194:	f001 fb04 	bl	80027a0 <HAL_I2C_Mem_Read>
	if (check == 104) // the sensor is present
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b68      	cmp	r3, #104	@ 0x68
 800119c:	d13b      	bne.n	8001216 <MPU6050_Init+0x9e>
	{
		// setting PWR Registers
		Data = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	1dbb      	adds	r3, r7, #6
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	226b      	movs	r2, #107	@ 0x6b
 80011b4:	21d0      	movs	r1, #208	@ 0xd0
 80011b6:	481a      	ldr	r0, [pc, #104]	@ (8001220 <MPU6050_Init+0xa8>)
 80011b8:	f001 f9f8 	bl	80025ac <HAL_I2C_Mem_Write>
		// var sample rate with SMPLRT_DIV_REG
		Data = 0x07;
 80011bc:	2307      	movs	r3, #7
 80011be:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	2219      	movs	r2, #25
 80011d2:	21d0      	movs	r1, #208	@ 0xd0
 80011d4:	4812      	ldr	r0, [pc, #72]	@ (8001220 <MPU6050_Init+0xa8>)
 80011d6:	f001 f9e9 	bl	80025ac <HAL_I2C_Mem_Write>
		// var accelerometer config with ACCEL_CONFIG_REG
		Data = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80011de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e2:	9302      	str	r3, [sp, #8]
 80011e4:	2301      	movs	r3, #1
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	1dbb      	adds	r3, r7, #6
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2301      	movs	r3, #1
 80011ee:	221c      	movs	r2, #28
 80011f0:	21d0      	movs	r1, #208	@ 0xd0
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <MPU6050_Init+0xa8>)
 80011f4:	f001 f9da 	bl	80025ac <HAL_I2C_Mem_Write>
		// var Gyro config with GYRO_CONFIG_REG
		Data = 0x00;
 80011f8:	2300      	movs	r3, #0
 80011fa:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	1dbb      	adds	r3, r7, #6
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	221b      	movs	r2, #27
 800120e:	21d0      	movs	r1, #208	@ 0xd0
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <MPU6050_Init+0xa8>)
 8001212:	f001 f9cb 	bl	80025ac <HAL_I2C_Mem_Write>
	}
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000428 	.word	0x20000428

08001224 <MPU6050_Read_Accel>:


inline void MPU6050_Read_Accel ( void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2306      	movs	r3, #6
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	463b      	mov	r3, r7
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2301      	movs	r3, #1
 800123a:	223b      	movs	r2, #59	@ 0x3b
 800123c:	21d0      	movs	r1, #208	@ 0xd0
 800123e:	4829      	ldr	r0, [pc, #164]	@ (80012e4 <MPU6050_Read_Accel+0xc0>)
 8001240:	f001 faae 	bl	80027a0 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001244:	783b      	ldrb	r3, [r7, #0]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b21a      	sxth	r2, r3
 800124a:	787b      	ldrb	r3, [r7, #1]
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <MPU6050_Read_Accel+0xc4>)
 8001254:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21a      	sxth	r2, r3
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b21      	ldr	r3, [pc, #132]	@ (80012ec <MPU6050_Read_Accel+0xc8>)
 8001266:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001268:	793b      	ldrb	r3, [r7, #4]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	797b      	ldrb	r3, [r7, #5]
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21a      	sxth	r2, r3
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <MPU6050_Read_Accel+0xcc>)
 8001278:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = (float)Accel_X_RAW/16384.0;
 800127a:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <MPU6050_Read_Accel+0xc4>)
 800127c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fcc5 	bl	8000c10 <__aeabi_i2f>
 8001286:	4603      	mov	r3, r0
 8001288:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fdc7 	bl	8000e20 <__aeabi_fdiv>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MPU6050_Read_Accel+0xd0>)
 8001298:	601a      	str	r2, [r3, #0]
	Ay = (float)Accel_Y_RAW/16384.0;
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <MPU6050_Read_Accel+0xc8>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fcb5 	bl	8000c10 <__aeabi_i2f>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fdb7 	bl	8000e20 <__aeabi_fdiv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MPU6050_Read_Accel+0xd4>)
 80012b8:	601a      	str	r2, [r3, #0]
	Az = (float)Accel_Z_RAW/16384.0;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <MPU6050_Read_Accel+0xcc>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fca5 	bl	8000c10 <__aeabi_i2f>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fda7 	bl	8000e20 <__aeabi_fdiv>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <MPU6050_Read_Accel+0xd8>)
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000428 	.word	0x20000428
 80012e8:	20000368 	.word	0x20000368
 80012ec:	2000036a 	.word	0x2000036a
 80012f0:	2000036c 	.word	0x2000036c
 80012f4:	20000370 	.word	0x20000370
 80012f8:	20000374 	.word	0x20000374
 80012fc:	20000378 	.word	0x20000378

08001300 <isQueueEmpty>:
#define MAX_EVENTS 100
Event eventQueue[MAX_EVENTS];
int front = -1, rear = -1;

// Hàm kiểm tra hàng đợi rỗng
bool isQueueEmpty() {
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
    return front == -1;
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <isQueueEmpty+0x1c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	20000000 	.word	0x20000000

08001320 <isQueueFull>:

// Hàm kiểm tra hàng đợi đầy
bool isQueueFull() {
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    return (rear + 1) % MAX_EVENTS == front;
 8001324:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <isQueueFull+0x34>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <isQueueFull+0x38>)
 800132c:	fb83 1302 	smull	r1, r3, r3, r2
 8001330:	1159      	asrs	r1, r3, #5
 8001332:	17d3      	asrs	r3, r2, #31
 8001334:	1acb      	subs	r3, r1, r3
 8001336:	2164      	movs	r1, #100	@ 0x64
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <isQueueFull+0x3c>)
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	4293      	cmp	r3, r2
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	20000004 	.word	0x20000004
 8001358:	51eb851f 	.word	0x51eb851f
 800135c:	20000000 	.word	0x20000000

08001360 <enqueue>:

// Thêm sự kiện vào hàng đợi
bool enqueue(Event event) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
    if (isQueueFull()) {
 800136a:	f7ff ffd9 	bl	8001320 <isQueueFull>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d004      	beq.n	800137e <enqueue+0x1e>
        printf("Event queue is full!\n");
 8001374:	4815      	ldr	r0, [pc, #84]	@ (80013cc <enqueue+0x6c>)
 8001376:	f009 fb75 	bl	800aa64 <puts>
        return false;
 800137a:	2300      	movs	r3, #0
 800137c:	e021      	b.n	80013c2 <enqueue+0x62>
    }
    if (isQueueEmpty()) {
 800137e:	f7ff ffbf 	bl	8001300 <isQueueEmpty>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d007      	beq.n	8001398 <enqueue+0x38>
        front = rear = 0;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <enqueue+0x70>)
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <enqueue+0x70>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <enqueue+0x74>)
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e00e      	b.n	80013b6 <enqueue+0x56>
    } else {
        rear = (rear + 1) % MAX_EVENTS;
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <enqueue+0x70>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <enqueue+0x78>)
 80013a0:	fb83 1302 	smull	r1, r3, r3, r2
 80013a4:	1159      	asrs	r1, r3, #5
 80013a6:	17d3      	asrs	r3, r2, #31
 80013a8:	1acb      	subs	r3, r1, r3
 80013aa:	2164      	movs	r1, #100	@ 0x64
 80013ac:	fb01 f303 	mul.w	r3, r1, r3
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <enqueue+0x70>)
 80013b4:	6013      	str	r3, [r2, #0]
    }
    eventQueue[rear] = event;
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <enqueue+0x70>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4908      	ldr	r1, [pc, #32]	@ (80013dc <enqueue+0x7c>)
 80013bc:	79fa      	ldrb	r2, [r7, #7]
 80013be:	54ca      	strb	r2, [r1, r3]
    return true;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	0800c970 	.word	0x0800c970
 80013d0:	20000004 	.word	0x20000004
 80013d4:	20000000 	.word	0x20000000
 80013d8:	51eb851f 	.word	0x51eb851f
 80013dc:	200003c4 	.word	0x200003c4

080013e0 <dequeue>:

// Lấy sự kiện ra khỏi hàng đợi
Event dequeue() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
    if (isQueueEmpty()) {
 80013e6:	f7ff ff8b 	bl	8001300 <isQueueEmpty>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <dequeue+0x1a>
        printf("Event queue is empty!\n");
 80013f0:	4816      	ldr	r0, [pc, #88]	@ (800144c <dequeue+0x6c>)
 80013f2:	f009 fb37 	bl	800aa64 <puts>
        return -1; // Giá trị lỗi
 80013f6:	23ff      	movs	r3, #255	@ 0xff
 80013f8:	e023      	b.n	8001442 <dequeue+0x62>
    }
    Event event = eventQueue[front];
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <dequeue+0x70>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a15      	ldr	r2, [pc, #84]	@ (8001454 <dequeue+0x74>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	71fb      	strb	r3, [r7, #7]
    if (front == rear) { // Nếu chỉ còn một phần tử
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <dequeue+0x70>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <dequeue+0x78>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d108      	bne.n	8001422 <dequeue+0x42>
        front = rear = -1;
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <dequeue+0x78>)
 8001412:	f04f 32ff 	mov.w	r2, #4294967295
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <dequeue+0x78>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <dequeue+0x70>)
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e00e      	b.n	8001440 <dequeue+0x60>
    } else {
        front = (front + 1) % MAX_EVENTS;
 8001422:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <dequeue+0x70>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1c5a      	adds	r2, r3, #1
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <dequeue+0x7c>)
 800142a:	fb83 1302 	smull	r1, r3, r3, r2
 800142e:	1159      	asrs	r1, r3, #5
 8001430:	17d3      	asrs	r3, r2, #31
 8001432:	1acb      	subs	r3, r1, r3
 8001434:	2164      	movs	r1, #100	@ 0x64
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <dequeue+0x70>)
 800143e:	6013      	str	r3, [r2, #0]
    }
    return event;
 8001440:	79fb      	ldrb	r3, [r7, #7]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	0800c988 	.word	0x0800c988
 8001450:	20000000 	.word	0x20000000
 8001454:	200003c4 	.word	0x200003c4
 8001458:	20000004 	.word	0x20000004
 800145c:	51eb851f 	.word	0x51eb851f

08001460 <handleTask1>:

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
void handleTask1() {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
    printf("Task 1: Reading temperature...\n");
 8001464:	4808      	ldr	r0, [pc, #32]	@ (8001488 <handleTask1+0x28>)
 8001466:	f009 fafd 	bl	800aa64 <puts>

    DHT22_Get_Temp(&temp);
 800146a:	4808      	ldr	r0, [pc, #32]	@ (800148c <handleTask1+0x2c>)
 800146c:	f7ff fdbc 	bl	8000fe8 <DHT22_Get_Temp>

   	  	  printf("t=%f\n", temp);
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <handleTask1+0x2c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffe1 	bl	800043c <__aeabi_f2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4804      	ldr	r0, [pc, #16]	@ (8001490 <handleTask1+0x30>)
 8001480:	f009 fa88 	bl	800a994 <iprintf>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}
 8001488:	0800c9a0 	.word	0x0800c9a0
 800148c:	2000037c 	.word	0x2000037c
 8001490:	0800c9c0 	.word	0x0800c9c0

08001494 <handleTask2>:

void handleTask2() {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    printf("Task 2: Reading acceleration...\n");
 8001498:	4808      	ldr	r0, [pc, #32]	@ (80014bc <handleTask2+0x28>)
 800149a:	f009 fae3 	bl	800aa64 <puts>

    MPU6050_Read_Accel();
 800149e:	f7ff fec1 	bl	8001224 <MPU6050_Read_Accel>
    	  //	  intPart = (int)floorf(Ax * 100);
    	  	  printf("Ax=%f\n", Ax);
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <handleTask2+0x2c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe ffc8 	bl	800043c <__aeabi_f2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <handleTask2+0x30>)
 80014b2:	f009 fa6f 	bl	800a994 <iprintf>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	0800c9c8 	.word	0x0800c9c8
 80014c0:	20000370 	.word	0x20000370
 80014c4:	0800c9e8 	.word	0x0800c9e8

080014c8 <eventScheduler>:
void eventScheduler() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
    while (1) {
    	if (!status) {
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <eventScheduler+0x80>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f083 0301 	eor.w	r3, r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <eventScheduler+0x24>
    	            printf("Waiting for 'start' command...\n");
 80014dc:	481b      	ldr	r0, [pc, #108]	@ (800154c <eventScheduler+0x84>)
 80014de:	f009 fac1 	bl	800aa64 <puts>
    	            HAL_Delay(1000); // Chờ 1 giây trước khi kiểm tra lại
 80014e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014e6:	f000 fb7b 	bl	8001be0 <HAL_Delay>
    	            continue; // Quay lại đầu vòng lặp
 80014ea:	e02c      	b.n	8001546 <eventScheduler+0x7e>
    	        }

       if (isQueueEmpty()) {
 80014ec:	f7ff ff08 	bl	8001300 <isQueueEmpty>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <eventScheduler+0x3e>
            printf("No events, system sleeping...\n");
 80014f6:	4816      	ldr	r0, [pc, #88]	@ (8001550 <eventScheduler+0x88>)
 80014f8:	f009 fab4 	bl	800aa64 <puts>
            // Giả lập chế độ "ngủ" bằng cách chờ 100ms
            HAL_Delay(1000);
 80014fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001500:	f000 fb6e 	bl	8001be0 <HAL_Delay>
 8001504:	e7e3      	b.n	80014ce <eventScheduler+0x6>
        } else {
            Event event = dequeue(); // Lấy sự kiện ra khỏi hàng đợi
 8001506:	f7ff ff6b 	bl	80013e0 <dequeue>
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]

            // Xử lý sự kiện tương ứng
            switch (event) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <eventScheduler+0x52>
 8001514:	2b01      	cmp	r3, #1
 8001516:	d009      	beq.n	800152c <eventScheduler+0x64>
 8001518:	e011      	b.n	800153e <eventScheduler+0x76>
                case TASK_1_EVENT:
                	printf("Add event 1 to queue\n");
 800151a:	480e      	ldr	r0, [pc, #56]	@ (8001554 <eventScheduler+0x8c>)
 800151c:	f009 faa2 	bl	800aa64 <puts>
                    handleTask1();
 8001520:	f7ff ff9e 	bl	8001460 <handleTask1>
                    printf("Remove t1 from queue.\n");
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <eventScheduler+0x90>)
 8001526:	f009 fa9d 	bl	800aa64 <puts>
                    break;
 800152a:	e00c      	b.n	8001546 <eventScheduler+0x7e>
                case TASK_2_EVENT:
                	printf("Add event 2 to queue\n");
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <eventScheduler+0x94>)
 800152e:	f009 fa99 	bl	800aa64 <puts>
                    handleTask2();
 8001532:	f7ff ffaf 	bl	8001494 <handleTask2>

                    printf("Remove t2 from queue.\n");
 8001536:	480a      	ldr	r0, [pc, #40]	@ (8001560 <eventScheduler+0x98>)
 8001538:	f009 fa94 	bl	800aa64 <puts>
                    break;
 800153c:	e003      	b.n	8001546 <eventScheduler+0x7e>
                default:
                    printf("Unknown event!\n");
 800153e:	4809      	ldr	r0, [pc, #36]	@ (8001564 <eventScheduler+0x9c>)
 8001540:	f009 fa90 	bl	800aa64 <puts>
                    break;
 8001544:	bf00      	nop
    	if (!status) {
 8001546:	e7c2      	b.n	80014ce <eventScheduler+0x6>
 8001548:	20000380 	.word	0x20000380
 800154c:	0800c9f0 	.word	0x0800c9f0
 8001550:	0800ca10 	.word	0x0800ca10
 8001554:	0800ca30 	.word	0x0800ca30
 8001558:	0800ca48 	.word	0x0800ca48
 800155c:	0800ca60 	.word	0x0800ca60
 8001560:	0800ca78 	.word	0x0800ca78
 8001564:	0800ca90 	.word	0x0800ca90

08001568 <CDC_ReceiveCallback>:
            }
        }

}}
void CDC_ReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
    // Copy dữ liệu nhận vào bộ đệm và thêm ký tự kết thúc chuỗi
    memcpy(usb_rx_buffer, Buf, Len);
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	481f      	ldr	r0, [pc, #124]	@ (80015f4 <CDC_ReceiveCallback+0x8c>)
 8001578:	f009 fbe1 	bl	800ad3e <memcpy>
    usb_rx_buffer[Len] = '\0'; // Đảm bảo chuỗi kết thúc
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <CDC_ReceiveCallback+0x8c>)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	2200      	movs	r2, #0
 8001584:	701a      	strb	r2, [r3, #0]
     if (strcmp(usb_rx_buffer, "start") == 0) {
 8001586:	491c      	ldr	r1, [pc, #112]	@ (80015f8 <CDC_ReceiveCallback+0x90>)
 8001588:	481a      	ldr	r0, [pc, #104]	@ (80015f4 <CDC_ReceiveCallback+0x8c>)
 800158a:	f7fe fde1 	bl	8000150 <strcmp>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d103      	bne.n	800159c <CDC_ReceiveCallback+0x34>
            status = true; // Bắt đầu hệ thống
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <CDC_ReceiveCallback+0x94>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
        else if (strcmp(usb_rx_buffer, "event1") == 0) {
        if (status) enqueue(TASK_1_EVENT); // Chỉ thêm nếu hệ thống đang chạy
    } else if (strcmp(usb_rx_buffer, "event2") == 0) {
        if (status) enqueue(TASK_2_EVENT); // Chỉ thêm nếu hệ thống đang chạy
    }
}
 800159a:	e027      	b.n	80015ec <CDC_ReceiveCallback+0x84>
        } else if (strcmp(usb_rx_buffer, "stop") == 0) {
 800159c:	4918      	ldr	r1, [pc, #96]	@ (8001600 <CDC_ReceiveCallback+0x98>)
 800159e:	4815      	ldr	r0, [pc, #84]	@ (80015f4 <CDC_ReceiveCallback+0x8c>)
 80015a0:	f7fe fdd6 	bl	8000150 <strcmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <CDC_ReceiveCallback+0x4a>
            status = false; // Dừng hệ thống
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <CDC_ReceiveCallback+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
}
 80015b0:	e01c      	b.n	80015ec <CDC_ReceiveCallback+0x84>
        else if (strcmp(usb_rx_buffer, "event1") == 0) {
 80015b2:	4914      	ldr	r1, [pc, #80]	@ (8001604 <CDC_ReceiveCallback+0x9c>)
 80015b4:	480f      	ldr	r0, [pc, #60]	@ (80015f4 <CDC_ReceiveCallback+0x8c>)
 80015b6:	f7fe fdcb 	bl	8000150 <strcmp>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d107      	bne.n	80015d0 <CDC_ReceiveCallback+0x68>
        if (status) enqueue(TASK_1_EVENT); // Chỉ thêm nếu hệ thống đang chạy
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <CDC_ReceiveCallback+0x94>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d011      	beq.n	80015ec <CDC_ReceiveCallback+0x84>
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff fec9 	bl	8001360 <enqueue>
}
 80015ce:	e00d      	b.n	80015ec <CDC_ReceiveCallback+0x84>
    } else if (strcmp(usb_rx_buffer, "event2") == 0) {
 80015d0:	490d      	ldr	r1, [pc, #52]	@ (8001608 <CDC_ReceiveCallback+0xa0>)
 80015d2:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <CDC_ReceiveCallback+0x8c>)
 80015d4:	f7fe fdbc 	bl	8000150 <strcmp>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <CDC_ReceiveCallback+0x84>
        if (status) enqueue(TASK_2_EVENT); // Chỉ thêm nếu hệ thống đang chạy
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <CDC_ReceiveCallback+0x94>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <CDC_ReceiveCallback+0x84>
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff feba 	bl	8001360 <enqueue>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000384 	.word	0x20000384
 80015f8:	0800caa0 	.word	0x0800caa0
 80015fc:	20000380 	.word	0x20000380
 8001600:	0800caa8 	.word	0x0800caa8
 8001604:	0800cab0 	.word	0x0800cab0
 8001608:	0800cab8 	.word	0x0800cab8

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001610:	f000 fa84 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001614:	f000 f814 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001618:	f000 f89c 	bl	8001754 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800161c:	f007 fffa 	bl	8009614 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8001620:	f000 f86a 	bl	80016f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  dht22_init();
 8001624:	f7ff fcb6 	bl	8000f94 <dht22_init>
 MPU6050_Init();
 8001628:	f7ff fda6 	bl	8001178 <MPU6050_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 printf("Event-Triggered Scheduler Starting...\n");
 800162c:	4803      	ldr	r0, [pc, #12]	@ (800163c <main+0x30>)
 800162e:	f009 fa19 	bl	800aa64 <puts>



       // Chạy bộ lập lịch để xử lý sự kiện đã thêm
       eventScheduler();
 8001632:	f7ff ff49 	bl	80014c8 <eventScheduler>




   return 0;
 8001636:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001638:	4618      	mov	r0, r3
 800163a:	bd80      	pop	{r7, pc}
 800163c:	0800cac0 	.word	0x0800cac0

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b094      	sub	sp, #80	@ 0x50
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164a:	2228      	movs	r2, #40	@ 0x28
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f009 fae8 	bl	800ac24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001670:	2301      	movs	r3, #1
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167e:	2301      	movs	r3, #1
 8001680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001686:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800168a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800168c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fc0a 	bl	8004eb0 <HAL_RCC_OscConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016a2:	f000 f8a1 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	230f      	movs	r3, #15
 80016a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016aa:	2302      	movs	r3, #2
 80016ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2101      	movs	r1, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fe76 	bl	80053b4 <HAL_RCC_ClockConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80016ce:	f000 f88b 	bl	80017e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80016d2:	2310      	movs	r3, #16
 80016d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80016d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 ffe2 	bl	80056a8 <HAL_RCCEx_PeriphCLKConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80016ea:	f000 f87d 	bl	80017e8 <Error_Handler>
  }
}
 80016ee:	bf00      	nop
 80016f0:	3750      	adds	r7, #80	@ 0x50
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <MX_I2C1_Init+0x50>)
 80016fe:	4a13      	ldr	r2, [pc, #76]	@ (800174c <MX_I2C1_Init+0x54>)
 8001700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_I2C1_Init+0x50>)
 8001704:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <MX_I2C1_Init+0x58>)
 8001706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <MX_I2C1_Init+0x50>)
 8001716:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800171a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <MX_I2C1_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_I2C1_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <MX_I2C1_Init+0x50>)
 8001736:	f000 fdf5 	bl	8002324 <HAL_I2C_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001740:	f000 f852 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000428 	.word	0x20000428
 800174c:	40005400 	.word	0x40005400
 8001750:	000186a0 	.word	0x000186a0

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <MX_GPIO_Init+0x8c>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2104      	movs	r1, #4
 80017b4:	480b      	ldr	r0, [pc, #44]	@ (80017e4 <MX_GPIO_Init+0x90>)
 80017b6:	f000 fd9c 	bl	80022f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017ba:	2304      	movs	r3, #4
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_GPIO_Init+0x90>)
 80017d2:	f000 fb37 	bl	8001e44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010800 	.word	0x40010800

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <Error_Handler+0x8>

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_MspInit+0x5c>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <HAL_MspInit+0x5c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_MspInit+0x5c>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <HAL_MspInit+0x5c>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a0e      	ldr	r2, [pc, #56]	@ (8001850 <HAL_MspInit+0x5c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <HAL_MspInit+0x5c>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_MspInit+0x60>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_MspInit+0x60>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000

08001858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a15      	ldr	r2, [pc, #84]	@ (80018c8 <HAL_I2C_MspInit+0x70>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d123      	bne.n	80018c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <HAL_I2C_MspInit+0x74>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	4a13      	ldr	r2, [pc, #76]	@ (80018cc <HAL_I2C_MspInit+0x74>)
 800187e:	f043 0308 	orr.w	r3, r3, #8
 8001882:	6193      	str	r3, [r2, #24]
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_I2C_MspInit+0x74>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001890:	23c0      	movs	r3, #192	@ 0xc0
 8001892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001894:	2312      	movs	r3, #18
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001898:	2303      	movs	r3, #3
 800189a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	480b      	ldr	r0, [pc, #44]	@ (80018d0 <HAL_I2C_MspInit+0x78>)
 80018a4:	f000 face 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <HAL_I2C_MspInit+0x74>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_I2C_MspInit+0x74>)
 80018ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018b2:	61d3      	str	r3, [r2, #28]
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_I2C_MspInit+0x74>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010c00 	.word	0x40010c00

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <NMI_Handler+0x4>

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <MemManage_Handler+0x4>

080018ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 f940 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001932:	f001 fe78 	bl	8003626 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000114c 	.word	0x2000114c

08001940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return 1;
 8001944:	2301      	movs	r3, #1
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <_kill>:

int _kill(int pid, int sig)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001958:	f009 f9b6 	bl	800acc8 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	2216      	movs	r2, #22
 8001960:	601a      	str	r2, [r3, #0]
  return -1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <_exit>:

void _exit (int status)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001976:	f04f 31ff 	mov.w	r1, #4294967295
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffe7 	bl	800194e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <_exit+0x12>

08001984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e00a      	b.n	80019ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001996:	f3af 8000 	nop.w
 800199a:	4601      	mov	r1, r0
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbf0      	blt.n	8001996 <_read+0x12>
  }

  return len;
 80019b4:	687b      	ldr	r3, [r7, #4]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e009      	b.n	80019e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	1c5a      	adds	r2, r3, #1
 80019d4:	60ba      	str	r2, [r7, #8]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fbbb 	bl	8001154 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf1      	blt.n	80019d0 <_write+0x12>
  }
  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_close>:

int _close(int file)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <_isatty>:

int _isatty(int file)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
	...

08001a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a60:	4a14      	ldr	r2, [pc, #80]	@ (8001ab4 <_sbrk+0x5c>)
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <_sbrk+0x60>)
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a74:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <_sbrk+0x64>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <_sbrk+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d207      	bcs.n	8001a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a88:	f009 f91e 	bl	800acc8 <__errno>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	e009      	b.n	8001aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a05      	ldr	r2, [pc, #20]	@ (8001abc <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20005000 	.word	0x20005000
 8001ab8:	00000400 	.word	0x00000400
 8001abc:	2000047c 	.word	0x2000047c
 8001ac0:	20001790 	.word	0x20001790

08001ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ad0:	f7ff fff8 	bl	8001ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ad6:	490c      	ldr	r1, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aec:	4c09      	ldr	r4, [pc, #36]	@ (8001b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afa:	f009 f8eb 	bl	800acd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7ff fd85 	bl	800160c <main>
  bx lr
 8001b02:	4770      	bx	lr
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001b0c:	0800ced8 	.word	0x0800ced8
  ldr r2, =_sbss
 8001b10:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001b14:	20001790 	.word	0x20001790

08001b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC1_2_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_Init+0x28>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_Init+0x28>)
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f947 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fe5c 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f95f 	bl	8001e2a <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 f927 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000010 	.word	0x20000010
 8001ba4:	2000000c 	.word	0x2000000c

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a03      	ldr	r2, [pc, #12]	@ (8001bc8 <HAL_IncTick+0x20>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	20000480 	.word	0x20000480

08001bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <HAL_GetTick+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000480 	.word	0x20000480

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffe0 	bl	8001bcc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000010 	.word	0x20000010

08001c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	db0b      	blt.n	8001cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4906      	ldr	r1, [pc, #24]	@ (8001cc0 <__NVIC_EnableIRQ+0x34>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	2001      	movs	r0, #1
 8001cae:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100

08001cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	@ (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	@ 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001da0:	f7ff ff90 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff2d 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff42 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff90 	bl	8001d18 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5f 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff35 	bl	8001c8c <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b08b      	sub	sp, #44	@ 0x2c
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e56:	e169      	b.n	800212c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8158 	bne.w	8002126 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4a9a      	ldr	r2, [pc, #616]	@ (80020e4 <HAL_GPIO_Init+0x2a0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d05e      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001e80:	4a98      	ldr	r2, [pc, #608]	@ (80020e4 <HAL_GPIO_Init+0x2a0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d875      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001e86:	4a98      	ldr	r2, [pc, #608]	@ (80020e8 <HAL_GPIO_Init+0x2a4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d058      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001e8c:	4a96      	ldr	r2, [pc, #600]	@ (80020e8 <HAL_GPIO_Init+0x2a4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d86f      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001e92:	4a96      	ldr	r2, [pc, #600]	@ (80020ec <HAL_GPIO_Init+0x2a8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d052      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001e98:	4a94      	ldr	r2, [pc, #592]	@ (80020ec <HAL_GPIO_Init+0x2a8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d869      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001e9e:	4a94      	ldr	r2, [pc, #592]	@ (80020f0 <HAL_GPIO_Init+0x2ac>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d04c      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001ea4:	4a92      	ldr	r2, [pc, #584]	@ (80020f0 <HAL_GPIO_Init+0x2ac>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d863      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001eaa:	4a92      	ldr	r2, [pc, #584]	@ (80020f4 <HAL_GPIO_Init+0x2b0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d046      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
 8001eb0:	4a90      	ldr	r2, [pc, #576]	@ (80020f4 <HAL_GPIO_Init+0x2b0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d85d      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001eb6:	2b12      	cmp	r3, #18
 8001eb8:	d82a      	bhi.n	8001f10 <HAL_GPIO_Init+0xcc>
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d859      	bhi.n	8001f72 <HAL_GPIO_Init+0x12e>
 8001ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <HAL_GPIO_Init+0x80>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001f3f 	.word	0x08001f3f
 8001ec8:	08001f19 	.word	0x08001f19
 8001ecc:	08001f2b 	.word	0x08001f2b
 8001ed0:	08001f6d 	.word	0x08001f6d
 8001ed4:	08001f73 	.word	0x08001f73
 8001ed8:	08001f73 	.word	0x08001f73
 8001edc:	08001f73 	.word	0x08001f73
 8001ee0:	08001f73 	.word	0x08001f73
 8001ee4:	08001f73 	.word	0x08001f73
 8001ee8:	08001f73 	.word	0x08001f73
 8001eec:	08001f73 	.word	0x08001f73
 8001ef0:	08001f73 	.word	0x08001f73
 8001ef4:	08001f73 	.word	0x08001f73
 8001ef8:	08001f73 	.word	0x08001f73
 8001efc:	08001f73 	.word	0x08001f73
 8001f00:	08001f73 	.word	0x08001f73
 8001f04:	08001f73 	.word	0x08001f73
 8001f08:	08001f21 	.word	0x08001f21
 8001f0c:	08001f35 	.word	0x08001f35
 8001f10:	4a79      	ldr	r2, [pc, #484]	@ (80020f8 <HAL_GPIO_Init+0x2b4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f16:	e02c      	b.n	8001f72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e029      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	3304      	adds	r3, #4
 8001f26:	623b      	str	r3, [r7, #32]
          break;
 8001f28:	e024      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	3308      	adds	r3, #8
 8001f30:	623b      	str	r3, [r7, #32]
          break;
 8001f32:	e01f      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	330c      	adds	r3, #12
 8001f3a:	623b      	str	r3, [r7, #32]
          break;
 8001f3c:	e01a      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f46:	2304      	movs	r3, #4
 8001f48:	623b      	str	r3, [r7, #32]
          break;
 8001f4a:	e013      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f54:	2308      	movs	r3, #8
 8001f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	611a      	str	r2, [r3, #16]
          break;
 8001f5e:	e009      	b.n	8001f74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f60:	2308      	movs	r3, #8
 8001f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	615a      	str	r2, [r3, #20]
          break;
 8001f6a:	e003      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
          break;
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x130>
          break;
 8001f72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	2bff      	cmp	r3, #255	@ 0xff
 8001f78:	d801      	bhi.n	8001f7e <HAL_GPIO_Init+0x13a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	e001      	b.n	8001f82 <HAL_GPIO_Init+0x13e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2bff      	cmp	r3, #255	@ 0xff
 8001f88:	d802      	bhi.n	8001f90 <HAL_GPIO_Init+0x14c>
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	e002      	b.n	8001f96 <HAL_GPIO_Init+0x152>
 8001f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f92:	3b08      	subs	r3, #8
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	6a39      	ldr	r1, [r7, #32]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80b1 	beq.w	8002126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a4c      	ldr	r2, [pc, #304]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80020fc <HAL_GPIO_Init+0x2b8>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fdc:	4a48      	ldr	r2, [pc, #288]	@ (8002100 <HAL_GPIO_Init+0x2bc>)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a40      	ldr	r2, [pc, #256]	@ (8002104 <HAL_GPIO_Init+0x2c0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_GPIO_Init+0x1ec>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a3f      	ldr	r2, [pc, #252]	@ (8002108 <HAL_GPIO_Init+0x2c4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00d      	beq.n	800202c <HAL_GPIO_Init+0x1e8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3e      	ldr	r2, [pc, #248]	@ (800210c <HAL_GPIO_Init+0x2c8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d007      	beq.n	8002028 <HAL_GPIO_Init+0x1e4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3d      	ldr	r2, [pc, #244]	@ (8002110 <HAL_GPIO_Init+0x2cc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_GPIO_Init+0x1e0>
 8002020:	2303      	movs	r3, #3
 8002022:	e006      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002024:	2304      	movs	r3, #4
 8002026:	e004      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002028:	2302      	movs	r3, #2
 800202a:	e002      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <HAL_GPIO_Init+0x1ee>
 8002030:	2300      	movs	r3, #0
 8002032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4093      	lsls	r3, r2
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002042:	492f      	ldr	r1, [pc, #188]	@ (8002100 <HAL_GPIO_Init+0x2bc>)
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800205c:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	492c      	ldr	r1, [pc, #176]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800206a:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	4928      	ldr	r1, [pc, #160]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 8002074:	4013      	ands	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4922      	ldr	r1, [pc, #136]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002092:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	491e      	ldr	r1, [pc, #120]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d006      	beq.n	80020ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020ac:	4b19      	ldr	r3, [pc, #100]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4918      	ldr	r1, [pc, #96]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ba:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4914      	ldr	r1, [pc, #80]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d021      	beq.n	8002118 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	490e      	ldr	r1, [pc, #56]	@ (8002114 <HAL_GPIO_Init+0x2d0>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e021      	b.n	8002126 <HAL_GPIO_Init+0x2e2>
 80020e2:	bf00      	nop
 80020e4:	10320000 	.word	0x10320000
 80020e8:	10310000 	.word	0x10310000
 80020ec:	10220000 	.word	0x10220000
 80020f0:	10210000 	.word	0x10210000
 80020f4:	10120000 	.word	0x10120000
 80020f8:	10110000 	.word	0x10110000
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000
 8002104:	40010800 	.word	0x40010800
 8002108:	40010c00 	.word	0x40010c00
 800210c:	40011000 	.word	0x40011000
 8002110:	40011400 	.word	0x40011400
 8002114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_GPIO_Init+0x304>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	43db      	mvns	r3, r3
 8002120:	4909      	ldr	r1, [pc, #36]	@ (8002148 <HAL_GPIO_Init+0x304>)
 8002122:	4013      	ands	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	3301      	adds	r3, #1
 800212a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	f47f ae8e 	bne.w	8001e58 <HAL_GPIO_Init+0x14>
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	372c      	adds	r7, #44	@ 0x2c
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40010400 	.word	0x40010400

0800214c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	@ 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800215a:	e09a      	b.n	8002292 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 808d 	beq.w	800228c <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8002172:	4a4e      	ldr	r2, [pc, #312]	@ (80022ac <HAL_GPIO_DeInit+0x160>)
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	220f      	movs	r2, #15
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a46      	ldr	r2, [pc, #280]	@ (80022b0 <HAL_GPIO_DeInit+0x164>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_GPIO_DeInit+0x78>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a45      	ldr	r2, [pc, #276]	@ (80022b4 <HAL_GPIO_DeInit+0x168>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00d      	beq.n	80021c0 <HAL_GPIO_DeInit+0x74>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a44      	ldr	r2, [pc, #272]	@ (80022b8 <HAL_GPIO_DeInit+0x16c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <HAL_GPIO_DeInit+0x70>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a43      	ldr	r2, [pc, #268]	@ (80022bc <HAL_GPIO_DeInit+0x170>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_GPIO_DeInit+0x6c>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e006      	b.n	80021c6 <HAL_GPIO_DeInit+0x7a>
 80021b8:	2304      	movs	r3, #4
 80021ba:	e004      	b.n	80021c6 <HAL_GPIO_DeInit+0x7a>
 80021bc:	2302      	movs	r3, #2
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_DeInit+0x7a>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_GPIO_DeInit+0x7a>
 80021c4:	2300      	movs	r3, #0
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	f002 0203 	and.w	r2, r2, #3
 80021cc:	0092      	lsls	r2, r2, #2
 80021ce:	4093      	lsls	r3, r2
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d132      	bne.n	800223c <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80021d6:	4b3a      	ldr	r3, [pc, #232]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4938      	ldr	r1, [pc, #224]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80021e4:	4b36      	ldr	r3, [pc, #216]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	4934      	ldr	r1, [pc, #208]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80021f2:	4b33      	ldr	r3, [pc, #204]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4931      	ldr	r1, [pc, #196]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002200:	4b2f      	ldr	r3, [pc, #188]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	43db      	mvns	r3, r3
 8002208:	492d      	ldr	r1, [pc, #180]	@ (80022c0 <HAL_GPIO_DeInit+0x174>)
 800220a:	4013      	ands	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800221e:	4a23      	ldr	r2, [pc, #140]	@ (80022ac <HAL_GPIO_DeInit+0x160>)
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	43da      	mvns	r2, r3
 800222e:	481f      	ldr	r0, [pc, #124]	@ (80022ac <HAL_GPIO_DeInit+0x160>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	400a      	ands	r2, r1
 8002236:	3302      	adds	r3, #2
 8002238:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2bff      	cmp	r3, #255	@ 0xff
 8002240:	d801      	bhi.n	8002246 <HAL_GPIO_DeInit+0xfa>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	e001      	b.n	800224a <HAL_GPIO_DeInit+0xfe>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2bff      	cmp	r3, #255	@ 0xff
 8002250:	d802      	bhi.n	8002258 <HAL_GPIO_DeInit+0x10c>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	e002      	b.n	800225e <HAL_GPIO_DeInit+0x112>
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3b08      	subs	r3, #8
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	210f      	movs	r1, #15
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	2104      	movs	r1, #4
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	431a      	orrs	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3301      	adds	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	f47f af5e 	bne.w	800215c <HAL_GPIO_DeInit+0x10>
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	@ 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40010c00 	.word	0x40010c00
 80022b8:	40011000 	.word	0x40011000
 80022bc:	40011400 	.word	0x40011400
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	807b      	strh	r3, [r7, #2]
 80022fe:	4613      	mov	r3, r2
 8002300:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002302:	787b      	ldrb	r3, [r7, #1]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002308:	887a      	ldrh	r2, [r7, #2]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800230e:	e003      	b.n	8002318 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	041a      	lsls	r2, r3, #16
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	611a      	str	r2, [r3, #16]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
	...

08002324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e12b      	b.n	800258e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fa84 	bl	8001858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2224      	movs	r2, #36	@ 0x24
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002388:	f003 f95c 	bl	8005644 <HAL_RCC_GetPCLK1Freq>
 800238c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4a81      	ldr	r2, [pc, #516]	@ (8002598 <HAL_I2C_Init+0x274>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d807      	bhi.n	80023a8 <HAL_I2C_Init+0x84>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4a80      	ldr	r2, [pc, #512]	@ (800259c <HAL_I2C_Init+0x278>)
 800239c:	4293      	cmp	r3, r2
 800239e:	bf94      	ite	ls
 80023a0:	2301      	movls	r3, #1
 80023a2:	2300      	movhi	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e006      	b.n	80023b6 <HAL_I2C_Init+0x92>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a7d      	ldr	r2, [pc, #500]	@ (80025a0 <HAL_I2C_Init+0x27c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf94      	ite	ls
 80023b0:	2301      	movls	r3, #1
 80023b2:	2300      	movhi	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0e7      	b.n	800258e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a78      	ldr	r2, [pc, #480]	@ (80025a4 <HAL_I2C_Init+0x280>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0c9b      	lsrs	r3, r3, #18
 80023c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002598 <HAL_I2C_Init+0x274>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d802      	bhi.n	80023f8 <HAL_I2C_Init+0xd4>
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3301      	adds	r3, #1
 80023f6:	e009      	b.n	800240c <HAL_I2C_Init+0xe8>
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a69      	ldr	r2, [pc, #420]	@ (80025a8 <HAL_I2C_Init+0x284>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	3301      	adds	r3, #1
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800241e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	495c      	ldr	r1, [pc, #368]	@ (8002598 <HAL_I2C_Init+0x274>)
 8002428:	428b      	cmp	r3, r1
 800242a:	d819      	bhi.n	8002460 <HAL_I2C_Init+0x13c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e59      	subs	r1, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fbb1 f3f3 	udiv	r3, r1, r3
 800243a:	1c59      	adds	r1, r3, #1
 800243c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002440:	400b      	ands	r3, r1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_I2C_Init+0x138>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1e59      	subs	r1, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fbb1 f3f3 	udiv	r3, r1, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245a:	e051      	b.n	8002500 <HAL_I2C_Init+0x1dc>
 800245c:	2304      	movs	r3, #4
 800245e:	e04f      	b.n	8002500 <HAL_I2C_Init+0x1dc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d111      	bne.n	800248c <HAL_I2C_Init+0x168>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e58      	subs	r0, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	440b      	add	r3, r1
 8002476:	fbb0 f3f3 	udiv	r3, r0, r3
 800247a:	3301      	adds	r3, #1
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e012      	b.n	80024b2 <HAL_I2C_Init+0x18e>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1e58      	subs	r0, r3, #1
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	0099      	lsls	r1, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Init+0x196>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e022      	b.n	8002500 <HAL_I2C_Init+0x1dc>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10e      	bne.n	80024e0 <HAL_I2C_Init+0x1bc>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1e58      	subs	r0, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6859      	ldr	r1, [r3, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	440b      	add	r3, r1
 80024d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d4:	3301      	adds	r3, #1
 80024d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024de:	e00f      	b.n	8002500 <HAL_I2C_Init+0x1dc>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	0099      	lsls	r1, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f6:	3301      	adds	r3, #1
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	6809      	ldr	r1, [r1, #0]
 8002504:	4313      	orrs	r3, r2
 8002506:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800252e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6911      	ldr	r1, [r2, #16]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68d2      	ldr	r2, [r2, #12]
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	000186a0 	.word	0x000186a0
 800259c:	001e847f 	.word	0x001e847f
 80025a0:	003d08ff 	.word	0x003d08ff
 80025a4:	431bde83 	.word	0x431bde83
 80025a8:	10624dd3 	.word	0x10624dd3

080025ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	817b      	strh	r3, [r7, #10]
 80025be:	460b      	mov	r3, r1
 80025c0:	813b      	strh	r3, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c6:	f7ff fb01 	bl	8001bcc <HAL_GetTick>
 80025ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	f040 80d9 	bne.w	800278c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2319      	movs	r3, #25
 80025e0:	2201      	movs	r2, #1
 80025e2:	496d      	ldr	r1, [pc, #436]	@ (8002798 <HAL_I2C_Mem_Write+0x1ec>)
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fccd 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0cc      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_I2C_Mem_Write+0x56>
 80025fe:	2302      	movs	r3, #2
 8002600:	e0c5      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b01      	cmp	r3, #1
 8002616:	d007      	beq.n	8002628 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002636:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2221      	movs	r2, #33	@ 0x21
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2240      	movs	r2, #64	@ 0x40
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002658:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800265e:	b29a      	uxth	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a4d      	ldr	r2, [pc, #308]	@ (800279c <HAL_I2C_Mem_Write+0x1f0>)
 8002668:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800266a:	88f8      	ldrh	r0, [r7, #6]
 800266c:	893a      	ldrh	r2, [r7, #8]
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4603      	mov	r3, r0
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fb04 	bl	8002c88 <I2C_RequestMemoryWrite>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d052      	beq.n	800272c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e081      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fd92 	bl	80031b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_I2C_Mem_Write+0x180>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1aa      	bne.n	800268a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fd85 	bl	8003248 <I2C_WaitOnBTFFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	2b04      	cmp	r3, #4
 800274a:	d107      	bne.n	800275c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e016      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800276e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	00100002 	.word	0x00100002
 800279c:	ffff0000 	.word	0xffff0000

080027a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	@ 0x30
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	817b      	strh	r3, [r7, #10]
 80027b2:	460b      	mov	r3, r1
 80027b4:	813b      	strh	r3, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027be:	f7ff fa05 	bl	8001bcc <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	f040 8250 	bne.w	8002c72 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2319      	movs	r3, #25
 80027d8:	2201      	movs	r2, #1
 80027da:	4982      	ldr	r1, [pc, #520]	@ (80029e4 <HAL_I2C_Mem_Read+0x244>)
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fbd1 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e243      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Mem_Read+0x5a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e23c      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d007      	beq.n	8002820 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800282e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2222      	movs	r2, #34	@ 0x22
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2240      	movs	r2, #64	@ 0x40
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002850:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a62      	ldr	r2, [pc, #392]	@ (80029e8 <HAL_I2C_Mem_Read+0x248>)
 8002860:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002862:	88f8      	ldrh	r0, [r7, #6]
 8002864:	893a      	ldrh	r2, [r7, #8]
 8002866:	8979      	ldrh	r1, [r7, #10]
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fa9e 	bl	8002db4 <I2C_RequestMemoryRead>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1f8      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d113      	bne.n	80028b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	61fb      	str	r3, [r7, #28]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e1cc      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d11e      	bne.n	80028f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028ca:	b672      	cpsid	i
}
 80028cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028f4:	b662      	cpsie	i
}
 80028f6:	e035      	b.n	8002964 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11e      	bne.n	800293e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800290e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002938:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800293a:	b662      	cpsie	i
}
 800293c:	e012      	b.n	8002964 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800294c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002964:	e172      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296a:	2b03      	cmp	r3, #3
 800296c:	f200 811f 	bhi.w	8002bae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	2b01      	cmp	r3, #1
 8002976:	d123      	bne.n	80029c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002978:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fcab 	bl	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e173      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029be:	e145      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d152      	bne.n	8002a6e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ce:	2200      	movs	r2, #0
 80029d0:	4906      	ldr	r1, [pc, #24]	@ (80029ec <HAL_I2C_Mem_Read+0x24c>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fad6 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d008      	beq.n	80029f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e148      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
 80029e2:	bf00      	nop
 80029e4:	00100002 	.word	0x00100002
 80029e8:	ffff0000 	.word	0xffff0000
 80029ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029f0:	b672      	cpsid	i
}
 80029f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a36:	b662      	cpsie	i
}
 8002a38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a6c:	e0ee      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a74:	2200      	movs	r2, #0
 8002a76:	4981      	ldr	r1, [pc, #516]	@ (8002c7c <HAL_I2C_Mem_Read+0x4dc>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fa83 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0f5      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a98:	b672      	cpsid	i
}
 8002a9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ace:	4b6c      	ldr	r3, [pc, #432]	@ (8002c80 <HAL_I2C_Mem_Read+0x4e0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	08db      	lsrs	r3, r3, #3
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	@ (8002c84 <HAL_I2C_Mem_Read+0x4e4>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0a1a      	lsrs	r2, r3, #8
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00da      	lsls	r2, r3, #3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d118      	bne.n	8002b26 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b16:	b662      	cpsie	i
}
 8002b18:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0a6      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d1d9      	bne.n	8002ae8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b76:	b662      	cpsie	i
}
 8002b78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bac:	e04e      	b.n	8002c4c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fb90 	bl	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e058      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d124      	bne.n	8002c4c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c18:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f ae88 	bne.w	8002966 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
  }
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3728      	adds	r7, #40	@ 0x28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	00010004 	.word	0x00010004
 8002c80:	20000008 	.word	0x20000008
 8002c84:	14f8b589 	.word	0x14f8b589

08002c88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	4608      	mov	r0, r1
 8002c92:	4611      	mov	r1, r2
 8002c94:	461a      	mov	r2, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	817b      	strh	r3, [r7, #10]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	813b      	strh	r3, [r7, #8]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f960 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd8:	d103      	bne.n	8002ce2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e05f      	b.n	8002da6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ce6:	897b      	ldrh	r3, [r7, #10]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	6a3a      	ldr	r2, [r7, #32]
 8002cfa:	492d      	ldr	r1, [pc, #180]	@ (8002db0 <I2C_RequestMemoryWrite+0x128>)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f9bb 	bl	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04c      	b.n	8002da6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
 8002d20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d24:	6a39      	ldr	r1, [r7, #32]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa46 	bl	80031b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d107      	bne.n	8002d4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e02b      	b.n	8002da6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d54:	893b      	ldrh	r3, [r7, #8]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	611a      	str	r2, [r3, #16]
 8002d5e:	e021      	b.n	8002da4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d60:	893b      	ldrh	r3, [r7, #8]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	6a39      	ldr	r1, [r7, #32]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 fa20 	bl	80031b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d107      	bne.n	8002d96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e005      	b.n	8002da6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9a:	893b      	ldrh	r3, [r7, #8]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	00010002 	.word	0x00010002

08002db4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	4608      	mov	r0, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	817b      	strh	r3, [r7, #10]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	813b      	strh	r3, [r7, #8]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f8c2 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e14:	d103      	bne.n	8002e1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0aa      	b.n	8002f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e22:	897b      	ldrh	r3, [r7, #10]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	4952      	ldr	r1, [pc, #328]	@ (8002f80 <I2C_RequestMemoryRead+0x1cc>)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f91d 	bl	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e097      	b.n	8002f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e60:	6a39      	ldr	r1, [r7, #32]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f9a8 	bl	80031b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00d      	beq.n	8002e8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d107      	bne.n	8002e86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e076      	b.n	8002f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	611a      	str	r2, [r3, #16]
 8002e9a:	e021      	b.n	8002ee0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e9c:	893b      	ldrh	r3, [r7, #8]
 8002e9e:	0a1b      	lsrs	r3, r3, #8
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f982 	bl	80031b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d107      	bne.n	8002ed2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e050      	b.n	8002f78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed6:	893b      	ldrh	r3, [r7, #8]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee2:	6a39      	ldr	r1, [r7, #32]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 f967 	bl	80031b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d107      	bne.n	8002f08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e035      	b.n	8002f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f82b 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f42:	d103      	bne.n	8002f4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e013      	b.n	8002f78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f50:	897b      	ldrh	r3, [r7, #10]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	4906      	ldr	r1, [pc, #24]	@ (8002f80 <I2C_RequestMemoryRead+0x1cc>)
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f886 	bl	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	00010002 	.word	0x00010002

08002f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f94:	e048      	b.n	8003028 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d044      	beq.n	8003028 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fe15 	bl	8001bcc <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d139      	bne.n	8003028 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	0c1b      	lsrs	r3, r3, #16
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10d      	bne.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	bf0c      	ite	eq
 8002fd0:	2301      	moveq	r3, #1
 8002fd2:	2300      	movne	r3, #0
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	e00c      	b.n	8002ff4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	43da      	mvns	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d116      	bne.n	8003028 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e023      	b.n	8003070 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d10d      	bne.n	800304e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	43da      	mvns	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4013      	ands	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf0c      	ite	eq
 8003044:	2301      	moveq	r3, #1
 8003046:	2300      	movne	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	e00c      	b.n	8003068 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	429a      	cmp	r2, r3
 800306c:	d093      	beq.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003086:	e071      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003096:	d123      	bne.n	80030e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e067      	b.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d041      	beq.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e8:	f7fe fd70 	bl	8001bcc <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d302      	bcc.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d136      	bne.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10c      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e00b      	b.n	800313a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	43da      	mvns	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d016      	beq.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e021      	b.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d10c      	bne.n	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	43da      	mvns	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4013      	ands	r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf14      	ite	ne
 8003188:	2301      	movne	r3, #1
 800318a:	2300      	moveq	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e00b      	b.n	80031a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	43da      	mvns	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf14      	ite	ne
 80031a2:	2301      	movne	r3, #1
 80031a4:	2300      	moveq	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f af6d 	bne.w	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c4:	e034      	b.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f8e3 	bl	8003392 <I2C_IsAcknowledgeFailed>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e034      	b.n	8003240 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d028      	beq.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031de:	f7fe fcf5 	bl	8001bcc <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d302      	bcc.n	80031f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11d      	bne.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	2b80      	cmp	r3, #128	@ 0x80
 8003200:	d016      	beq.n	8003230 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e007      	b.n	8003240 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b80      	cmp	r3, #128	@ 0x80
 800323c:	d1c3      	bne.n	80031c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003254:	e034      	b.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f89b 	bl	8003392 <I2C_IsAcknowledgeFailed>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e034      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d028      	beq.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fe fcad 	bl	8001bcc <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d11d      	bne.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b04      	cmp	r3, #4
 8003290:	d016      	beq.n	80032c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	f043 0220 	orr.w	r2, r3, #32
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d1c3      	bne.n	8003256 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e4:	e049      	b.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d119      	bne.n	8003328 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0210 	mvn.w	r2, #16
 80032fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e030      	b.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003328:	f7fe fc50 	bl	8001bcc <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11d      	bne.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003348:	2b40      	cmp	r3, #64	@ 0x40
 800334a:	d016      	beq.n	800337a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f043 0220 	orr.w	r2, r3, #32
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e007      	b.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003384:	2b40      	cmp	r3, #64	@ 0x40
 8003386:	d1ae      	bne.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a8:	d11b      	bne.n	80033e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0e8      	b.n	80035d2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f006 faf5 	bl	8009a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2203      	movs	r2, #3
 800341e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f002 fa14 	bl	800585a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3304      	adds	r3, #4
 800343a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800343c:	f002 f9ea 	bl	8005814 <USB_CoreInit>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e0bf      	b.n	80035d2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f002 fa18 	bl	800588e <USB_SetCurrentMode>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0b0      	b.n	80035d2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
 8003474:	e03e      	b.n	80034f4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	440b      	add	r3, r1
 8003484:	3311      	adds	r3, #17
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800348a:	7bfa      	ldrb	r2, [r7, #15]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	440b      	add	r3, r1
 8003498:	3310      	adds	r3, #16
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800349e:	7bfa      	ldrb	r2, [r7, #15]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	440b      	add	r3, r1
 80034ac:	3313      	adds	r3, #19
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	3320      	adds	r3, #32
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034c6:	7bfa      	ldrb	r2, [r7, #15]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	440b      	add	r3, r1
 80034d4:	3324      	adds	r3, #36	@ 0x24
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3301      	adds	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	791b      	ldrb	r3, [r3, #4]
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3bb      	bcc.n	8003476 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e044      	b.n	800358e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003546:	7bfa      	ldrb	r2, [r7, #15]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	440b      	add	r3, r1
 8003554:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800355c:	7bfa      	ldrb	r2, [r7, #15]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	440b      	add	r3, r1
 800356a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003588:	7bfb      	ldrb	r3, [r7, #15]
 800358a:	3301      	adds	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	791b      	ldrb	r3, [r3, #4]
 8003592:	7bfa      	ldrb	r2, [r7, #15]
 8003594:	429a      	cmp	r2, r3
 8003596:	d3b5      	bcc.n	8003504 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3304      	adds	r3, #4
 80035a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a2:	f002 f980 	bl	80058a6 <USB_DevInit>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e00c      	b.n	80035d2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f004 fbff 	bl	8007dce <USB_DevDisconnect>

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_PCD_Start+0x16>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e016      	b.n	800361e <HAL_PCD_Start+0x44>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f002 f916 	bl	800582e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003602:	2101      	movs	r1, #1
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f006 fc70 	bl	8009eea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fbd3 	bl	8007dba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b088      	sub	sp, #32
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fbd5 	bl	8007de2 <USB_ReadInterrupts>
 8003638:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fb1a 	bl	8003c7e <PCD_EP_ISR_Handler>

    return;
 800364a:	e119      	b.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003652:	2b00      	cmp	r3, #0
 8003654:	d013      	beq.n	800367e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800365e:	b29a      	uxth	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003668:	b292      	uxth	r2, r2
 800366a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f006 fa43 	bl	8009afa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003674:	2100      	movs	r1, #0
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f905 	bl	8003886 <HAL_PCD_SetAddress>

    return;
 800367c:	e100      	b.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00c      	beq.n	80036a2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800369a:	b292      	uxth	r2, r2
 800369c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036a0:	e0ee      	b.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00c      	beq.n	80036c6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036be:	b292      	uxth	r2, r2
 80036c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036c4:	e0dc      	b.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d027      	beq.n	8003720 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036d8:	b29a      	uxth	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0204 	bic.w	r2, r2, #4
 80036e2:	b292      	uxth	r2, r2
 80036e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0208 	bic.w	r2, r2, #8
 80036fa:	b292      	uxth	r2, r2
 80036fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f006 fa33 	bl	8009b6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003718:	b292      	uxth	r2, r2
 800371a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800371e:	e0af      	b.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8083 	beq.w	8003832 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e010      	b.n	8003754 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	7ffb      	ldrb	r3, [r7, #31]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	441a      	add	r2, r3
 800373e:	7ffb      	ldrb	r3, [r7, #31]
 8003740:	8812      	ldrh	r2, [r2, #0]
 8003742:	b292      	uxth	r2, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	3320      	adds	r3, #32
 8003748:	443b      	add	r3, r7
 800374a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	3301      	adds	r3, #1
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	7ffb      	ldrb	r3, [r7, #31]
 8003756:	2b07      	cmp	r3, #7
 8003758:	d9eb      	bls.n	8003732 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0201 	orr.w	r2, r2, #1
 800376c:	b292      	uxth	r2, r2
 800376e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	b292      	uxth	r2, r2
 8003786:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800378a:	bf00      	nop
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003794:	b29b      	uxth	r3, r3
 8003796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f6      	beq.n	800378c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b0:	b292      	uxth	r2, r2
 80037b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80037b6:	2300      	movs	r3, #0
 80037b8:	77fb      	strb	r3, [r7, #31]
 80037ba:	e00f      	b.n	80037dc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80037bc:	7ffb      	ldrb	r3, [r7, #31]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	4611      	mov	r1, r2
 80037c4:	7ffa      	ldrb	r2, [r7, #31]
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	440a      	add	r2, r1
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	3320      	adds	r3, #32
 80037ce:	443b      	add	r3, r7
 80037d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80037d4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
 80037d8:	3301      	adds	r3, #1
 80037da:	77fb      	strb	r3, [r7, #31]
 80037dc:	7ffb      	ldrb	r3, [r7, #31]
 80037de:	2b07      	cmp	r3, #7
 80037e0:	d9ec      	bls.n	80037bc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0208 	orr.w	r2, r2, #8
 80037f4:	b292      	uxth	r2, r2
 80037f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800380c:	b292      	uxth	r2, r2
 800380e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0204 	orr.w	r2, r2, #4
 8003824:	b292      	uxth	r2, r2
 8003826:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f006 f984 	bl	8009b38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003830:	e026      	b.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00f      	beq.n	800385c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003844:	b29a      	uxth	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800384e:	b292      	uxth	r2, r2
 8003850:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f006 f942 	bl	8009ade <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800385a:	e011      	b.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003878:	b292      	uxth	r2, r2
 800387a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800387e:	bf00      	nop
  }
}
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_PCD_SetAddress+0x1a>
 800389c:	2302      	movs	r3, #2
 800389e:	e012      	b.n	80038c6 <HAL_PCD_SetAddress+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 fa6c 	bl	8007d94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	4608      	mov	r0, r1
 80038d8:	4611      	mov	r1, r2
 80038da:	461a      	mov	r2, r3
 80038dc:	4603      	mov	r3, r0
 80038de:	70fb      	strb	r3, [r7, #3]
 80038e0:	460b      	mov	r3, r1
 80038e2:	803b      	strh	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da0e      	bge.n	8003912 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	f003 0207 	and.w	r2, r3, #7
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	3310      	adds	r3, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	705a      	strb	r2, [r3, #1]
 8003910:	e00e      	b.n	8003930 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 0207 	and.w	r2, r3, #7
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	b2da      	uxtb	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800393c:	883a      	ldrh	r2, [r7, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	78ba      	ldrb	r2, [r7, #2]
 8003946:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003948:	78bb      	ldrb	r3, [r7, #2]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d102      	bne.n	8003954 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800395a:	2b01      	cmp	r3, #1
 800395c:	d101      	bne.n	8003962 <HAL_PCD_EP_Open+0x94>
 800395e:	2302      	movs	r3, #2
 8003960:	e00e      	b.n	8003980 <HAL_PCD_EP_Open+0xb2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	4618      	mov	r0, r3
 8003972:	f001 ffb5 	bl	80058e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800397e:	7afb      	ldrb	r3, [r7, #11]
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003998:	2b00      	cmp	r3, #0
 800399a:	da0e      	bge.n	80039ba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	f003 0207 	and.w	r2, r3, #7
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	3310      	adds	r3, #16
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	705a      	strb	r2, [r3, #1]
 80039b8:	e00e      	b.n	80039d8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 0207 	and.w	r2, r3, #7
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	4413      	add	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d8:	78fb      	ldrb	r3, [r7, #3]
 80039da:	f003 0307 	and.w	r3, r3, #7
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_PCD_EP_Close+0x6a>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e00e      	b.n	8003a10 <HAL_PCD_EP_Close+0x88>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68f9      	ldr	r1, [r7, #12]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f002 fb2d 	bl	8006060 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	460b      	mov	r3, r1
 8003a26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a28:	7afb      	ldrb	r3, [r7, #11]
 8003a2a:	f003 0207 	and.w	r2, r3, #7
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6979      	ldr	r1, [r7, #20]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 fce4 	bl	8006438 <USB_EPStartXfer>

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 0207 	and.w	r2, r3, #7
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	440b      	add	r3, r1
 8003a98:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003a9c:	681b      	ldr	r3, [r3, #0]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	f003 0207 	and.w	r2, r3, #7
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	3310      	adds	r3, #16
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2200      	movs	r2, #0
 8003aec:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2201      	movs	r2, #1
 8003af2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af4:	7afb      	ldrb	r3, [r7, #11]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6979      	ldr	r1, [r7, #20]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 fc96 	bl	8006438 <USB_EPStartXfer>

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	7912      	ldrb	r2, [r2, #4]
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d901      	bls.n	8003b34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e04c      	b.n	8003bce <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da0e      	bge.n	8003b5a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	f003 0207 	and.w	r2, r3, #7
 8003b42:	4613      	mov	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4413      	add	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	3310      	adds	r3, #16
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	705a      	strb	r2, [r3, #1]
 8003b58:	e00c      	b.n	8003b74 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_PCD_EP_SetStall+0x7e>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e01c      	b.n	8003bce <HAL_PCD_EP_SetStall+0xb8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 fff9 	bl	8007b9a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f004 f91e 	bl	8007e00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	460b      	mov	r3, r1
 8003be0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	7912      	ldrb	r2, [r2, #4]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e040      	b.n	8003c76 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	da0e      	bge.n	8003c1a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 0207 	and.w	r2, r3, #7
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	3310      	adds	r3, #16
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	705a      	strb	r2, [r3, #1]
 8003c18:	e00e      	b.n	8003c38 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 0207 	and.w	r2, r3, #7
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3e:	78fb      	ldrb	r3, [r7, #3]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_PCD_EP_ClrStall+0x82>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e00e      	b.n	8003c76 <HAL_PCD_EP_ClrStall+0xa0>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f003 ffe7 	bl	8007c3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b096      	sub	sp, #88	@ 0x58
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c86:	e3bb      	b.n	8004400 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003c90:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003ca2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 8175 	bne.w	8003f96 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003cac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d14e      	bne.n	8003d56 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc8:	81fb      	strh	r3, [r7, #14]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3310      	adds	r3, #16
 8003ce0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	461a      	mov	r2, r3
 8003cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	441a      	add	r2, r3
 8003d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d1a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f005 fec3 	bl	8009aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7b5b      	ldrb	r3, [r3, #13]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8368 	beq.w	8004400 <PCD_EP_ISR_Handler+0x782>
 8003d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 8363 	bne.w	8004400 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7b5b      	ldrb	r3, [r3, #13]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	735a      	strb	r2, [r3, #13]
 8003d54:	e354      	b.n	8004400 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003d5c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d034      	beq.n	8003dde <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	3306      	adds	r3, #6
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f004 f874 	bl	8007ea0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	881b      	ldrh	r3, [r3, #0]
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	823b      	strh	r3, [r7, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	8a3a      	ldrh	r2, [r7, #16]
 8003dce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f005 fe3a 	bl	8009a50 <HAL_PCD_SetupStageCallback>
 8003ddc:	e310      	b.n	8004400 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dde:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f280 830c 	bge.w	8004400 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003df4:	4013      	ands	r3, r2
 8003df6:	83fb      	strh	r3, [r7, #30]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	8bfa      	ldrh	r2, [r7, #30]
 8003dfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e02:	b292      	uxth	r2, r2
 8003e04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	3306      	adds	r3, #6
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e30:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d019      	beq.n	8003e6e <PCD_EP_ISR_Handler+0x1f0>
 8003e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e48:	6959      	ldr	r1, [r3, #20]
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e50:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f004 f824 	bl	8007ea0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003e58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	441a      	add	r2, r3
 8003e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e64:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003e66:	2100      	movs	r1, #0
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f005 fe03 	bl	8009a74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003e78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f040 82bd 	bne.w	8004400 <PCD_EP_ISR_Handler+0x782>
 8003e86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e8a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003e8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e92:	f000 82b5 	beq.w	8004400 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	4413      	add	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	801a      	strh	r2, [r3, #0]
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ecc:	d91d      	bls.n	8003f0a <PCD_EP_ISR_Handler+0x28c>
 8003ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <PCD_EP_ISR_Handler+0x26a>
 8003ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	029b      	lsls	r3, r3, #10
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	e026      	b.n	8003f58 <PCD_EP_ISR_Handler+0x2da>
 8003f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <PCD_EP_ISR_Handler+0x2aa>
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e017      	b.n	8003f58 <PCD_EP_ISR_Handler+0x2da>
 8003f28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <PCD_EP_ISR_Handler+0x2c4>
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f3e:	3301      	adds	r3, #1
 8003f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	029b      	lsls	r3, r3, #10
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f68:	827b      	strh	r3, [r7, #18]
 8003f6a:	8a7b      	ldrh	r3, [r7, #18]
 8003f6c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003f70:	827b      	strh	r3, [r7, #18]
 8003f72:	8a7b      	ldrh	r3, [r7, #18]
 8003f74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f78:	827b      	strh	r3, [r7, #18]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	8a7b      	ldrh	r3, [r7, #18]
 8003f80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	8013      	strh	r3, [r2, #0]
 8003f94:	e234      	b.n	8004400 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003faa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f280 80fc 	bge.w	80041ac <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003fca:	4013      	ands	r3, r2
 8003fcc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003fe2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003fea:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004002:	7b1b      	ldrb	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d125      	bne.n	8004054 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	3306      	adds	r3, #6
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004030:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004034:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8092 	beq.w	8004162 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004048:	88da      	ldrh	r2, [r3, #6]
 800404a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800404e:	f003 ff27 	bl	8007ea0 <USB_ReadPMA>
 8004052:	e086      	b.n	8004162 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004056:	78db      	ldrb	r3, [r3, #3]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d10a      	bne.n	8004072 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800405c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004060:	461a      	mov	r2, r3
 8004062:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f9d9 	bl	800441c <HAL_PCD_EP_DB_Receive>
 800406a:	4603      	mov	r3, r0
 800406c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004070:	e077      	b.n	8004162 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	461a      	mov	r2, r3
 8004078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	441a      	add	r2, r3
 800409e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80040a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d024      	beq.n	800411a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d8:	b29b      	uxth	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	3302      	adds	r3, #2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6812      	ldr	r2, [r2, #0]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80040fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02e      	beq.n	8004162 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410a:	6959      	ldr	r1, [r3, #20]
 800410c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410e:	891a      	ldrh	r2, [r3, #8]
 8004110:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004114:	f003 fec4 	bl	8007ea0 <USB_ReadPMA>
 8004118:	e023      	b.n	8004162 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004122:	b29b      	uxth	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	3306      	adds	r3, #6
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004142:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004146:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800414a:	2b00      	cmp	r3, #0
 800414c:	d009      	beq.n	8004162 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	6959      	ldr	r1, [r3, #20]
 8004156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004158:	895a      	ldrh	r2, [r3, #10]
 800415a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800415e:	f003 fe9f 	bl	8007ea0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800416a:	441a      	add	r2, r3
 800416c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004178:	441a      	add	r2, r3
 800417a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800417e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <PCD_EP_ISR_Handler+0x514>
 8004186:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d206      	bcs.n	80041a0 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f005 fc6b 	bl	8009a74 <HAL_PCD_DataOutStageCallback>
 800419e:	e005      	b.n	80041ac <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041a6:	4618      	mov	r0, r3
 80041a8:	f002 f946 	bl	8006438 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80041ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8123 	beq.w	8004400 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80041ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	3310      	adds	r3, #16
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80041e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80041fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004206:	b29b      	uxth	r3, r3
 8004208:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800420a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420c:	78db      	ldrb	r3, [r3, #3]
 800420e:	2b01      	cmp	r3, #1
 8004210:	f040 80a2 	bne.w	8004358 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004216:	2200      	movs	r2, #0
 8004218:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800421a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421c:	7b1b      	ldrb	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8093 	beq.w	800434a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004224:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d046      	beq.n	80042be <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d126      	bne.n	8004286 <PCD_EP_ISR_Handler+0x608>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004246:	b29b      	uxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	4413      	add	r3, r2
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	011a      	lsls	r2, r3, #4
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	4413      	add	r3, r2
 800425a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426a:	b29a      	uxth	r2, r3
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	801a      	strh	r2, [r3, #0]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800427e:	b29a      	uxth	r2, r3
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	801a      	strh	r2, [r3, #0]
 8004284:	e061      	b.n	800434a <PCD_EP_ISR_Handler+0x6cc>
 8004286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004288:	785b      	ldrb	r3, [r3, #1]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d15d      	bne.n	800434a <PCD_EP_ISR_Handler+0x6cc>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a2:	4413      	add	r3, r2
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	011a      	lsls	r2, r3, #4
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	4413      	add	r3, r2
 80042b0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	2200      	movs	r2, #0
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e045      	b.n	800434a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d126      	bne.n	800431a <PCD_EP_ISR_Handler+0x69c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042da:	b29b      	uxth	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e0:	4413      	add	r3, r2
 80042e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	011a      	lsls	r2, r3, #4
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	4413      	add	r3, r2
 80042ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042fe:	b29a      	uxth	r2, r3
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800430e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004312:	b29a      	uxth	r2, r3
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e017      	b.n	800434a <PCD_EP_ISR_Handler+0x6cc>
 800431a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800431c:	785b      	ldrb	r3, [r3, #1]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d113      	bne.n	800434a <PCD_EP_ISR_Handler+0x6cc>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004330:	4413      	add	r3, r2
 8004332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	011a      	lsls	r2, r3, #4
 800433a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800433c:	4413      	add	r3, r2
 800433e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004342:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800434a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f005 fbaa 	bl	8009aaa <HAL_PCD_DataInStageCallback>
 8004356:	e053      	b.n	8004400 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004358:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800435c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d146      	bne.n	80043f2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	3302      	adds	r3, #2
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800438c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004392:	699a      	ldr	r2, [r3, #24]
 8004394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004398:	429a      	cmp	r2, r3
 800439a:	d907      	bls.n	80043ac <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800439c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043a4:	1ad2      	subs	r2, r2, r3
 80043a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e002      	b.n	80043b2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80043ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ae:	2200      	movs	r2, #0
 80043b0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80043b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f005 fb72 	bl	8009aaa <HAL_PCD_DataInStageCallback>
 80043c6:	e01b      	b.n	8004400 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80043c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043d0:	441a      	add	r2, r3
 80043d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80043d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d8:	69da      	ldr	r2, [r3, #28]
 80043da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80043de:	441a      	add	r2, r3
 80043e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043ea:	4618      	mov	r0, r3
 80043ec:	f002 f824 	bl	8006438 <USB_EPStartXfer>
 80043f0:	e006      	b.n	8004400 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80043f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043f6:	461a      	mov	r2, r3
 80043f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f91b 	bl	8004636 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004408:	b29b      	uxth	r3, r3
 800440a:	b21b      	sxth	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	f6ff ac3b 	blt.w	8003c88 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3758      	adds	r7, #88	@ 0x58
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d07e      	beq.n	8004532 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800443c:	b29b      	uxth	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	3302      	adds	r3, #2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	8b7b      	ldrh	r3, [r7, #26]
 8004464:	429a      	cmp	r2, r3
 8004466:	d306      	bcc.n	8004476 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	699a      	ldr	r2, [r3, #24]
 800446c:	8b7b      	ldrh	r3, [r7, #26]
 800446e:	1ad2      	subs	r2, r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	619a      	str	r2, [r3, #24]
 8004474:	e002      	b.n	800447c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d123      	bne.n	80044cc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800449a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800449e:	833b      	strh	r3, [r7, #24]
 80044a0:	8b3b      	ldrh	r3, [r7, #24]
 80044a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80044a6:	833b      	strh	r3, [r7, #24]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	8b3b      	ldrh	r3, [r7, #24]
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01f      	beq.n	8004516 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f0:	82fb      	strh	r3, [r7, #22]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	441a      	add	r2, r3
 8004500:	8afb      	ldrh	r3, [r7, #22]
 8004502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800450a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800450e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004516:	8b7b      	ldrh	r3, [r7, #26]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 8087 	beq.w	800462c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6959      	ldr	r1, [r3, #20]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	891a      	ldrh	r2, [r3, #8]
 800452a:	8b7b      	ldrh	r3, [r7, #26]
 800452c:	f003 fcb8 	bl	8007ea0 <USB_ReadPMA>
 8004530:	e07c      	b.n	800462c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	4413      	add	r3, r2
 8004546:	3306      	adds	r3, #6
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	8b7b      	ldrh	r3, [r7, #26]
 8004562:	429a      	cmp	r2, r3
 8004564:	d306      	bcc.n	8004574 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	8b7b      	ldrh	r3, [r7, #26]
 800456c:	1ad2      	subs	r2, r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	619a      	str	r2, [r3, #24]
 8004572:	e002      	b.n	800457a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2200      	movs	r2, #0
 8004578:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d123      	bne.n	80045ca <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459c:	83fb      	strh	r3, [r7, #30]
 800459e:	8bfb      	ldrh	r3, [r7, #30]
 80045a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045a4:	83fb      	strh	r3, [r7, #30]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	441a      	add	r2, r3
 80045b4:	8bfb      	ldrh	r3, [r7, #30]
 80045b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d11f      	bne.n	8004614 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ee:	83bb      	strh	r3, [r7, #28]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	8bbb      	ldrh	r3, [r7, #28]
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004614:	8b7b      	ldrh	r3, [r7, #26]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6959      	ldr	r1, [r3, #20]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	895a      	ldrh	r2, [r3, #10]
 8004626:	8b7b      	ldrh	r3, [r7, #26]
 8004628:	f003 fc3a 	bl	8007ea0 <USB_ReadPMA>
    }
  }

  return count;
 800462c:	8b7b      	ldrh	r3, [r7, #26]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3720      	adds	r7, #32
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b0a4      	sub	sp, #144	@ 0x90
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	4613      	mov	r3, r2
 8004642:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 81dd 	beq.w	8004a0a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004658:	b29b      	uxth	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	3302      	adds	r3, #2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004678:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	699a      	ldr	r2, [r3, #24]
 8004680:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004684:	429a      	cmp	r2, r3
 8004686:	d907      	bls.n	8004698 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004690:	1ad2      	subs	r2, r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	619a      	str	r2, [r3, #24]
 8004696:	e002      	b.n	800469e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2200      	movs	r2, #0
 800469c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f040 80b9 	bne.w	800481a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d126      	bne.n	80046fe <HAL_PCD_EP_DB_Transmit+0xc8>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046be:	b29b      	uxth	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	4413      	add	r3, r2
 80046c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	011a      	lsls	r2, r3, #4
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	4413      	add	r3, r2
 80046d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80046d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	e01a      	b.n	8004734 <HAL_PCD_EP_DB_Transmit+0xfe>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	785b      	ldrb	r3, [r3, #1]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d116      	bne.n	8004734 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	637b      	str	r3, [r7, #52]	@ 0x34
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004714:	b29b      	uxth	r3, r3
 8004716:	461a      	mov	r2, r3
 8004718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471a:	4413      	add	r3, r2
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	011a      	lsls	r2, r3, #4
 8004724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004726:	4413      	add	r3, r2
 8004728:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800472c:	633b      	str	r3, [r7, #48]	@ 0x30
 800472e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004730:	2200      	movs	r2, #0
 8004732:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	785b      	ldrb	r3, [r3, #1]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d126      	bne.n	8004790 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004750:	b29b      	uxth	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	011a      	lsls	r2, r3, #4
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004774:	b29a      	uxth	r2, r3
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	801a      	strh	r2, [r3, #0]
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29a      	uxth	r2, r3
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	801a      	strh	r2, [r3, #0]
 800478e:	e017      	b.n	80047c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d113      	bne.n	80047c0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	4413      	add	r3, r2
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047b8:	623b      	str	r3, [r7, #32]
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	2200      	movs	r2, #0
 80047be:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	4619      	mov	r1, r3
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f005 f96f 	bl	8009aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047cc:	88fb      	ldrh	r3, [r7, #6]
 80047ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 82fc 	beq.w	8004dd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	461a      	mov	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f2:	82fb      	strh	r3, [r7, #22]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	461a      	mov	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	8afb      	ldrh	r3, [r7, #22]
 8004804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800480c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004814:	b29b      	uxth	r3, r3
 8004816:	8013      	strh	r3, [r2, #0]
 8004818:	e2da      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d021      	beq.n	8004868 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800483a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	441a      	add	r2, r3
 8004850:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800485c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800486e:	2b01      	cmp	r3, #1
 8004870:	f040 82ae 	bne.w	8004dd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800487c:	441a      	add	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	69da      	ldr	r2, [r3, #28]
 8004886:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800488a:	441a      	add	r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6a1a      	ldr	r2, [r3, #32]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	429a      	cmp	r2, r3
 800489a:	d30b      	bcc.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ac:	1ad2      	subs	r2, r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	621a      	str	r2, [r3, #32]
 80048b2:	e017      	b.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80048bc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80048cc:	e00a      	b.n	80048e4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2200      	movs	r2, #0
 80048e2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	785b      	ldrb	r3, [r3, #1]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d165      	bne.n	80049b8 <HAL_PCD_EP_DB_Transmit+0x382>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004900:	4413      	add	r3, r2
 8004902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	011a      	lsls	r2, r3, #4
 800490a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490c:	4413      	add	r3, r2
 800490e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	b29b      	uxth	r3, r3
 800491a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491e:	b29a      	uxth	r2, r3
 8004920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004928:	2b3e      	cmp	r3, #62	@ 0x3e
 800492a:	d91d      	bls.n	8004968 <HAL_PCD_EP_DB_Transmit+0x332>
 800492c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004934:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <HAL_PCD_EP_DB_Transmit+0x310>
 8004940:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004942:	3b01      	subs	r3, #1
 8004944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29a      	uxth	r2, r3
 800494c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494e:	b29b      	uxth	r3, r3
 8004950:	029b      	lsls	r3, r3, #10
 8004952:	b29b      	uxth	r3, r3
 8004954:	4313      	orrs	r3, r2
 8004956:	b29b      	uxth	r3, r3
 8004958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800495c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004960:	b29a      	uxth	r2, r3
 8004962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	e044      	b.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <HAL_PCD_EP_DB_Transmit+0x350>
 8004970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497e:	b29a      	uxth	r2, r3
 8004980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	e035      	b.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800498e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_PCD_EP_DB_Transmit+0x36a>
 800499a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499c:	3301      	adds	r3, #1
 800499e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	4313      	orrs	r3, r2
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e01c      	b.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d118      	bne.n	80049f2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d4:	4413      	add	r3, r2
 80049d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80049e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6959      	ldr	r1, [r3, #20]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	891a      	ldrh	r2, [r3, #8]
 80049fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f003 fa07 	bl	8007e16 <USB_WritePMA>
 8004a08:	e1e2      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3306      	adds	r3, #6
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	6812      	ldr	r2, [r2, #0]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a32:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d307      	bcc.n	8004a52 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	619a      	str	r2, [r3, #24]
 8004a50:	e002      	b.n	8004a58 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2200      	movs	r2, #0
 8004a56:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 80c0 	bne.w	8004be2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d126      	bne.n	8004ab8 <HAL_PCD_EP_DB_Transmit+0x482>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a7e:	4413      	add	r3, r2
 8004a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	011a      	lsls	r2, r3, #4
 8004a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aa0:	801a      	strh	r2, [r3, #0]
 8004aa2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ab4:	801a      	strh	r2, [r3, #0]
 8004ab6:	e01a      	b.n	8004aee <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d116      	bne.n	8004aee <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ad4:	4413      	add	r3, r2
 8004ad6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	011a      	lsls	r2, r3, #4
 8004ade:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ae6:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ae8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aea:	2200      	movs	r2, #0
 8004aec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	785b      	ldrb	r3, [r3, #1]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d12b      	bne.n	8004b54 <HAL_PCD_EP_DB_Transmit+0x51e>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b10:	4413      	add	r3, r2
 8004b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	011a      	lsls	r2, r3, #4
 8004b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b50:	801a      	strh	r2, [r3, #0]
 8004b52:	e017      	b.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d113      	bne.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b6a:	4413      	add	r3, r2
 8004b6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	011a      	lsls	r2, r3, #4
 8004b74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b76:	4413      	add	r3, r2
 8004b78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b80:	2200      	movs	r2, #0
 8004b82:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f004 ff8d 	bl	8009aaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 811a 	bne.w	8004dd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]
 8004be0:	e0f6      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d121      	bne.n	8004c30 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c06:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	441a      	add	r2, r3
 8004c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	f040 80ca 	bne.w	8004dd0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	695a      	ldr	r2, [r3, #20]
 8004c40:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c44:	441a      	add	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c52:	441a      	add	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6a1a      	ldr	r2, [r3, #32]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d30b      	bcc.n	8004c7c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c74:	1ad2      	subs	r2, r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	621a      	str	r2, [r3, #32]
 8004c7a:	e017      	b.n	8004cac <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d108      	bne.n	8004c96 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004c84:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004c94:	e00a      	b.n	8004cac <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d165      	bne.n	8004d86 <HAL_PCD_EP_DB_Transmit+0x750>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cce:	4413      	add	r3, r2
 8004cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	011a      	lsls	r2, r3, #4
 8004cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cda:	4413      	add	r3, r2
 8004cdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004ce0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ce2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cf0:	801a      	strh	r2, [r3, #0]
 8004cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cf6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cf8:	d91d      	bls.n	8004d36 <HAL_PCD_EP_DB_Transmit+0x700>
 8004cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004d0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d10:	3b01      	subs	r3, #1
 8004d12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	4313      	orrs	r3, r2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	e041      	b.n	8004dba <HAL_PCD_EP_DB_Transmit+0x784>
 8004d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d50:	801a      	strh	r2, [r3, #0]
 8004d52:	e032      	b.n	8004dba <HAL_PCD_EP_DB_Transmit+0x784>
 8004d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_PCD_EP_DB_Transmit+0x738>
 8004d68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	e019      	b.n	8004dba <HAL_PCD_EP_DB_Transmit+0x784>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d115      	bne.n	8004dba <HAL_PCD_EP_DB_Transmit+0x784>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d9c:	4413      	add	r3, r2
 8004d9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	011a      	lsls	r2, r3, #4
 8004da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da8:	4413      	add	r3, r2
 8004daa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6959      	ldr	r1, [r3, #20]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	895a      	ldrh	r2, [r3, #10]
 8004dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f003 f823 	bl	8007e16 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dea:	82bb      	strh	r3, [r7, #20]
 8004dec:	8abb      	ldrh	r3, [r7, #20]
 8004dee:	f083 0310 	eor.w	r3, r3, #16
 8004df2:	82bb      	strh	r3, [r7, #20]
 8004df4:	8abb      	ldrh	r3, [r7, #20]
 8004df6:	f083 0320 	eor.w	r3, r3, #32
 8004dfa:	82bb      	strh	r3, [r7, #20]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	8abb      	ldrh	r3, [r7, #20]
 8004e0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3790      	adds	r7, #144	@ 0x90
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	607b      	str	r3, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	817b      	strh	r3, [r7, #10]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004e3c:	897b      	ldrh	r3, [r7, #10]
 8004e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e48:	897b      	ldrh	r3, [r7, #10]
 8004e4a:	f003 0207 	and.w	r2, r3, #7
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	3310      	adds	r3, #16
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e009      	b.n	8004e74 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e60:	897a      	ldrh	r2, [r7, #10]
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4413      	add	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d107      	bne.n	8004e8a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	80da      	strh	r2, [r3, #6]
 8004e88:	e00b      	b.n	8004ea2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	371c      	adds	r7, #28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr
	...

08004eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e272      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8087 	beq.w	8004fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ed0:	4b92      	ldr	r3, [pc, #584]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 030c 	and.w	r3, r3, #12
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d00c      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004edc:	4b8f      	ldr	r3, [pc, #572]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d112      	bne.n	8004f0e <HAL_RCC_OscConfig+0x5e>
 8004ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d10b      	bne.n	8004f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef6:	4b89      	ldr	r3, [pc, #548]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d06c      	beq.n	8004fdc <HAL_RCC_OscConfig+0x12c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d168      	bne.n	8004fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e24c      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_OscConfig+0x76>
 8004f18:	4b80      	ldr	r3, [pc, #512]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a7f      	ldr	r2, [pc, #508]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	e02e      	b.n	8004f84 <HAL_RCC_OscConfig+0xd4>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x98>
 8004f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7a      	ldr	r2, [pc, #488]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4b78      	ldr	r3, [pc, #480]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a77      	ldr	r2, [pc, #476]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e01d      	b.n	8004f84 <HAL_RCC_OscConfig+0xd4>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCC_OscConfig+0xbc>
 8004f52:	4b72      	ldr	r3, [pc, #456]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a71      	ldr	r2, [pc, #452]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a6e      	ldr	r2, [pc, #440]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	e00b      	b.n	8004f84 <HAL_RCC_OscConfig+0xd4>
 8004f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6a      	ldr	r2, [pc, #424]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	4b68      	ldr	r3, [pc, #416]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a67      	ldr	r2, [pc, #412]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d013      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fc fe1e 	bl	8001bcc <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f94:	f7fc fe1a 	bl	8001bcc <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b64      	cmp	r3, #100	@ 0x64
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e200      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f0      	beq.n	8004f94 <HAL_RCC_OscConfig+0xe4>
 8004fb2:	e014      	b.n	8004fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fc fe0a 	bl	8001bcc <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fbc:	f7fc fe06 	bl	8001bcc <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	@ 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1ec      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fce:	4b53      	ldr	r3, [pc, #332]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x10c>
 8004fda:	e000      	b.n	8004fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d063      	beq.n	80050b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fea:	4b4c      	ldr	r3, [pc, #304]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f003 030c 	and.w	r3, r3, #12
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ff6:	4b49      	ldr	r3, [pc, #292]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d11c      	bne.n	800503c <HAL_RCC_OscConfig+0x18c>
 8005002:	4b46      	ldr	r3, [pc, #280]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d116      	bne.n	800503c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	4b43      	ldr	r3, [pc, #268]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <HAL_RCC_OscConfig+0x176>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d001      	beq.n	8005026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e1c0      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005026:	4b3d      	ldr	r3, [pc, #244]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4939      	ldr	r1, [pc, #228]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503a:	e03a      	b.n	80050b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005044:	4b36      	ldr	r3, [pc, #216]	@ (8005120 <HAL_RCC_OscConfig+0x270>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504a:	f7fc fdbf 	bl	8001bcc <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005052:	f7fc fdbb 	bl	8001bcc <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e1a1      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005064:	4b2d      	ldr	r3, [pc, #180]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b2a      	ldr	r3, [pc, #168]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4927      	ldr	r1, [pc, #156]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 8005080:	4313      	orrs	r3, r2
 8005082:	600b      	str	r3, [r1, #0]
 8005084:	e015      	b.n	80050b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005086:	4b26      	ldr	r3, [pc, #152]	@ (8005120 <HAL_RCC_OscConfig+0x270>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fc fd9e 	bl	8001bcc <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005094:	f7fc fd9a 	bl	8001bcc <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e180      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a6:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d03a      	beq.n	8005134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d019      	beq.n	80050fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c6:	4b17      	ldr	r3, [pc, #92]	@ (8005124 <HAL_RCC_OscConfig+0x274>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050cc:	f7fc fd7e 	bl	8001bcc <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d4:	f7fc fd7a 	bl	8001bcc <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e160      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <HAL_RCC_OscConfig+0x26c>)
 80050e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80050f2:	2001      	movs	r0, #1
 80050f4:	f000 faba 	bl	800566c <RCC_Delay>
 80050f8:	e01c      	b.n	8005134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005124 <HAL_RCC_OscConfig+0x274>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005100:	f7fc fd64 	bl	8001bcc <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005106:	e00f      	b.n	8005128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005108:	f7fc fd60 	bl	8001bcc <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d908      	bls.n	8005128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e146      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	42420000 	.word	0x42420000
 8005124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005128:	4b92      	ldr	r3, [pc, #584]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1e9      	bne.n	8005108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80a6 	beq.w	800528e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005146:	4b8b      	ldr	r3, [pc, #556]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005152:	4b88      	ldr	r3, [pc, #544]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	4a87      	ldr	r2, [pc, #540]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800515c:	61d3      	str	r3, [r2, #28]
 800515e:	4b85      	ldr	r3, [pc, #532]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516e:	4b82      	ldr	r3, [pc, #520]	@ (8005378 <HAL_RCC_OscConfig+0x4c8>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d118      	bne.n	80051ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517a:	4b7f      	ldr	r3, [pc, #508]	@ (8005378 <HAL_RCC_OscConfig+0x4c8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7e      	ldr	r2, [pc, #504]	@ (8005378 <HAL_RCC_OscConfig+0x4c8>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005186:	f7fc fd21 	bl	8001bcc <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518e:	f7fc fd1d 	bl	8001bcc <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b64      	cmp	r3, #100	@ 0x64
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e103      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	4b75      	ldr	r3, [pc, #468]	@ (8005378 <HAL_RCC_OscConfig+0x4c8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <HAL_RCC_OscConfig+0x312>
 80051b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6213      	str	r3, [r2, #32]
 80051c0:	e02d      	b.n	800521e <HAL_RCC_OscConfig+0x36e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x334>
 80051ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	4a69      	ldr	r2, [pc, #420]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	6213      	str	r3, [r2, #32]
 80051d6:	4b67      	ldr	r3, [pc, #412]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a66      	ldr	r2, [pc, #408]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051dc:	f023 0304 	bic.w	r3, r3, #4
 80051e0:	6213      	str	r3, [r2, #32]
 80051e2:	e01c      	b.n	800521e <HAL_RCC_OscConfig+0x36e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	d10c      	bne.n	8005206 <HAL_RCC_OscConfig+0x356>
 80051ec:	4b61      	ldr	r3, [pc, #388]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	4a60      	ldr	r2, [pc, #384]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	6213      	str	r3, [r2, #32]
 80051f8:	4b5e      	ldr	r3, [pc, #376]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	4a5d      	ldr	r2, [pc, #372]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80051fe:	f043 0301 	orr.w	r3, r3, #1
 8005202:	6213      	str	r3, [r2, #32]
 8005204:	e00b      	b.n	800521e <HAL_RCC_OscConfig+0x36e>
 8005206:	4b5b      	ldr	r3, [pc, #364]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	4a5a      	ldr	r2, [pc, #360]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 800520c:	f023 0301 	bic.w	r3, r3, #1
 8005210:	6213      	str	r3, [r2, #32]
 8005212:	4b58      	ldr	r3, [pc, #352]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	4a57      	ldr	r2, [pc, #348]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005218:	f023 0304 	bic.w	r3, r3, #4
 800521c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d015      	beq.n	8005252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005226:	f7fc fcd1 	bl	8001bcc <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800522c:	e00a      	b.n	8005244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522e:	f7fc fccd 	bl	8001bcc <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e0b1      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005244:	4b4b      	ldr	r3, [pc, #300]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ee      	beq.n	800522e <HAL_RCC_OscConfig+0x37e>
 8005250:	e014      	b.n	800527c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005252:	f7fc fcbb 	bl	8001bcc <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005258:	e00a      	b.n	8005270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525a:	f7fc fcb7 	bl	8001bcc <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005268:	4293      	cmp	r3, r2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e09b      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005270:	4b40      	ldr	r3, [pc, #256]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ee      	bne.n	800525a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4b3c      	ldr	r3, [pc, #240]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	4a3b      	ldr	r2, [pc, #236]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800528c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8087 	beq.w	80053a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005298:	4b36      	ldr	r3, [pc, #216]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d061      	beq.n	8005368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d146      	bne.n	800533a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ac:	4b33      	ldr	r3, [pc, #204]	@ (800537c <HAL_RCC_OscConfig+0x4cc>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fc fc8b 	bl	8001bcc <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ba:	f7fc fc87 	bl	8001bcc <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e06d      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052cc:	4b29      	ldr	r3, [pc, #164]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e0:	d108      	bne.n	80052f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80052e2:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	4921      	ldr	r1, [pc, #132]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a19      	ldr	r1, [r3, #32]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	430b      	orrs	r3, r1
 8005306:	491b      	ldr	r1, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 8005308:	4313      	orrs	r3, r2
 800530a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800530c:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <HAL_RCC_OscConfig+0x4cc>)
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005312:	f7fc fc5b 	bl	8001bcc <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531a:	f7fc fc57 	bl	8001bcc <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e03d      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800532c:	4b11      	ldr	r3, [pc, #68]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x46a>
 8005338:	e035      	b.n	80053a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533a:	4b10      	ldr	r3, [pc, #64]	@ (800537c <HAL_RCC_OscConfig+0x4cc>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fc fc44 	bl	8001bcc <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005348:	f7fc fc40 	bl	8001bcc <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e026      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800535a:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <HAL_RCC_OscConfig+0x4c4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1f0      	bne.n	8005348 <HAL_RCC_OscConfig+0x498>
 8005366:	e01e      	b.n	80053a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d107      	bne.n	8005380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e019      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
 8005374:	40021000 	.word	0x40021000
 8005378:	40007000 	.word	0x40007000
 800537c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005380:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_RCC_OscConfig+0x500>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	429a      	cmp	r2, r3
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539e:	429a      	cmp	r2, r3
 80053a0:	d001      	beq.n	80053a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0d0      	b.n	800556a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d910      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b67      	ldr	r3, [pc, #412]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 0207 	bic.w	r2, r3, #7
 80053de:	4965      	ldr	r1, [pc, #404]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	4b63      	ldr	r3, [pc, #396]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0b8      	b.n	800556a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d020      	beq.n	8005446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005410:	4b59      	ldr	r3, [pc, #356]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4a58      	ldr	r2, [pc, #352]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800541a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005428:	4b53      	ldr	r3, [pc, #332]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a52      	ldr	r2, [pc, #328]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005434:	4b50      	ldr	r3, [pc, #320]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	494d      	ldr	r1, [pc, #308]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005442:	4313      	orrs	r3, r2
 8005444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d040      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d107      	bne.n	800546a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545a:	4b47      	ldr	r3, [pc, #284]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d115      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e07f      	b.n	800556a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d107      	bne.n	8005482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005472:	4b41      	ldr	r3, [pc, #260]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e073      	b.n	800556a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005482:	4b3d      	ldr	r3, [pc, #244]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e06b      	b.n	800556a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005492:	4b39      	ldr	r3, [pc, #228]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4936      	ldr	r1, [pc, #216]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054a4:	f7fc fb92 	bl	8001bcc <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ac:	f7fc fb8e 	bl	8001bcc <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e053      	b.n	800556a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f003 020c 	and.w	r2, r3, #12
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d1eb      	bne.n	80054ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d4:	4b27      	ldr	r3, [pc, #156]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d210      	bcs.n	8005504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b24      	ldr	r3, [pc, #144]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 0207 	bic.w	r2, r3, #7
 80054ea:	4922      	ldr	r1, [pc, #136]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f2:	4b20      	ldr	r3, [pc, #128]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d001      	beq.n	8005504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e032      	b.n	800556a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005510:	4b19      	ldr	r3, [pc, #100]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4916      	ldr	r1, [pc, #88]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 800551e:	4313      	orrs	r3, r2
 8005520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800552e:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	490e      	ldr	r1, [pc, #56]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 800553e:	4313      	orrs	r3, r2
 8005540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005542:	f000 f821 	bl	8005588 <HAL_RCC_GetSysClockFreq>
 8005546:	4602      	mov	r2, r0
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	490a      	ldr	r1, [pc, #40]	@ (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005554:	5ccb      	ldrb	r3, [r1, r3]
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	4a09      	ldr	r2, [pc, #36]	@ (8005580 <HAL_RCC_ClockConfig+0x1cc>)
 800555c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800555e:	4b09      	ldr	r3, [pc, #36]	@ (8005584 <HAL_RCC_ClockConfig+0x1d0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f7fc faf0 	bl	8001b48 <HAL_InitTick>

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40022000 	.word	0x40022000
 8005578:	40021000 	.word	0x40021000
 800557c:	0800cb30 	.word	0x0800cb30
 8005580:	20000008 	.word	0x20000008
 8005584:	2000000c 	.word	0x2000000c

08005588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	2300      	movs	r3, #0
 800559c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800559e:	2300      	movs	r3, #0
 80055a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80055a2:	4b1e      	ldr	r3, [pc, #120]	@ (800561c <HAL_RCC_GetSysClockFreq+0x94>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d002      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0x30>
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d003      	beq.n	80055be <HAL_RCC_GetSysClockFreq+0x36>
 80055b6:	e027      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055b8:	4b19      	ldr	r3, [pc, #100]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x98>)
 80055ba:	613b      	str	r3, [r7, #16]
      break;
 80055bc:	e027      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	0c9b      	lsrs	r3, r3, #18
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	4a17      	ldr	r2, [pc, #92]	@ (8005624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80055c8:	5cd3      	ldrb	r3, [r2, r3]
 80055ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d010      	beq.n	80055f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80055d6:	4b11      	ldr	r3, [pc, #68]	@ (800561c <HAL_RCC_GetSysClockFreq+0x94>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	0c5b      	lsrs	r3, r3, #17
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	4a11      	ldr	r2, [pc, #68]	@ (8005628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80055e2:	5cd3      	ldrb	r3, [r2, r3]
 80055e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x98>)
 80055ea:	fb03 f202 	mul.w	r2, r3, r2
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e004      	b.n	8005602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a0c      	ldr	r2, [pc, #48]	@ (800562c <HAL_RCC_GetSysClockFreq+0xa4>)
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	613b      	str	r3, [r7, #16]
      break;
 8005606:	e002      	b.n	800560e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005608:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <HAL_RCC_GetSysClockFreq+0x98>)
 800560a:	613b      	str	r3, [r7, #16]
      break;
 800560c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800560e:	693b      	ldr	r3, [r7, #16]
}
 8005610:	4618      	mov	r0, r3
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	007a1200 	.word	0x007a1200
 8005624:	0800cb48 	.word	0x0800cb48
 8005628:	0800cb58 	.word	0x0800cb58
 800562c:	003d0900 	.word	0x003d0900

08005630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005634:	4b02      	ldr	r3, [pc, #8]	@ (8005640 <HAL_RCC_GetHCLKFreq+0x10>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	20000008 	.word	0x20000008

08005644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005648:	f7ff fff2 	bl	8005630 <HAL_RCC_GetHCLKFreq>
 800564c:	4602      	mov	r2, r0
 800564e:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	0a1b      	lsrs	r3, r3, #8
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	4903      	ldr	r1, [pc, #12]	@ (8005668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800565a:	5ccb      	ldrb	r3, [r1, r3]
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	0800cb40 	.word	0x0800cb40

0800566c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005674:	4b0a      	ldr	r3, [pc, #40]	@ (80056a0 <RCC_Delay+0x34>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a0a      	ldr	r2, [pc, #40]	@ (80056a4 <RCC_Delay+0x38>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	0a5b      	lsrs	r3, r3, #9
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005688:	bf00      	nop
  }
  while (Delay --);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1e5a      	subs	r2, r3, #1
 800568e:	60fa      	str	r2, [r7, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1f9      	bne.n	8005688 <RCC_Delay+0x1c>
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	20000008 	.word	0x20000008
 80056a4:	10624dd3 	.word	0x10624dd3

080056a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d07d      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80056c4:	2300      	movs	r3, #0
 80056c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056de:	61d3      	str	r3, [r2, #28]
 80056e0:	4b49      	ldr	r3, [pc, #292]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f0:	4b46      	ldr	r3, [pc, #280]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d118      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056fc:	4b43      	ldr	r3, [pc, #268]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a42      	ldr	r2, [pc, #264]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005708:	f7fc fa60 	bl	8001bcc <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570e:	e008      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005710:	f7fc fa5c 	bl	8001bcc <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b64      	cmp	r3, #100	@ 0x64
 800571c:	d901      	bls.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e06d      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b3a      	ldr	r3, [pc, #232]	@ (800580c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800572e:	4b36      	ldr	r3, [pc, #216]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005736:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d02e      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	429a      	cmp	r2, r3
 800574a:	d027      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800574c:	4b2e      	ldr	r3, [pc, #184]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	6a1b      	ldr	r3, [r3, #32]
 8005750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005754:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005756:	4b2e      	ldr	r3, [pc, #184]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800575c:	4b2c      	ldr	r3, [pc, #176]	@ (8005810 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005762:	4a29      	ldr	r2, [pc, #164]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d014      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fc fa2b 	bl	8001bcc <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005778:	e00a      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577a:	f7fc fa27 	bl	8001bcc <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005788:	4293      	cmp	r3, r2
 800578a:	d901      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e036      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005790:	4b1d      	ldr	r3, [pc, #116]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0ee      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579c:	4b1a      	ldr	r3, [pc, #104]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4917      	ldr	r1, [pc, #92]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d105      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b4:	4b14      	ldr	r3, [pc, #80]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	4a13      	ldr	r2, [pc, #76]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	490b      	ldr	r1, [pc, #44]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057ea:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	4904      	ldr	r1, [pc, #16]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	40007000 	.word	0x40007000
 8005810:	42420440 	.word	0x42420440

08005814 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	4638      	mov	r0, r7
 800581e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr

0800582e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800583e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005842:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3714      	adds	r7, #20
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005862:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005866:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	b29b      	uxth	r3, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	b29b      	uxth	r3, r3
 8005878:	4013      	ands	r3, r2
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	460b      	mov	r3, r1
 8005898:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	4638      	mov	r0, r7
 80058b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b09d      	sub	sp, #116	@ 0x74
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005906:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	78db      	ldrb	r3, [r3, #3]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d81f      	bhi.n	8005952 <USB_ActivateEndpoint+0x72>
 8005912:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <USB_ActivateEndpoint+0x38>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005929 	.word	0x08005929
 800591c:	08005945 	.word	0x08005945
 8005920:	0800595b 	.word	0x0800595b
 8005924:	08005937 	.word	0x08005937
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005928:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800592c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005930:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005934:	e012      	b.n	800595c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005936:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800593a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800593e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005942:	e00b      	b.n	800595c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005944:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800594c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005950:	e004      	b.n	800595c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005958:	e000      	b.n	800595c <USB_ActivateEndpoint+0x7c>
      break;
 800595a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005994:	b29b      	uxth	r3, r3
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	7812      	ldrb	r2, [r2, #0]
 800599a:	4313      	orrs	r3, r2
 800599c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	441a      	add	r2, r3
 80059aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	7b1b      	ldrb	r3, [r3, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 8178 	bne.w	8005cbc <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 8084 	beq.w	8005ade <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	461a      	mov	r2, r3
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	4413      	add	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	011a      	lsls	r2, r3, #4
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	88db      	ldrh	r3, [r3, #6]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	827b      	strh	r3, [r7, #18]
 8005a18:	8a7b      	ldrh	r3, [r7, #18]
 8005a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01b      	beq.n	8005a5a <USB_ActivateEndpoint+0x17a>
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a38:	823b      	strh	r3, [r7, #16]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	441a      	add	r2, r3
 8005a44:	8a3b      	ldrh	r3, [r7, #16]
 8005a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a52:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	78db      	ldrb	r3, [r3, #3]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d020      	beq.n	8005aa4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a78:	81bb      	strh	r3, [r7, #12]
 8005a7a:	89bb      	ldrh	r3, [r7, #12]
 8005a7c:	f083 0320 	eor.w	r3, r3, #32
 8005a80:	81bb      	strh	r3, [r7, #12]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	441a      	add	r2, r3
 8005a8c:	89bb      	ldrh	r3, [r7, #12]
 8005a8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	8013      	strh	r3, [r2, #0]
 8005aa2:	e2d5      	b.n	8006050 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ab6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005aba:	81fb      	strh	r3, [r7, #14]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
 8005ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	8013      	strh	r3, [r2, #0]
 8005adc:	e2b8      	b.n	8006050 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	461a      	mov	r2, r3
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	4413      	add	r3, r2
 8005af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	011a      	lsls	r2, r3, #4
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	88db      	ldrh	r3, [r3, #6]
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	4413      	add	r3, r2
 8005b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	011a      	lsls	r2, r3, #4
 8005b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2e:	4413      	add	r3, r2
 8005b30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b4c:	d91d      	bls.n	8005b8a <USB_ActivateEndpoint+0x2aa>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <USB_ActivateEndpoint+0x288>
 8005b62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b64:	3b01      	subs	r3, #1
 8005b66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	029b      	lsls	r3, r3, #10
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	4313      	orrs	r3, r2
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e026      	b.n	8005bd8 <USB_ActivateEndpoint+0x2f8>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <USB_ActivateEndpoint+0x2c8>
 8005b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e017      	b.n	8005bd8 <USB_ActivateEndpoint+0x2f8>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <USB_ActivateEndpoint+0x2e2>
 8005bbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005be6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01b      	beq.n	8005c28 <USB_ActivateEndpoint+0x348>
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	843b      	strh	r3, [r7, #32]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	8c3b      	ldrh	r3, [r7, #32]
 8005c14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d124      	bne.n	8005c7a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c46:	83bb      	strh	r3, [r7, #28]
 8005c48:	8bbb      	ldrh	r3, [r7, #28]
 8005c4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005c4e:	83bb      	strh	r3, [r7, #28]
 8005c50:	8bbb      	ldrh	r3, [r7, #28]
 8005c52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c56:	83bb      	strh	r3, [r7, #28]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	8bbb      	ldrh	r3, [r7, #28]
 8005c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	8013      	strh	r3, [r2, #0]
 8005c78:	e1ea      	b.n	8006050 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c90:	83fb      	strh	r3, [r7, #30]
 8005c92:	8bfb      	ldrh	r3, [r7, #30]
 8005c94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c98:	83fb      	strh	r3, [r7, #30]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	8bfb      	ldrh	r3, [r7, #30]
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
 8005cba:	e1c9      	b.n	8006050 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d11e      	bne.n	8005d02 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cda:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	441a      	add	r2, r3
 8005ce8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cf4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]
 8005d00:	e01d      	b.n	8005d3e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d18:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	441a      	add	r2, r3
 8005d26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005d2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d4e:	4413      	add	r3, r2
 8005d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	011a      	lsls	r2, r3, #4
 8005d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	891b      	ldrh	r3, [r3, #8]
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d82:	4413      	add	r3, r2
 8005d84:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	011a      	lsls	r2, r3, #4
 8005d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005d94:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	895b      	ldrh	r3, [r3, #10]
 8005d9a:	085b      	lsrs	r3, r3, #1
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	785b      	ldrb	r3, [r3, #1]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 8093 	bne.w	8005ed6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005dc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01b      	beq.n	8005e04 <USB_ActivateEndpoint+0x524>
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005df8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005e12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d01b      	beq.n	8005e54 <USB_ActivateEndpoint+0x574>
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e32:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	441a      	add	r2, r3
 8005e3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005e6c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005e6e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005e74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005e76:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
 8005ed4:	e0bc      	b.n	8006050 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005ee6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01d      	beq.n	8005f2e <USB_ActivateEndpoint+0x64e>
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f08:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005f3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01d      	beq.n	8005f86 <USB_ActivateEndpoint+0x6a6>
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f60:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	441a      	add	r2, r3
 8005f6e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f7e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	78db      	ldrb	r3, [r3, #3]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d024      	beq.n	8005fd8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005fa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005fac:	f083 0320 	eor.w	r3, r3, #32
 8005fb0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	e01d      	b.n	8006014 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800600c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006010:	b29b      	uxth	r3, r3
 8006012:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800602a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	441a      	add	r2, r3
 8006038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800603c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006040:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800604c:	b29b      	uxth	r3, r3
 800604e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006050:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006054:	4618      	mov	r0, r3
 8006056:	3774      	adds	r7, #116	@ 0x74
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b08d      	sub	sp, #52	@ 0x34
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	7b1b      	ldrb	r3, [r3, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f040 808e 	bne.w	8006190 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d044      	beq.n	8006106 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	81bb      	strh	r3, [r7, #12]
 800608a:	89bb      	ldrh	r3, [r7, #12]
 800608c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <USB_DeactivateEndpoint+0x6c>
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060aa:	817b      	strh	r3, [r7, #10]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	441a      	add	r2, r3
 80060b6:	897b      	ldrh	r3, [r7, #10]
 80060b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4413      	add	r3, r2
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29b      	uxth	r3, r3
 80060da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e2:	813b      	strh	r3, [r7, #8]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	893b      	ldrh	r3, [r7, #8]
 80060f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006100:	b29b      	uxth	r3, r3
 8006102:	8013      	strh	r3, [r2, #0]
 8006104:	e192      	b.n	800642c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	827b      	strh	r3, [r7, #18]
 8006114:	8a7b      	ldrh	r3, [r7, #18]
 8006116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01b      	beq.n	8006156 <USB_DeactivateEndpoint+0xf6>
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006130:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006134:	823b      	strh	r3, [r7, #16]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	441a      	add	r2, r3
 8006140:	8a3b      	ldrh	r3, [r7, #16]
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800614a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800614e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800616c:	81fb      	strh	r3, [r7, #14]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	89fb      	ldrh	r3, [r7, #14]
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]
 800618e:	e14d      	b.n	800642c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 80a5 	bne.w	80062e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	843b      	strh	r3, [r7, #32]
 80061a8:	8c3b      	ldrh	r3, [r7, #32]
 80061aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01b      	beq.n	80061ea <USB_DeactivateEndpoint+0x18a>
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c8:	83fb      	strh	r3, [r7, #30]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	8bfb      	ldrh	r3, [r7, #30]
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	83bb      	strh	r3, [r7, #28]
 80061f8:	8bbb      	ldrh	r3, [r7, #28]
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01b      	beq.n	800623a <USB_DeactivateEndpoint+0x1da>
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006214:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006218:	837b      	strh	r3, [r7, #26]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	8b7b      	ldrh	r3, [r7, #26]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006232:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29b      	uxth	r3, r3
 8006248:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006250:	833b      	strh	r3, [r7, #24]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	8b3b      	ldrh	r3, [r7, #24]
 800625e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006262:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800626e:	b29b      	uxth	r3, r3
 8006270:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4413      	add	r3, r2
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006288:	82fb      	strh	r3, [r7, #22]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	441a      	add	r2, r3
 8006294:	8afb      	ldrh	r3, [r7, #22]
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800629e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062c0:	82bb      	strh	r3, [r7, #20]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8abb      	ldrh	r3, [r7, #20]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
 80062e2:	e0a3      	b.n	800642c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80062f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80062f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01b      	beq.n	8006334 <USB_DeactivateEndpoint+0x2d4>
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006328:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800632c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006342:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <USB_DeactivateEndpoint+0x324>
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	441a      	add	r2, r3
 800636e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006370:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006374:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800637c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006380:	b29b      	uxth	r3, r3
 8006382:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4413      	add	r3, r2
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800639a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	441a      	add	r2, r3
 80063a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80063a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800640a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	441a      	add	r2, r3
 8006416:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006418:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800641c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006420:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006428:	b29b      	uxth	r3, r3
 800642a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3734      	adds	r7, #52	@ 0x34
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b0c2      	sub	sp, #264	@ 0x108
 800643c:	af00      	add	r7, sp, #0
 800643e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006446:	6018      	str	r0, [r3, #0]
 8006448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006450:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	2b01      	cmp	r3, #1
 8006460:	f040 86b7 	bne.w	80071d2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	429a      	cmp	r2, r3
 800647e:	d908      	bls.n	8006492 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006490:	e007      	b.n	80064a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006492:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006496:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80064a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	7b1b      	ldrb	r3, [r3, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d13a      	bne.n	8006528 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6959      	ldr	r1, [r3, #20]
 80064be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	88da      	ldrh	r2, [r3, #6]
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80064d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80064d8:	6800      	ldr	r0, [r0, #0]
 80064da:	f001 fc9c 	bl	8007e16 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4413      	add	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	011a      	lsls	r2, r3, #4
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4413      	add	r3, r2
 8006514:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	f000 be1f 	b.w	8007166 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	78db      	ldrb	r3, [r3, #3]
 8006534:	2b02      	cmp	r3, #2
 8006536:	f040 8462 	bne.w	8006dfe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800653a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800653e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800654a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	429a      	cmp	r2, r3
 8006554:	f240 83df 	bls.w	8006d16 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	441a      	add	r2, r3
 800659c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80065ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80065b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	6a1a      	ldr	r2, [r3, #32]
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80065d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 81c7 	beq.w	8006988 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	633b      	str	r3, [r7, #48]	@ 0x30
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d177      	bne.n	8006706 <USB_EPStartXfer+0x2ce>
 8006616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006626:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006630:	b29b      	uxth	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	4413      	add	r3, r2
 8006638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800663a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	011a      	lsls	r2, r3, #4
 8006648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664a:	4413      	add	r3, r2
 800664c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006650:	627b      	str	r3, [r7, #36]	@ 0x24
 8006652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800665c:	b29a      	uxth	r2, r3
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006666:	2b3e      	cmp	r3, #62	@ 0x3e
 8006668:	d921      	bls.n	80066ae <USB_EPStartXfer+0x276>
 800666a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2b00      	cmp	r3, #0
 800667e:	d104      	bne.n	800668a <USB_EPStartXfer+0x252>
 8006680:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006684:	3b01      	subs	r3, #1
 8006686:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	b29a      	uxth	r2, r3
 8006690:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006694:	b29b      	uxth	r3, r3
 8006696:	029b      	lsls	r3, r3, #10
 8006698:	b29b      	uxth	r3, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e050      	b.n	8006750 <USB_EPStartXfer+0x318>
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10a      	bne.n	80066cc <USB_EPStartXfer+0x294>
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	801a      	strh	r2, [r3, #0]
 80066ca:	e041      	b.n	8006750 <USB_EPStartXfer+0x318>
 80066cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <USB_EPStartXfer+0x2b4>
 80066e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80066e6:	3301      	adds	r3, #1
 80066e8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b29a      	uxth	r2, r3
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	e024      	b.n	8006750 <USB_EPStartXfer+0x318>
 8006706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d11c      	bne.n	8006750 <USB_EPStartXfer+0x318>
 8006716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	4413      	add	r3, r2
 800672c:	633b      	str	r3, [r7, #48]	@ 0x30
 800672e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	011a      	lsls	r2, r3, #4
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	4413      	add	r3, r2
 8006740:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674a:	b29a      	uxth	r2, r3
 800674c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	895b      	ldrh	r3, [r3, #10]
 800675c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6959      	ldr	r1, [r3, #20]
 800676c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006770:	b29b      	uxth	r3, r3
 8006772:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006776:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800677a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800677e:	6800      	ldr	r0, [r0, #0]
 8006780:	f001 fb49 	bl	8007e16 <USB_WritePMA>
            ep->xfer_buff += len;
 8006784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695a      	ldr	r2, [r3, #20]
 8006790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006794:	441a      	add	r2, r3
 8006796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80067a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d90f      	bls.n	80067de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80067be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a1a      	ldr	r2, [r3, #32]
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	621a      	str	r2, [r3, #32]
 80067dc:	e00e      	b.n	80067fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80067de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2200      	movs	r2, #0
 80067fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	785b      	ldrb	r3, [r3, #1]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d177      	bne.n	80068fc <USB_EPStartXfer+0x4c4>
 800680c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006826:	b29b      	uxth	r3, r3
 8006828:	461a      	mov	r2, r3
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	4413      	add	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	011a      	lsls	r2, r3, #4
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	4413      	add	r3, r2
 8006842:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006852:	b29a      	uxth	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	2b3e      	cmp	r3, #62	@ 0x3e
 800685e:	d921      	bls.n	80068a4 <USB_EPStartXfer+0x46c>
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	f003 031f 	and.w	r3, r3, #31
 8006872:	2b00      	cmp	r3, #0
 8006874:	d104      	bne.n	8006880 <USB_EPStartXfer+0x448>
 8006876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800687a:	3b01      	subs	r3, #1
 800687c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29a      	uxth	r2, r3
 8006886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800688a:	b29b      	uxth	r3, r3
 800688c:	029b      	lsls	r3, r3, #10
 800688e:	b29b      	uxth	r3, r3
 8006890:	4313      	orrs	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e056      	b.n	8006952 <USB_EPStartXfer+0x51a>
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <USB_EPStartXfer+0x48a>
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e047      	b.n	8006952 <USB_EPStartXfer+0x51a>
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d004      	beq.n	80068e2 <USB_EPStartXfer+0x4aa>
 80068d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068dc:	3301      	adds	r3, #1
 80068de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	029b      	lsls	r3, r3, #10
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	801a      	strh	r2, [r3, #0]
 80068fa:	e02a      	b.n	8006952 <USB_EPStartXfer+0x51a>
 80068fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d122      	bne.n	8006952 <USB_EPStartXfer+0x51a>
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	623b      	str	r3, [r7, #32]
 8006918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800691c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006926:	b29b      	uxth	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	4413      	add	r3, r2
 800692e:	623b      	str	r3, [r7, #32]
 8006930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	011a      	lsls	r2, r3, #4
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	4413      	add	r3, r2
 8006942:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694c:	b29a      	uxth	r2, r3
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	891b      	ldrh	r3, [r3, #8]
 800695e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6959      	ldr	r1, [r3, #20]
 800696e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006972:	b29b      	uxth	r3, r3
 8006974:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006978:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800697c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006980:	6800      	ldr	r0, [r0, #0]
 8006982:	f001 fa48 	bl	8007e16 <USB_WritePMA>
 8006986:	e3ee      	b.n	8007166 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d177      	bne.n	8006a88 <USB_EPStartXfer+0x650>
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069b8:	4413      	add	r3, r2
 80069ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	011a      	lsls	r2, r3, #4
 80069ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069cc:	4413      	add	r3, r2
 80069ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80069d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069de:	b29a      	uxth	r2, r3
 80069e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069e2:	801a      	strh	r2, [r3, #0]
 80069e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80069ea:	d921      	bls.n	8006a30 <USB_EPStartXfer+0x5f8>
 80069ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069fa:	f003 031f 	and.w	r3, r3, #31
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d104      	bne.n	8006a0c <USB_EPStartXfer+0x5d4>
 8006a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a06:	3b01      	subs	r3, #1
 8006a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	029b      	lsls	r3, r3, #10
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	e056      	b.n	8006ade <USB_EPStartXfer+0x6a6>
 8006a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <USB_EPStartXfer+0x616>
 8006a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e047      	b.n	8006ade <USB_EPStartXfer+0x6a6>
 8006a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a52:	085b      	lsrs	r3, r3, #1
 8006a54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <USB_EPStartXfer+0x636>
 8006a64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a68:	3301      	adds	r3, #1
 8006a6a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a84:	801a      	strh	r2, [r3, #0]
 8006a86:	e02a      	b.n	8006ade <USB_EPStartXfer+0x6a6>
 8006a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d122      	bne.n	8006ade <USB_EPStartXfer+0x6a6>
 8006a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab8:	4413      	add	r3, r2
 8006aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	011a      	lsls	r2, r3, #4
 8006aca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006adc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	891b      	ldrh	r3, [r3, #8]
 8006aea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6959      	ldr	r1, [r3, #20]
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f001 f982 	bl	8007e16 <USB_WritePMA>
            ep->xfer_buff += len;
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b22:	441a      	add	r2, r3
 8006b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6a1a      	ldr	r2, [r3, #32]
 8006b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d90f      	bls.n	8006b6c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5c:	1ad2      	subs	r2, r2, r3
 8006b5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	621a      	str	r2, [r3, #32]
 8006b6a:	e00e      	b.n	8006b8a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2200      	movs	r2, #0
 8006b88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d177      	bne.n	8006c96 <USB_EPStartXfer+0x85e>
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	4413      	add	r3, r2
 8006bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	011a      	lsls	r2, r3, #4
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	4413      	add	r3, r2
 8006bdc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf0:	801a      	strh	r2, [r3, #0]
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bf8:	d921      	bls.n	8006c3e <USB_EPStartXfer+0x806>
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfe:	095b      	lsrs	r3, r3, #5
 8006c00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <USB_EPStartXfer+0x7e2>
 8006c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c14:	3b01      	subs	r3, #1
 8006c16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	029b      	lsls	r3, r3, #10
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3a:	801a      	strh	r2, [r3, #0]
 8006c3c:	e050      	b.n	8006ce0 <USB_EPStartXfer+0x8a8>
 8006c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <USB_EPStartXfer+0x824>
 8006c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	e041      	b.n	8006ce0 <USB_EPStartXfer+0x8a8>
 8006c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c60:	085b      	lsrs	r3, r3, #1
 8006c62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <USB_EPStartXfer+0x844>
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	3301      	adds	r3, #1
 8006c78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	029b      	lsls	r3, r3, #10
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	e024      	b.n	8006ce0 <USB_EPStartXfer+0x8a8>
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d11c      	bne.n	8006ce0 <USB_EPStartXfer+0x8a8>
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cba:	4413      	add	r3, r2
 8006cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	011a      	lsls	r2, r3, #4
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cce:	4413      	add	r3, r2
 8006cd0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cde:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	895b      	ldrh	r3, [r3, #10]
 8006cec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6959      	ldr	r1, [r3, #20]
 8006cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d0e:	6800      	ldr	r0, [r0, #0]
 8006d10:	f001 f881 	bl	8007e16 <USB_WritePMA>
 8006d14:	e227      	b.n	8007166 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	441a      	add	r2, r3
 8006d6a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da2:	4413      	add	r3, r2
 8006da4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006daa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	011a      	lsls	r2, r3, #4
 8006db4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006db6:	4413      	add	r3, r2
 8006db8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	891b      	ldrh	r3, [r3, #8]
 8006dd4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6959      	ldr	r1, [r3, #20]
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006dee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006df2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	f001 f80d 	bl	8007e16 <USB_WritePMA>
 8006dfc:	e1b3      	b.n	8007166 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006dfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6a1a      	ldr	r2, [r3, #32]
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80c6 	beq.w	8006fd0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d177      	bne.n	8006f50 <USB_EPStartXfer+0xb18>
 8006e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e80:	4413      	add	r3, r2
 8006e82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	011a      	lsls	r2, r3, #4
 8006e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e94:	4413      	add	r3, r2
 8006e96:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006eb2:	d921      	bls.n	8006ef8 <USB_EPStartXfer+0xac0>
 8006eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <USB_EPStartXfer+0xa9c>
 8006eca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ed6:	881b      	ldrh	r3, [r3, #0]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	029b      	lsls	r3, r3, #10
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	e050      	b.n	8006f9a <USB_EPStartXfer+0xb62>
 8006ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <USB_EPStartXfer+0xade>
 8006f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f12:	801a      	strh	r2, [r3, #0]
 8006f14:	e041      	b.n	8006f9a <USB_EPStartXfer+0xb62>
 8006f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <USB_EPStartXfer+0xafe>
 8006f2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006f30:	3301      	adds	r3, #1
 8006f32:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006f36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	029b      	lsls	r3, r3, #10
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	4313      	orrs	r3, r2
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	e024      	b.n	8006f9a <USB_EPStartXfer+0xb62>
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	785b      	ldrb	r3, [r3, #1]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d11c      	bne.n	8006f9a <USB_EPStartXfer+0xb62>
 8006f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f74:	4413      	add	r3, r2
 8006f76:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	011a      	lsls	r2, r3, #4
 8006f86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f88:	4413      	add	r3, r2
 8006f8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	895b      	ldrh	r3, [r3, #10]
 8006fa6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006faa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6959      	ldr	r1, [r3, #20]
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006fc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fc8:	6800      	ldr	r0, [r0, #0]
 8006fca:	f000 ff24 	bl	8007e16 <USB_WritePMA>
 8006fce:	e0ca      	b.n	8007166 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d177      	bne.n	80070d0 <USB_EPStartXfer+0xc98>
 8006fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006fec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007000:	4413      	add	r3, r2
 8007002:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	011a      	lsls	r2, r3, #4
 8007012:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007014:	4413      	add	r3, r2
 8007016:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800701a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800701c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007026:	b29a      	uxth	r2, r3
 8007028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	2b3e      	cmp	r3, #62	@ 0x3e
 8007032:	d921      	bls.n	8007078 <USB_EPStartXfer+0xc40>
 8007034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007038:	095b      	lsrs	r3, r3, #5
 800703a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <USB_EPStartXfer+0xc1c>
 800704a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800704e:	3b01      	subs	r3, #1
 8007050:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29b      	uxth	r3, r3
 8007064:	4313      	orrs	r3, r2
 8007066:	b29b      	uxth	r3, r3
 8007068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800706c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007070:	b29a      	uxth	r2, r3
 8007072:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007074:	801a      	strh	r2, [r3, #0]
 8007076:	e05c      	b.n	8007132 <USB_EPStartXfer+0xcfa>
 8007078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10a      	bne.n	8007096 <USB_EPStartXfer+0xc5e>
 8007080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	b29b      	uxth	r3, r3
 8007086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708e:	b29a      	uxth	r2, r3
 8007090:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e04d      	b.n	8007132 <USB_EPStartXfer+0xcfa>
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	085b      	lsrs	r3, r3, #1
 800709c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <USB_EPStartXfer+0xc7e>
 80070ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80070b0:	3301      	adds	r3, #1
 80070b2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80070b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	029b      	lsls	r3, r3, #10
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	4313      	orrs	r3, r2
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	e030      	b.n	8007132 <USB_EPStartXfer+0xcfa>
 80070d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	785b      	ldrb	r3, [r3, #1]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d128      	bne.n	8007132 <USB_EPStartXfer+0xcfa>
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007104:	4413      	add	r3, r2
 8007106:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	011a      	lsls	r2, r3, #4
 8007118:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800711c:	4413      	add	r3, r2
 800711e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007122:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007130:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	891b      	ldrh	r3, [r3, #8]
 800713e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	6959      	ldr	r1, [r3, #20]
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	b29b      	uxth	r3, r3
 8007154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007158:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800715c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007160:	6800      	ldr	r0, [r0, #0]
 8007162:	f000 fe58 	bl	8007e16 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718c:	817b      	strh	r3, [r7, #10]
 800718e:	897b      	ldrh	r3, [r7, #10]
 8007190:	f083 0310 	eor.w	r3, r3, #16
 8007194:	817b      	strh	r3, [r7, #10]
 8007196:	897b      	ldrh	r3, [r7, #10]
 8007198:	f083 0320 	eor.w	r3, r3, #32
 800719c:	817b      	strh	r3, [r7, #10]
 800719e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	441a      	add	r2, r3
 80071b8:	897b      	ldrh	r3, [r7, #10]
 80071ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	8013      	strh	r3, [r2, #0]
 80071ce:	f000 bcde 	b.w	8007b8e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80071d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	7b1b      	ldrb	r3, [r3, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f040 80bb 	bne.w	800735a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80071e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d917      	bls.n	8007230 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	699a      	ldr	r2, [r3, #24]
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	1ad2      	subs	r2, r2, r3
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	619a      	str	r2, [r3, #24]
 800722e:	e00e      	b.n	800724e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2200      	movs	r2, #0
 800724c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800724e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800725c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007272:	4413      	add	r3, r2
 8007274:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	011a      	lsls	r2, r3, #4
 8007286:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800728a:	4413      	add	r3, r2
 800728c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ae:	d924      	bls.n	80072fa <USB_EPStartXfer+0xec2>
 80072b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b4:	095b      	lsrs	r3, r3, #5
 80072b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072be:	f003 031f 	and.w	r3, r3, #31
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <USB_EPStartXfer+0xe98>
 80072c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80072ca:	3b01      	subs	r3, #1
 80072cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80072dc:	b29b      	uxth	r3, r3
 80072de:	029b      	lsls	r3, r3, #10
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4313      	orrs	r3, r2
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072f4:	801a      	strh	r2, [r3, #0]
 80072f6:	f000 bc10 	b.w	8007b1a <USB_EPStartXfer+0x16e2>
 80072fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <USB_EPStartXfer+0xee4>
 8007302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	b29b      	uxth	r3, r3
 800730a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007312:	b29a      	uxth	r2, r3
 8007314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007318:	801a      	strh	r2, [r3, #0]
 800731a:	e3fe      	b.n	8007b1a <USB_EPStartXfer+0x16e2>
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <USB_EPStartXfer+0xf04>
 8007332:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007336:	3301      	adds	r3, #1
 8007338:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800733c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	b29a      	uxth	r2, r3
 8007344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007348:	b29b      	uxth	r3, r3
 800734a:	029b      	lsls	r3, r3, #10
 800734c:	b29b      	uxth	r3, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e3df      	b.n	8007b1a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	78db      	ldrb	r3, [r3, #3]
 8007366:	2b02      	cmp	r3, #2
 8007368:	f040 8218 	bne.w	800779c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 809d 	bne.w	80074b8 <USB_EPStartXfer+0x1080>
 800737e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800738c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073a2:	4413      	add	r3, r2
 80073a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	011a      	lsls	r2, r3, #4
 80073b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ba:	4413      	add	r3, r2
 80073bc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80073e6:	d92b      	bls.n	8007440 <USB_EPStartXfer+0x1008>
 80073e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	095b      	lsrs	r3, r3, #5
 80073f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <USB_EPStartXfer+0xfe0>
 800740e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007412:	3b01      	subs	r3, #1
 8007414:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29a      	uxth	r2, r3
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007424:	b29b      	uxth	r3, r3
 8007426:	029b      	lsls	r3, r3, #10
 8007428:	b29b      	uxth	r3, r3
 800742a:	4313      	orrs	r3, r2
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29a      	uxth	r2, r3
 8007438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800743c:	801a      	strh	r2, [r3, #0]
 800743e:	e070      	b.n	8007522 <USB_EPStartXfer+0x10ea>
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10c      	bne.n	800746a <USB_EPStartXfer+0x1032>
 8007450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800745c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007460:	b29a      	uxth	r2, r3
 8007462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007466:	801a      	strh	r2, [r3, #0]
 8007468:	e05b      	b.n	8007522 <USB_EPStartXfer+0x10ea>
 800746a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800746e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	085b      	lsrs	r3, r3, #1
 8007478:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800747c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <USB_EPStartXfer+0x1062>
 8007490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007494:	3301      	adds	r3, #1
 8007496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800749a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	029b      	lsls	r3, r3, #10
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	4313      	orrs	r3, r2
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	e034      	b.n	8007522 <USB_EPStartXfer+0x10ea>
 80074b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d12c      	bne.n	8007522 <USB_EPStartXfer+0x10ea>
 80074c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074ec:	4413      	add	r3, r2
 80074ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	011a      	lsls	r2, r3, #4
 8007500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007504:	4413      	add	r3, r2
 8007506:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800750a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800750e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	b29a      	uxth	r2, r3
 800751c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007520:	801a      	strh	r2, [r3, #0]
 8007522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007526:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 809d 	bne.w	800767c <USB_EPStartXfer+0x1244>
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800755e:	b29b      	uxth	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007566:	4413      	add	r3, r2
 8007568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	011a      	lsls	r2, r3, #4
 800757a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800757e:	4413      	add	r3, r2
 8007580:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007588:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007594:	b29a      	uxth	r2, r3
 8007596:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80075aa:	d92b      	bls.n	8007604 <USB_EPStartXfer+0x11cc>
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	095b      	lsrs	r3, r3, #5
 80075ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <USB_EPStartXfer+0x11a4>
 80075d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d6:	3b01      	subs	r3, #1
 80075d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	029b      	lsls	r3, r3, #10
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	e069      	b.n	80076d8 <USB_EPStartXfer+0x12a0>
 8007604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10c      	bne.n	800762e <USB_EPStartXfer+0x11f6>
 8007614:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007624:	b29a      	uxth	r2, r3
 8007626:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800762a:	801a      	strh	r2, [r3, #0]
 800762c:	e054      	b.n	80076d8 <USB_EPStartXfer+0x12a0>
 800762e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	085b      	lsrs	r3, r3, #1
 800763c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d004      	beq.n	800765e <USB_EPStartXfer+0x1226>
 8007654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007658:	3301      	adds	r3, #1
 800765a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800765e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	b29a      	uxth	r2, r3
 8007666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800766a:	b29b      	uxth	r3, r3
 800766c:	029b      	lsls	r3, r3, #10
 800766e:	b29b      	uxth	r3, r3
 8007670:	4313      	orrs	r3, r2
 8007672:	b29a      	uxth	r2, r3
 8007674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e02d      	b.n	80076d8 <USB_EPStartXfer+0x12a0>
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d125      	bne.n	80076d8 <USB_EPStartXfer+0x12a0>
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800769a:	b29b      	uxth	r3, r3
 800769c:	461a      	mov	r2, r3
 800769e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076a2:	4413      	add	r3, r2
 80076a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	011a      	lsls	r2, r3, #4
 80076b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80076ba:	4413      	add	r3, r2
 80076bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80076c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80076d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8218 	beq.w	8007b1a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800770a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800770e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <USB_EPStartXfer+0x12ea>
 8007716:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800771a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10d      	bne.n	800773e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007722:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 81f5 	bne.w	8007b1a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007730:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	f040 81ee 	bne.w	8007b1a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800773e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007742:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007764:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	441a      	add	r2, r3
 8007782:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800778a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800778e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007792:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007796:	b29b      	uxth	r3, r3
 8007798:	8013      	strh	r3, [r2, #0]
 800779a:	e1be      	b.n	8007b1a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800779c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	78db      	ldrb	r3, [r3, #3]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 81b4 	bne.w	8007b16 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80077ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d917      	bls.n	80077fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80077ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80077da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	619a      	str	r2, [r3, #24]
 80077f8:	e00e      	b.n	8007818 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80077fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800780a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2200      	movs	r2, #0
 8007816:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f040 8085 	bne.w	8007934 <USB_EPStartXfer+0x14fc>
 800782a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007846:	b29b      	uxth	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800784e:	4413      	add	r3, r2
 8007850:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	011a      	lsls	r2, r3, #4
 8007862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007866:	4413      	add	r3, r2
 8007868:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800786c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800787c:	b29a      	uxth	r2, r3
 800787e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007882:	801a      	strh	r2, [r3, #0]
 8007884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007888:	2b3e      	cmp	r3, #62	@ 0x3e
 800788a:	d923      	bls.n	80078d4 <USB_EPStartXfer+0x149c>
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d104      	bne.n	80078ac <USB_EPStartXfer+0x1474>
 80078a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078a6:	3b01      	subs	r3, #1
 80078a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80078ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	029b      	lsls	r3, r3, #10
 80078bc:	b29b      	uxth	r3, r3
 80078be:	4313      	orrs	r3, r2
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078d0:	801a      	strh	r2, [r3, #0]
 80078d2:	e060      	b.n	8007996 <USB_EPStartXfer+0x155e>
 80078d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10c      	bne.n	80078f6 <USB_EPStartXfer+0x14be>
 80078dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e04f      	b.n	8007996 <USB_EPStartXfer+0x155e>
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <USB_EPStartXfer+0x14de>
 800790c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007910:	3301      	adds	r3, #1
 8007912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007916:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29a      	uxth	r2, r3
 800791e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007922:	b29b      	uxth	r3, r3
 8007924:	029b      	lsls	r3, r3, #10
 8007926:	b29b      	uxth	r3, r3
 8007928:	4313      	orrs	r3, r2
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	e030      	b.n	8007996 <USB_EPStartXfer+0x155e>
 8007934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d128      	bne.n	8007996 <USB_EPStartXfer+0x155e>
 8007944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007960:	b29b      	uxth	r3, r3
 8007962:	461a      	mov	r2, r3
 8007964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007968:	4413      	add	r3, r2
 800796a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800796e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	011a      	lsls	r2, r3, #4
 800797c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007980:	4413      	add	r3, r2
 8007982:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007986:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	b29a      	uxth	r2, r3
 8007990:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007994:	801a      	strh	r2, [r3, #0]
 8007996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f040 8085 	bne.w	8007ac0 <USB_EPStartXfer+0x1688>
 80079b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80079da:	4413      	add	r3, r2
 80079dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	011a      	lsls	r2, r3, #4
 80079ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80079f2:	4413      	add	r3, r2
 80079f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a16:	d923      	bls.n	8007a60 <USB_EPStartXfer+0x1628>
 8007a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a1c:	095b      	lsrs	r3, r3, #5
 8007a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a26:	f003 031f 	and.w	r3, r3, #31
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <USB_EPStartXfer+0x1600>
 8007a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a32:	3b01      	subs	r3, #1
 8007a34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	029b      	lsls	r3, r3, #10
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	e05c      	b.n	8007b1a <USB_EPStartXfer+0x16e2>
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <USB_EPStartXfer+0x164a>
 8007a68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	e04b      	b.n	8007b1a <USB_EPStartXfer+0x16e2>
 8007a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a86:	085b      	lsrs	r3, r3, #1
 8007a88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <USB_EPStartXfer+0x166a>
 8007a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007aa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	029b      	lsls	r3, r3, #10
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007abc:	801a      	strh	r2, [r3, #0]
 8007abe:	e02c      	b.n	8007b1a <USB_EPStartXfer+0x16e2>
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d124      	bne.n	8007b1a <USB_EPStartXfer+0x16e2>
 8007ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	011a      	lsls	r2, r3, #4
 8007afa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b12:	801a      	strh	r2, [r3, #0]
 8007b14:	e001      	b.n	8007b1a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e03a      	b.n	8007b90 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007b58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	441a      	add	r2, r3
 8007b76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d020      	beq.n	8007bee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bc2:	81bb      	strh	r3, [r7, #12]
 8007bc4:	89bb      	ldrh	r3, [r7, #12]
 8007bc6:	f083 0310 	eor.w	r3, r3, #16
 8007bca:	81bb      	strh	r3, [r7, #12]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	441a      	add	r2, r3
 8007bd6:	89bb      	ldrh	r3, [r7, #12]
 8007bd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007be0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	8013      	strh	r3, [r2, #0]
 8007bec:	e01f      	b.n	8007c2e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c04:	81fb      	strh	r3, [r7, #14]
 8007c06:	89fb      	ldrh	r3, [r7, #14]
 8007c08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c0c:	81fb      	strh	r3, [r7, #14]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	89fb      	ldrh	r3, [r7, #14]
 8007c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr

08007c3a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b087      	sub	sp, #28
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	7b1b      	ldrb	r3, [r3, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f040 809d 	bne.w	8007d88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d04c      	beq.n	8007cf0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	823b      	strh	r3, [r7, #16]
 8007c64:	8a3b      	ldrh	r3, [r7, #16]
 8007c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01b      	beq.n	8007ca6 <USB_EPClearStall+0x6c>
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c84:	81fb      	strh	r3, [r7, #14]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	441a      	add	r2, r3
 8007c90:	89fb      	ldrh	r3, [r7, #14]
 8007c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	78db      	ldrb	r3, [r3, #3]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d06c      	beq.n	8007d88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4413      	add	r3, r2
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cc4:	81bb      	strh	r3, [r7, #12]
 8007cc6:	89bb      	ldrh	r3, [r7, #12]
 8007cc8:	f083 0320 	eor.w	r3, r3, #32
 8007ccc:	81bb      	strh	r3, [r7, #12]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	441a      	add	r2, r3
 8007cd8:	89bb      	ldrh	r3, [r7, #12]
 8007cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	8013      	strh	r3, [r2, #0]
 8007cee:	e04b      	b.n	8007d88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	82fb      	strh	r3, [r7, #22]
 8007cfe:	8afb      	ldrh	r3, [r7, #22]
 8007d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01b      	beq.n	8007d40 <USB_EPClearStall+0x106>
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d1e:	82bb      	strh	r3, [r7, #20]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	441a      	add	r2, r3
 8007d2a:	8abb      	ldrh	r3, [r7, #20]
 8007d2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d56:	827b      	strh	r3, [r7, #18]
 8007d58:	8a7b      	ldrh	r3, [r7, #18]
 8007d5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d5e:	827b      	strh	r3, [r7, #18]
 8007d60:	8a7b      	ldrh	r3, [r7, #18]
 8007d62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d66:	827b      	strh	r3, [r7, #18]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	441a      	add	r2, r3
 8007d72:	8a7b      	ldrh	r3, [r7, #18]
 8007d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d103      	bne.n	8007dae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2280      	movs	r2, #128	@ 0x80
 8007daa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bc80      	pop	{r7}
 8007db8:	4770      	bx	lr

08007dba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr

08007dce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007df4:	68fb      	ldr	r3, [r7, #12]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bc80      	pop	{r7}
 8007dfe:	4770      	bx	lr

08007e00 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr

08007e16 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b08b      	sub	sp, #44	@ 0x2c
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	4611      	mov	r1, r2
 8007e22:	461a      	mov	r2, r3
 8007e24:	460b      	mov	r3, r1
 8007e26:	80fb      	strh	r3, [r7, #6]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e2c:	88bb      	ldrh	r3, [r7, #4]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e3c:	88fb      	ldrh	r3, [r7, #6]
 8007e3e:	005a      	lsls	r2, r3, #1
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e48:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e4e:	e01e      	b.n	8007e8e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	b21a      	sxth	r2, r3
 8007e60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b21b      	sxth	r3, r3
 8007e68:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	8a7a      	ldrh	r2, [r7, #18]
 8007e6e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	3302      	adds	r3, #2
 8007e74:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	3302      	adds	r3, #2
 8007e7a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	3301      	adds	r3, #1
 8007e86:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1dd      	bne.n	8007e50 <USB_WritePMA+0x3a>
  }
}
 8007e94:	bf00      	nop
 8007e96:	bf00      	nop
 8007e98:	372c      	adds	r7, #44	@ 0x2c
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bc80      	pop	{r7}
 8007e9e:	4770      	bx	lr

08007ea0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b08b      	sub	sp, #44	@ 0x2c
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4611      	mov	r1, r2
 8007eac:	461a      	mov	r2, r3
 8007eae:	460b      	mov	r3, r1
 8007eb0:	80fb      	strh	r3, [r7, #6]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007eb6:	88bb      	ldrh	r3, [r7, #4]
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	005a      	lsls	r2, r3, #1
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ed2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed8:	e01b      	b.n	8007f12 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	0a1b      	lsrs	r3, r3, #8
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	3301      	adds	r3, #1
 8007f04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007f06:	6a3b      	ldr	r3, [r7, #32]
 8007f08:	3302      	adds	r3, #2
 8007f0a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e0      	bne.n	8007eda <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f18:	88bb      	ldrh	r3, [r7, #4]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d007      	beq.n	8007f34 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	701a      	strb	r2, [r3, #0]
  }
}
 8007f34:	bf00      	nop
 8007f36:	372c      	adds	r7, #44	@ 0x2c
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bc80      	pop	{r7}
 8007f3c:	4770      	bx	lr

08007f3e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	460b      	mov	r3, r1
 8007f48:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	7c1b      	ldrb	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d115      	bne.n	8007f82 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	2181      	movs	r1, #129	@ 0x81
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f001 fe87 	bl	8009c72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f6e:	2202      	movs	r2, #2
 8007f70:	2101      	movs	r1, #1
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fe7d 	bl	8009c72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007f80:	e012      	b.n	8007fa8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f82:	2340      	movs	r3, #64	@ 0x40
 8007f84:	2202      	movs	r2, #2
 8007f86:	2181      	movs	r1, #129	@ 0x81
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fe72 	bl	8009c72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f94:	2340      	movs	r3, #64	@ 0x40
 8007f96:	2202      	movs	r2, #2
 8007f98:	2101      	movs	r1, #1
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fe69 	bl	8009c72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fa8:	2308      	movs	r3, #8
 8007faa:	2203      	movs	r2, #3
 8007fac:	2182      	movs	r1, #130	@ 0x82
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fe5f 	bl	8009c72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fba:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007fbe:	f001 ff7f 	bl	8009ec0 <USBD_static_malloc>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73fb      	strb	r3, [r7, #15]
 8007fd8:	e026      	b.n	8008028 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7c1b      	ldrb	r3, [r3, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d109      	bne.n	8008018 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800800a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800800e:	2101      	movs	r1, #1
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 ff1e 	bl	8009e52 <USBD_LL_PrepareReceive>
 8008016:	e007      	b.n	8008028 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800801e:	2340      	movs	r3, #64	@ 0x40
 8008020:	2101      	movs	r1, #1
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 ff15 	bl	8009e52 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	460b      	mov	r3, r1
 800803c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008042:	2181      	movs	r1, #129	@ 0x81
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fe3a 	bl	8009cbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008050:	2101      	movs	r1, #1
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 fe33 	bl	8009cbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008060:	2182      	movs	r1, #130	@ 0x82
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fe2b 	bl	8009cbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00e      	beq.n	8008096 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008088:	4618      	mov	r0, r3
 800808a:	f001 ff25 	bl	8009ed8 <USBD_static_free>
    pdev->pClassData = NULL;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d039      	beq.n	800813e <USBD_CDC_Setup+0x9e>
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	d17f      	bne.n	80081ce <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	88db      	ldrh	r3, [r3, #6]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d029      	beq.n	800812a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b25b      	sxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	da11      	bge.n	8008104 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80080ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	88d2      	ldrh	r2, [r2, #6]
 80080f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080f4:	6939      	ldr	r1, [r7, #16]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	88db      	ldrh	r3, [r3, #6]
 80080fa:	461a      	mov	r2, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fa05 	bl	800950c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008102:	e06b      	b.n	80081dc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	785a      	ldrb	r2, [r3, #1]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800811a:	6939      	ldr	r1, [r7, #16]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	88db      	ldrh	r3, [r3, #6]
 8008120:	461a      	mov	r2, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fa20 	bl	8009568 <USBD_CtlPrepareRx>
      break;
 8008128:	e058      	b.n	80081dc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	7850      	ldrb	r0, [r2, #1]
 8008136:	2200      	movs	r2, #0
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	4798      	blx	r3
      break;
 800813c:	e04e      	b.n	80081dc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	785b      	ldrb	r3, [r3, #1]
 8008142:	2b0b      	cmp	r3, #11
 8008144:	d02e      	beq.n	80081a4 <USBD_CDC_Setup+0x104>
 8008146:	2b0b      	cmp	r3, #11
 8008148:	dc38      	bgt.n	80081bc <USBD_CDC_Setup+0x11c>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <USBD_CDC_Setup+0xb4>
 800814e:	2b0a      	cmp	r3, #10
 8008150:	d014      	beq.n	800817c <USBD_CDC_Setup+0xdc>
 8008152:	e033      	b.n	80081bc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815a:	2b03      	cmp	r3, #3
 800815c:	d107      	bne.n	800816e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800815e:	f107 030c 	add.w	r3, r7, #12
 8008162:	2202      	movs	r2, #2
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f9d0 	bl	800950c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800816c:	e02e      	b.n	80081cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f961 	bl	8009438 <USBD_CtlError>
            ret = USBD_FAIL;
 8008176:	2302      	movs	r3, #2
 8008178:	75fb      	strb	r3, [r7, #23]
          break;
 800817a:	e027      	b.n	80081cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008182:	2b03      	cmp	r3, #3
 8008184:	d107      	bne.n	8008196 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008186:	f107 030f 	add.w	r3, r7, #15
 800818a:	2201      	movs	r2, #1
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f9bc 	bl	800950c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008194:	e01a      	b.n	80081cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f94d 	bl	8009438 <USBD_CtlError>
            ret = USBD_FAIL;
 800819e:	2302      	movs	r3, #2
 80081a0:	75fb      	strb	r3, [r7, #23]
          break;
 80081a2:	e013      	b.n	80081cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d00d      	beq.n	80081ca <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f941 	bl	8009438 <USBD_CtlError>
            ret = USBD_FAIL;
 80081b6:	2302      	movs	r3, #2
 80081b8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081ba:	e006      	b.n	80081ca <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 f93a 	bl	8009438 <USBD_CtlError>
          ret = USBD_FAIL;
 80081c4:	2302      	movs	r3, #2
 80081c6:	75fb      	strb	r3, [r7, #23]
          break;
 80081c8:	e000      	b.n	80081cc <USBD_CDC_Setup+0x12c>
          break;
 80081ca:	bf00      	nop
      }
      break;
 80081cc:	e006      	b.n	80081dc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 f931 	bl	8009438 <USBD_CtlError>
      ret = USBD_FAIL;
 80081d6:	2302      	movs	r3, #2
 80081d8:	75fb      	strb	r3, [r7, #23]
      break;
 80081da:	bf00      	nop
  }

  return ret;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008200:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d03a      	beq.n	8008282 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	440b      	add	r3, r1
 800821a:	331c      	adds	r3, #28
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d029      	beq.n	8008276 <USBD_CDC_DataIn+0x90>
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	331c      	adds	r3, #28
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	78f9      	ldrb	r1, [r7, #3]
 8008236:	68b8      	ldr	r0, [r7, #8]
 8008238:	460b      	mov	r3, r1
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	4403      	add	r3, r0
 8008242:	3320      	adds	r3, #32
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	fbb2 f1f3 	udiv	r1, r2, r3
 800824a:	fb01 f303 	mul.w	r3, r1, r3
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d110      	bne.n	8008276 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008254:	78fa      	ldrb	r2, [r7, #3]
 8008256:	6879      	ldr	r1, [r7, #4]
 8008258:	4613      	mov	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4413      	add	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	331c      	adds	r3, #28
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008268:	78f9      	ldrb	r1, [r7, #3]
 800826a:	2300      	movs	r3, #0
 800826c:	2200      	movs	r2, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f001 fdcc 	bl	8009e0c <USBD_LL_Transmit>
 8008274:	e003      	b.n	800827e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	e000      	b.n	8008284 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008282:	2302      	movs	r3, #2
  }
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800829e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	4619      	mov	r1, r3
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 fdf7 	bl	8009e98 <USBD_LL_GetRxDataSize>
 80082aa:	4602      	mov	r2, r0
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00d      	beq.n	80082d8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80082d0:	4611      	mov	r1, r2
 80082d2:	4798      	blx	r3

    return USBD_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	e000      	b.n	80082da <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80082d8:	2302      	movs	r3, #2
  }
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d014      	beq.n	8008326 <USBD_CDC_EP0_RxReady+0x44>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008302:	2bff      	cmp	r3, #255	@ 0xff
 8008304:	d00f      	beq.n	8008326 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008314:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800831c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	22ff      	movs	r2, #255	@ 0xff
 8008322:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2243      	movs	r2, #67	@ 0x43
 800833c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800833e:	4b03      	ldr	r3, [pc, #12]	@ (800834c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	bc80      	pop	{r7}
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	2000009c 	.word	0x2000009c

08008350 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2243      	movs	r2, #67	@ 0x43
 800835c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800835e:	4b03      	ldr	r3, [pc, #12]	@ (800836c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	20000058 	.word	0x20000058

08008370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2243      	movs	r2, #67	@ 0x43
 800837c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800837e:	4b03      	ldr	r3, [pc, #12]	@ (800838c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008380:	4618      	mov	r0, r3
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	bc80      	pop	{r7}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	200000e0 	.word	0x200000e0

08008390 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	220a      	movs	r2, #10
 800839c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800839e:	4b03      	ldr	r3, [pc, #12]	@ (80083ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bc80      	pop	{r7}
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	20000014 	.word	0x20000014

080083b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083ba:	2302      	movs	r3, #2
 80083bc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d005      	beq.n	80083d0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	bc80      	pop	{r7}
 800840c:	4770      	bx	lr

0800840e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800841e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr

08008434 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008442:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800844a:	2b00      	cmp	r3, #0
 800844c:	d01c      	beq.n	8008488 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008454:	2b00      	cmp	r3, #0
 8008456:	d115      	bne.n	8008484 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008476:	b29b      	uxth	r3, r3
 8008478:	2181      	movs	r1, #129	@ 0x81
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fcc6 	bl	8009e0c <USBD_LL_Transmit>

      return USBD_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	e002      	b.n	800848a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008488:	2302      	movs	r3, #2
  }
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d017      	beq.n	80084dc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	7c1b      	ldrb	r3, [r3, #16]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d109      	bne.n	80084c8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084be:	2101      	movs	r1, #1
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 fcc6 	bl	8009e52 <USBD_LL_PrepareReceive>
 80084c6:	e007      	b.n	80084d8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084ce:	2340      	movs	r3, #64	@ 0x40
 80084d0:	2101      	movs	r1, #1
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 fcbd 	bl	8009e52 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	e000      	b.n	80084de <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80084dc:	2302      	movs	r3, #2
  }
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	4613      	mov	r3, r2
 80084f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084fa:	2302      	movs	r3, #2
 80084fc:	e01a      	b.n	8008534 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d003      	beq.n	8008510 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	79fa      	ldrb	r2, [r7, #7]
 800852a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f001 fb2b 	bl	8009b88 <USBD_LL_Init>

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	73fb      	strb	r3, [r7, #15]
 800855c:	e001      	b.n	8008562 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800855e:	2302      	movs	r3, #2
 8008560:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fb60 	bl	8009c3c <USBD_LL_Start>

  return USBD_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	bc80      	pop	{r7}
 8008598:	4770      	bx	lr

0800859a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085a6:	2302      	movs	r3, #2
 80085a8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00c      	beq.n	80085ce <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	78fa      	ldrb	r2, [r7, #3]
 80085be:	4611      	mov	r1, r2
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	4611      	mov	r1, r2
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	4798      	blx	r3

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800860e:	6839      	ldr	r1, [r7, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fed8 	bl	80093c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008632:	f003 031f 	and.w	r3, r3, #31
 8008636:	2b02      	cmp	r3, #2
 8008638:	d016      	beq.n	8008668 <USBD_LL_SetupStage+0x6a>
 800863a:	2b02      	cmp	r3, #2
 800863c:	d81c      	bhi.n	8008678 <USBD_LL_SetupStage+0x7a>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <USBD_LL_SetupStage+0x4a>
 8008642:	2b01      	cmp	r3, #1
 8008644:	d008      	beq.n	8008658 <USBD_LL_SetupStage+0x5a>
 8008646:	e017      	b.n	8008678 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f9cb 	bl	80089ec <USBD_StdDevReq>
      break;
 8008656:	e01a      	b.n	800868e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fa2d 	bl	8008ac0 <USBD_StdItfReq>
      break;
 8008666:	e012      	b.n	800868e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fa6d 	bl	8008b50 <USBD_StdEPReq>
      break;
 8008676:	e00a      	b.n	800868e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800867e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008682:	b2db      	uxtb	r3, r3
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 fb38 	bl	8009cfc <USBD_LL_StallEP>
      break;
 800868c:	bf00      	nop
  }

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	460b      	mov	r3, r1
 80086a2:	607a      	str	r2, [r7, #4]
 80086a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086a6:	7afb      	ldrb	r3, [r7, #11]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d14b      	bne.n	8008744 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086b2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d134      	bne.n	8008728 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d919      	bls.n	80086fe <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	1ad2      	subs	r2, r2, r3
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d203      	bcs.n	80086ec <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	e002      	b.n	80086f2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	461a      	mov	r2, r3
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 ff54 	bl	80095a4 <USBD_CtlContinueRx>
 80086fc:	e038      	b.n	8008770 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008710:	2b03      	cmp	r3, #3
 8008712:	d105      	bne.n	8008720 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	68f8      	ldr	r0, [r7, #12]
 800871e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 ff51 	bl	80095c8 <USBD_CtlSendStatus>
 8008726:	e023      	b.n	8008770 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800872e:	2b05      	cmp	r3, #5
 8008730:	d11e      	bne.n	8008770 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800873a:	2100      	movs	r1, #0
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f001 fadd 	bl	8009cfc <USBD_LL_StallEP>
 8008742:	e015      	b.n	8008770 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00d      	beq.n	800876c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008756:	2b03      	cmp	r3, #3
 8008758:	d108      	bne.n	800876c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	7afa      	ldrb	r2, [r7, #11]
 8008764:	4611      	mov	r1, r2
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	4798      	blx	r3
 800876a:	e001      	b.n	8008770 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800876c:	2302      	movs	r3, #2
 800876e:	e000      	b.n	8008772 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	460b      	mov	r3, r1
 8008784:	607a      	str	r2, [r7, #4]
 8008786:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008788:	7afb      	ldrb	r3, [r7, #11]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d17f      	bne.n	800888e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3314      	adds	r3, #20
 8008792:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800879a:	2b02      	cmp	r3, #2
 800879c:	d15c      	bne.n	8008858 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d915      	bls.n	80087d6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	1ad2      	subs	r2, r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	6879      	ldr	r1, [r7, #4]
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 febe 	bl	8009544 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087c8:	2300      	movs	r3, #0
 80087ca:	2200      	movs	r2, #0
 80087cc:	2100      	movs	r1, #0
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	f001 fb3f 	bl	8009e52 <USBD_LL_PrepareReceive>
 80087d4:	e04e      	b.n	8008874 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	6912      	ldr	r2, [r2, #16]
 80087de:	fbb3 f1f2 	udiv	r1, r3, r2
 80087e2:	fb01 f202 	mul.w	r2, r1, r2
 80087e6:	1a9b      	subs	r3, r3, r2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d11c      	bne.n	8008826 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d316      	bcc.n	8008826 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008802:	429a      	cmp	r2, r3
 8008804:	d20f      	bcs.n	8008826 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fe9a 	bl	8009544 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008818:	2300      	movs	r3, #0
 800881a:	2200      	movs	r2, #0
 800881c:	2100      	movs	r1, #0
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f001 fb17 	bl	8009e52 <USBD_LL_PrepareReceive>
 8008824:	e026      	b.n	8008874 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008838:	2b03      	cmp	r3, #3
 800883a:	d105      	bne.n	8008848 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008848:	2180      	movs	r1, #128	@ 0x80
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f001 fa56 	bl	8009cfc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fecc 	bl	80095ee <USBD_CtlReceiveStatus>
 8008856:	e00d      	b.n	8008874 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800885e:	2b04      	cmp	r3, #4
 8008860:	d004      	beq.n	800886c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800886c:	2180      	movs	r1, #128	@ 0x80
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f001 fa44 	bl	8009cfc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800887a:	2b01      	cmp	r3, #1
 800887c:	d11d      	bne.n	80088ba <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7ff fe81 	bl	8008586 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800888c:	e015      	b.n	80088ba <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00d      	beq.n	80088b6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d108      	bne.n	80088b6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	7afa      	ldrb	r2, [r7, #11]
 80088ae:	4611      	mov	r1, r2
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	4798      	blx	r3
 80088b4:	e001      	b.n	80088ba <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088b6:	2302      	movs	r3, #2
 80088b8:	e000      	b.n	80088bc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088cc:	2340      	movs	r3, #64	@ 0x40
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 f9cd 	bl	8009c72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2240      	movs	r2, #64	@ 0x40
 80088e4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088e8:	2340      	movs	r3, #64	@ 0x40
 80088ea:	2200      	movs	r2, #0
 80088ec:	2180      	movs	r1, #128	@ 0x80
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f001 f9bf 	bl	8009c72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2240      	movs	r2, #64	@ 0x40
 80088fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	6852      	ldr	r2, [r2, #4]
 8008934:	b2d2      	uxtb	r2, r2
 8008936:	4611      	mov	r1, r2
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
  }

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	78fa      	ldrb	r2, [r7, #3]
 8008956:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr

08008964 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2204      	movs	r2, #4
 800897c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr

0800898c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800899a:	2b04      	cmp	r3, #4
 800899c:	d105      	bne.n	80089aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr

080089b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b082      	sub	sp, #8
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d10b      	bne.n	80089e0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a02:	2b40      	cmp	r3, #64	@ 0x40
 8008a04:	d005      	beq.n	8008a12 <USBD_StdDevReq+0x26>
 8008a06:	2b40      	cmp	r3, #64	@ 0x40
 8008a08:	d84f      	bhi.n	8008aaa <USBD_StdDevReq+0xbe>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d009      	beq.n	8008a22 <USBD_StdDevReq+0x36>
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d14b      	bne.n	8008aaa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
      break;
 8008a20:	e048      	b.n	8008ab4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b09      	cmp	r3, #9
 8008a28:	d839      	bhi.n	8008a9e <USBD_StdDevReq+0xb2>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <USBD_StdDevReq+0x44>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a81 	.word	0x08008a81
 8008a34:	08008a95 	.word	0x08008a95
 8008a38:	08008a9f 	.word	0x08008a9f
 8008a3c:	08008a8b 	.word	0x08008a8b
 8008a40:	08008a9f 	.word	0x08008a9f
 8008a44:	08008a63 	.word	0x08008a63
 8008a48:	08008a59 	.word	0x08008a59
 8008a4c:	08008a9f 	.word	0x08008a9f
 8008a50:	08008a77 	.word	0x08008a77
 8008a54:	08008a6d 	.word	0x08008a6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f000 f9dc 	bl	8008e18 <USBD_GetDescriptor>
          break;
 8008a60:	e022      	b.n	8008aa8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fb3f 	bl	80090e8 <USBD_SetAddress>
          break;
 8008a6a:	e01d      	b.n	8008aa8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fb7e 	bl	8009170 <USBD_SetConfig>
          break;
 8008a74:	e018      	b.n	8008aa8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fc07 	bl	800928c <USBD_GetConfig>
          break;
 8008a7e:	e013      	b.n	8008aa8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc37 	bl	80092f6 <USBD_GetStatus>
          break;
 8008a88:	e00e      	b.n	8008aa8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fc65 	bl	800935c <USBD_SetFeature>
          break;
 8008a92:	e009      	b.n	8008aa8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fc74 	bl	8009384 <USBD_ClrFeature>
          break;
 8008a9c:	e004      	b.n	8008aa8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fcc9 	bl	8009438 <USBD_CtlError>
          break;
 8008aa6:	bf00      	nop
      }
      break;
 8008aa8:	e004      	b.n	8008ab4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fcc3 	bl	8009438 <USBD_CtlError>
      break;
 8008ab2:	bf00      	nop
  }

  return ret;
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop

08008ac0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ad6:	2b40      	cmp	r3, #64	@ 0x40
 8008ad8:	d005      	beq.n	8008ae6 <USBD_StdItfReq+0x26>
 8008ada:	2b40      	cmp	r3, #64	@ 0x40
 8008adc:	d82e      	bhi.n	8008b3c <USBD_StdItfReq+0x7c>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <USBD_StdItfReq+0x26>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d12a      	bne.n	8008b3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aec:	3b01      	subs	r3, #1
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d81d      	bhi.n	8008b2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	889b      	ldrh	r3, [r3, #4]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d813      	bhi.n	8008b24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88db      	ldrh	r3, [r3, #6]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d110      	bne.n	8008b38 <USBD_StdItfReq+0x78>
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d10d      	bne.n	8008b38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fd53 	bl	80095c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b22:	e009      	b.n	8008b38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fc86 	bl	8009438 <USBD_CtlError>
          break;
 8008b2c:	e004      	b.n	8008b38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc81 	bl	8009438 <USBD_CtlError>
          break;
 8008b36:	e000      	b.n	8008b3a <USBD_StdItfReq+0x7a>
          break;
 8008b38:	bf00      	nop
      }
      break;
 8008b3a:	e004      	b.n	8008b46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fc7a 	bl	8009438 <USBD_CtlError>
      break;
 8008b44:	bf00      	nop
  }

  return USBD_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	889b      	ldrh	r3, [r3, #4]
 8008b62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b6c:	2b40      	cmp	r3, #64	@ 0x40
 8008b6e:	d007      	beq.n	8008b80 <USBD_StdEPReq+0x30>
 8008b70:	2b40      	cmp	r3, #64	@ 0x40
 8008b72:	f200 8146 	bhi.w	8008e02 <USBD_StdEPReq+0x2b2>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <USBD_StdEPReq+0x40>
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	f040 8141 	bne.w	8008e02 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
      break;
 8008b8e:	e13d      	b.n	8008e0c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b98:	2b20      	cmp	r3, #32
 8008b9a:	d10a      	bne.n	8008bb2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	4798      	blx	r3
 8008baa:	4603      	mov	r3, r0
 8008bac:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	e12d      	b.n	8008e0e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d007      	beq.n	8008bca <USBD_StdEPReq+0x7a>
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	f300 811b 	bgt.w	8008df6 <USBD_StdEPReq+0x2a6>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d072      	beq.n	8008caa <USBD_StdEPReq+0x15a>
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d03a      	beq.n	8008c3e <USBD_StdEPReq+0xee>
 8008bc8:	e115      	b.n	8008df6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d002      	beq.n	8008bda <USBD_StdEPReq+0x8a>
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d015      	beq.n	8008c04 <USBD_StdEPReq+0xb4>
 8008bd8:	e02b      	b.n	8008c32 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00c      	beq.n	8008bfa <USBD_StdEPReq+0xaa>
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b80      	cmp	r3, #128	@ 0x80
 8008be4:	d009      	beq.n	8008bfa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 f886 	bl	8009cfc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bf0:	2180      	movs	r1, #128	@ 0x80
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f001 f882 	bl	8009cfc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bf8:	e020      	b.n	8008c3c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fc1b 	bl	8009438 <USBD_CtlError>
              break;
 8008c02:	e01b      	b.n	8008c3c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	885b      	ldrh	r3, [r3, #2]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10e      	bne.n	8008c2a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c0c:	7bbb      	ldrb	r3, [r7, #14]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <USBD_StdEPReq+0xda>
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	2b80      	cmp	r3, #128	@ 0x80
 8008c16:	d008      	beq.n	8008c2a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	88db      	ldrh	r3, [r3, #6]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 f869 	bl	8009cfc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fccc 	bl	80095c8 <USBD_CtlSendStatus>

              break;
 8008c30:	e004      	b.n	8008c3c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fbff 	bl	8009438 <USBD_CtlError>
              break;
 8008c3a:	bf00      	nop
          }
          break;
 8008c3c:	e0e0      	b.n	8008e00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d002      	beq.n	8008c4e <USBD_StdEPReq+0xfe>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d015      	beq.n	8008c78 <USBD_StdEPReq+0x128>
 8008c4c:	e026      	b.n	8008c9c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00c      	beq.n	8008c6e <USBD_StdEPReq+0x11e>
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	2b80      	cmp	r3, #128	@ 0x80
 8008c58:	d009      	beq.n	8008c6e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 f84c 	bl	8009cfc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c64:	2180      	movs	r1, #128	@ 0x80
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 f848 	bl	8009cfc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c6c:	e01c      	b.n	8008ca8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fbe1 	bl	8009438 <USBD_CtlError>
              break;
 8008c76:	e017      	b.n	8008ca8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d112      	bne.n	8008ca6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d004      	beq.n	8008c94 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 f853 	bl	8009d3a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fc97 	bl	80095c8 <USBD_CtlSendStatus>
              }
              break;
 8008c9a:	e004      	b.n	8008ca6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fbca 	bl	8009438 <USBD_CtlError>
              break;
 8008ca4:	e000      	b.n	8008ca8 <USBD_StdEPReq+0x158>
              break;
 8008ca6:	bf00      	nop
          }
          break;
 8008ca8:	e0aa      	b.n	8008e00 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d002      	beq.n	8008cba <USBD_StdEPReq+0x16a>
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d032      	beq.n	8008d1e <USBD_StdEPReq+0x1ce>
 8008cb8:	e097      	b.n	8008dea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cba:	7bbb      	ldrb	r3, [r7, #14]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d007      	beq.n	8008cd0 <USBD_StdEPReq+0x180>
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	2b80      	cmp	r3, #128	@ 0x80
 8008cc4:	d004      	beq.n	8008cd0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fbb5 	bl	8009438 <USBD_CtlError>
                break;
 8008cce:	e091      	b.n	8008df4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	da0b      	bge.n	8008cf0 <USBD_StdEPReq+0x1a0>
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	3310      	adds	r3, #16
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	4413      	add	r3, r2
 8008cec:	3304      	adds	r3, #4
 8008cee:	e00b      	b.n	8008d08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	4413      	add	r3, r2
 8008d06:	3304      	adds	r3, #4
 8008d08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2202      	movs	r2, #2
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fbf8 	bl	800950c <USBD_CtlSendData>
              break;
 8008d1c:	e06a      	b.n	8008df4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	da11      	bge.n	8008d4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	f003 020f 	and.w	r2, r3, #15
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	440b      	add	r3, r1
 8008d38:	3318      	adds	r3, #24
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d117      	bne.n	8008d70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fb78 	bl	8009438 <USBD_CtlError>
                  break;
 8008d48:	e054      	b.n	8008df4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	f003 020f 	and.w	r2, r3, #15
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fb65 	bl	8009438 <USBD_CtlError>
                  break;
 8008d6e:	e041      	b.n	8008df4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da0b      	bge.n	8008d90 <USBD_StdEPReq+0x240>
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	3310      	adds	r3, #16
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	e00b      	b.n	8008da8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4413      	add	r3, r2
 8008da6:	3304      	adds	r3, #4
 8008da8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <USBD_StdEPReq+0x266>
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	2b80      	cmp	r3, #128	@ 0x80
 8008db4:	d103      	bne.n	8008dbe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e00e      	b.n	8008ddc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 ffd8 	bl	8009d78 <USBD_LL_IsStallEP>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2202      	movs	r2, #2
 8008de0:	4619      	mov	r1, r3
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fb92 	bl	800950c <USBD_CtlSendData>
              break;
 8008de8:	e004      	b.n	8008df4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fb23 	bl	8009438 <USBD_CtlError>
              break;
 8008df2:	bf00      	nop
          }
          break;
 8008df4:	e004      	b.n	8008e00 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fb1d 	bl	8009438 <USBD_CtlError>
          break;
 8008dfe:	bf00      	nop
      }
      break;
 8008e00:	e004      	b.n	8008e0c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fb17 	bl	8009438 <USBD_CtlError>
      break;
 8008e0a:	bf00      	nop
  }

  return ret;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	0a1b      	lsrs	r3, r3, #8
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	2b06      	cmp	r3, #6
 8008e3a:	f200 8128 	bhi.w	800908e <USBD_GetDescriptor+0x276>
 8008e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e44 <USBD_GetDescriptor+0x2c>)
 8008e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e44:	08008e61 	.word	0x08008e61
 8008e48:	08008e79 	.word	0x08008e79
 8008e4c:	08008eb9 	.word	0x08008eb9
 8008e50:	0800908f 	.word	0x0800908f
 8008e54:	0800908f 	.word	0x0800908f
 8008e58:	0800902f 	.word	0x0800902f
 8008e5c:	0800905b 	.word	0x0800905b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	7c12      	ldrb	r2, [r2, #16]
 8008e6c:	f107 0108 	add.w	r1, r7, #8
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	60f8      	str	r0, [r7, #12]
      break;
 8008e76:	e112      	b.n	800909e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7c1b      	ldrb	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10d      	bne.n	8008e9c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e88:	f107 0208 	add.w	r2, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	2202      	movs	r2, #2
 8008e98:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e9a:	e100      	b.n	800909e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea4:	f107 0208 	add.w	r2, r7, #8
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	701a      	strb	r2, [r3, #0]
      break;
 8008eb6:	e0f2      	b.n	800909e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	885b      	ldrh	r3, [r3, #2]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	f200 80ac 	bhi.w	800901c <USBD_GetDescriptor+0x204>
 8008ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <USBD_GetDescriptor+0xb4>)
 8008ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eca:	bf00      	nop
 8008ecc:	08008ee5 	.word	0x08008ee5
 8008ed0:	08008f19 	.word	0x08008f19
 8008ed4:	08008f4d 	.word	0x08008f4d
 8008ed8:	08008f81 	.word	0x08008f81
 8008edc:	08008fb5 	.word	0x08008fb5
 8008ee0:	08008fe9 	.word	0x08008fe9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	7c12      	ldrb	r2, [r2, #16]
 8008efc:	f107 0108 	add.w	r1, r7, #8
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f06:	e091      	b.n	800902c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f08:	6839      	ldr	r1, [r7, #0]
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa94 	bl	8009438 <USBD_CtlError>
            err++;
 8008f10:	7afb      	ldrb	r3, [r7, #11]
 8008f12:	3301      	adds	r3, #1
 8008f14:	72fb      	strb	r3, [r7, #11]
          break;
 8008f16:	e089      	b.n	800902c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7c12      	ldrb	r2, [r2, #16]
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
 8008f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3a:	e077      	b.n	800902c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fa7a 	bl	8009438 <USBD_CtlError>
            err++;
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	3301      	adds	r3, #1
 8008f48:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4a:	e06f      	b.n	800902c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f6e:	e05d      	b.n	800902c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fa60 	bl	8009438 <USBD_CtlError>
            err++;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f7e:	e055      	b.n	800902c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	7c12      	ldrb	r2, [r2, #16]
 8008f98:	f107 0108 	add.w	r1, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fa2:	e043      	b.n	800902c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fa46 	bl	8009438 <USBD_CtlError>
            err++;
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fb2:	e03b      	b.n	800902c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	7c12      	ldrb	r2, [r2, #16]
 8008fcc:	f107 0108 	add.w	r1, r7, #8
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fd6:	e029      	b.n	800902c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa2c 	bl	8009438 <USBD_CtlError>
            err++;
 8008fe0:	7afb      	ldrb	r3, [r7, #11]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fe6:	e021      	b.n	800902c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7c12      	ldrb	r2, [r2, #16]
 8009000:	f107 0108 	add.w	r1, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900a:	e00f      	b.n	800902c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa12 	bl	8009438 <USBD_CtlError>
            err++;
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	3301      	adds	r3, #1
 8009018:	72fb      	strb	r3, [r7, #11]
          break;
 800901a:	e007      	b.n	800902c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa0a 	bl	8009438 <USBD_CtlError>
          err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800902a:	e038      	b.n	800909e <USBD_GetDescriptor+0x286>
 800902c:	e037      	b.n	800909e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7c1b      	ldrb	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d109      	bne.n	800904a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800903e:	f107 0208 	add.w	r2, r7, #8
 8009042:	4610      	mov	r0, r2
 8009044:	4798      	blx	r3
 8009046:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009048:	e029      	b.n	800909e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f9f3 	bl	8009438 <USBD_CtlError>
        err++;
 8009052:	7afb      	ldrb	r3, [r7, #11]
 8009054:	3301      	adds	r3, #1
 8009056:	72fb      	strb	r3, [r7, #11]
      break;
 8009058:	e021      	b.n	800909e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7c1b      	ldrb	r3, [r3, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10d      	bne.n	800907e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800906a:	f107 0208 	add.w	r2, r7, #8
 800906e:	4610      	mov	r0, r2
 8009070:	4798      	blx	r3
 8009072:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3301      	adds	r3, #1
 8009078:	2207      	movs	r2, #7
 800907a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800907c:	e00f      	b.n	800909e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9d9 	bl	8009438 <USBD_CtlError>
        err++;
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	3301      	adds	r3, #1
 800908a:	72fb      	strb	r3, [r7, #11]
      break;
 800908c:	e007      	b.n	800909e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9d1 	bl	8009438 <USBD_CtlError>
      err++;
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	3301      	adds	r3, #1
 800909a:	72fb      	strb	r3, [r7, #11]
      break;
 800909c:	bf00      	nop
  }

  if (err != 0U)
 800909e:	7afb      	ldrb	r3, [r7, #11]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d11c      	bne.n	80090de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090a4:	893b      	ldrh	r3, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d011      	beq.n	80090ce <USBD_GetDescriptor+0x2b6>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	88db      	ldrh	r3, [r3, #6]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00d      	beq.n	80090ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	88da      	ldrh	r2, [r3, #6]
 80090b6:	893b      	ldrh	r3, [r7, #8]
 80090b8:	4293      	cmp	r3, r2
 80090ba:	bf28      	it	cs
 80090bc:	4613      	movcs	r3, r2
 80090be:	b29b      	uxth	r3, r3
 80090c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80090c2:	893b      	ldrh	r3, [r7, #8]
 80090c4:	461a      	mov	r2, r3
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fa1f 	bl	800950c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	88db      	ldrh	r3, [r3, #6]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d104      	bne.n	80090e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fa76 	bl	80095c8 <USBD_CtlSendStatus>
 80090dc:	e000      	b.n	80090e0 <USBD_GetDescriptor+0x2c8>
    return;
 80090de:	bf00      	nop
    }
  }
}
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop

080090e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b084      	sub	sp, #16
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	889b      	ldrh	r3, [r3, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d130      	bne.n	800915c <USBD_SetAddress+0x74>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88db      	ldrh	r3, [r3, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d12c      	bne.n	800915c <USBD_SetAddress+0x74>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	2b7f      	cmp	r3, #127	@ 0x7f
 8009108:	d828      	bhi.n	800915c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009114:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800911c:	2b03      	cmp	r3, #3
 800911e:	d104      	bne.n	800912a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f988 	bl	8009438 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009128:	e01d      	b.n	8009166 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7bfa      	ldrb	r2, [r7, #15]
 800912e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fe49 	bl	8009dce <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fa43 	bl	80095c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009142:	7bfb      	ldrb	r3, [r7, #15]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d004      	beq.n	8009152 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009150:	e009      	b.n	8009166 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	e004      	b.n	8009166 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f96a 	bl	8009438 <USBD_CtlError>
  }
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	885b      	ldrh	r3, [r3, #2]
 800917e:	b2da      	uxtb	r2, r3
 8009180:	4b41      	ldr	r3, [pc, #260]	@ (8009288 <USBD_SetConfig+0x118>)
 8009182:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009184:	4b40      	ldr	r3, [pc, #256]	@ (8009288 <USBD_SetConfig+0x118>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d904      	bls.n	8009196 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f952 	bl	8009438 <USBD_CtlError>
 8009194:	e075      	b.n	8009282 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919c:	2b02      	cmp	r3, #2
 800919e:	d002      	beq.n	80091a6 <USBD_SetConfig+0x36>
 80091a0:	2b03      	cmp	r3, #3
 80091a2:	d023      	beq.n	80091ec <USBD_SetConfig+0x7c>
 80091a4:	e062      	b.n	800926c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091a6:	4b38      	ldr	r3, [pc, #224]	@ (8009288 <USBD_SetConfig+0x118>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d01a      	beq.n	80091e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091ae:	4b36      	ldr	r3, [pc, #216]	@ (8009288 <USBD_SetConfig+0x118>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2203      	movs	r2, #3
 80091bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80091c0:	4b31      	ldr	r3, [pc, #196]	@ (8009288 <USBD_SetConfig+0x118>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff f9e7 	bl	800859a <USBD_SetClassConfig>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d104      	bne.n	80091dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091d2:	6839      	ldr	r1, [r7, #0]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f92f 	bl	8009438 <USBD_CtlError>
            return;
 80091da:	e052      	b.n	8009282 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f9f3 	bl	80095c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091e2:	e04e      	b.n	8009282 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f9ef 	bl	80095c8 <USBD_CtlSendStatus>
        break;
 80091ea:	e04a      	b.n	8009282 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80091ec:	4b26      	ldr	r3, [pc, #152]	@ (8009288 <USBD_SetConfig+0x118>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d112      	bne.n	800921a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80091fc:	4b22      	ldr	r3, [pc, #136]	@ (8009288 <USBD_SetConfig+0x118>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	461a      	mov	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009206:	4b20      	ldr	r3, [pc, #128]	@ (8009288 <USBD_SetConfig+0x118>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff f9e3 	bl	80085d8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f9d8 	bl	80095c8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009218:	e033      	b.n	8009282 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800921a:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <USBD_SetConfig+0x118>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	429a      	cmp	r2, r3
 8009226:	d01d      	beq.n	8009264 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f7ff f9d1 	bl	80085d8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009236:	4b14      	ldr	r3, [pc, #80]	@ (8009288 <USBD_SetConfig+0x118>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009240:	4b11      	ldr	r3, [pc, #68]	@ (8009288 <USBD_SetConfig+0x118>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff f9a7 	bl	800859a <USBD_SetClassConfig>
 800924c:	4603      	mov	r3, r0
 800924e:	2b02      	cmp	r3, #2
 8009250:	d104      	bne.n	800925c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f8ef 	bl	8009438 <USBD_CtlError>
            return;
 800925a:	e012      	b.n	8009282 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f9b3 	bl	80095c8 <USBD_CtlSendStatus>
        break;
 8009262:	e00e      	b.n	8009282 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f9af 	bl	80095c8 <USBD_CtlSendStatus>
        break;
 800926a:	e00a      	b.n	8009282 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f8e2 	bl	8009438 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009274:	4b04      	ldr	r3, [pc, #16]	@ (8009288 <USBD_SetConfig+0x118>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f7ff f9ac 	bl	80085d8 <USBD_ClrClassConfig>
        break;
 8009280:	bf00      	nop
    }
  }
}
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000484 	.word	0x20000484

0800928c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	88db      	ldrh	r3, [r3, #6]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d004      	beq.n	80092a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f8c9 	bl	8009438 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092a6:	e022      	b.n	80092ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	dc02      	bgt.n	80092b8 <USBD_GetConfig+0x2c>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dc03      	bgt.n	80092be <USBD_GetConfig+0x32>
 80092b6:	e015      	b.n	80092e4 <USBD_GetConfig+0x58>
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d00b      	beq.n	80092d4 <USBD_GetConfig+0x48>
 80092bc:	e012      	b.n	80092e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3308      	adds	r3, #8
 80092c8:	2201      	movs	r2, #1
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f91d 	bl	800950c <USBD_CtlSendData>
        break;
 80092d2:	e00c      	b.n	80092ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	2201      	movs	r2, #1
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f915 	bl	800950c <USBD_CtlSendData>
        break;
 80092e2:	e004      	b.n	80092ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8a6 	bl	8009438 <USBD_CtlError>
        break;
 80092ec:	bf00      	nop
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009306:	3b01      	subs	r3, #1
 8009308:	2b02      	cmp	r3, #2
 800930a:	d81e      	bhi.n	800934a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	88db      	ldrh	r3, [r3, #6]
 8009310:	2b02      	cmp	r3, #2
 8009312:	d004      	beq.n	800931e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f88e 	bl	8009438 <USBD_CtlError>
        break;
 800931c:	e01a      	b.n	8009354 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	f043 0202 	orr.w	r2, r3, #2
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	330c      	adds	r3, #12
 800933e:	2202      	movs	r2, #2
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f8e2 	bl	800950c <USBD_CtlSendData>
      break;
 8009348:	e004      	b.n	8009354 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f873 	bl	8009438 <USBD_CtlError>
      break;
 8009352:	bf00      	nop
  }
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	885b      	ldrh	r3, [r3, #2]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d106      	bne.n	800937c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f926 	bl	80095c8 <USBD_CtlSendStatus>
  }
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009394:	3b01      	subs	r3, #1
 8009396:	2b02      	cmp	r3, #2
 8009398:	d80b      	bhi.n	80093b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	885b      	ldrh	r3, [r3, #2]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d10c      	bne.n	80093bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f90c 	bl	80095c8 <USBD_CtlSendStatus>
      }
      break;
 80093b0:	e004      	b.n	80093bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f83f 	bl	8009438 <USBD_CtlError>
      break;
 80093ba:	e000      	b.n	80093be <USBD_ClrFeature+0x3a>
      break;
 80093bc:	bf00      	nop
  }
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781a      	ldrb	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	785a      	ldrb	r2, [r3, #1]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	3302      	adds	r3, #2
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	3303      	adds	r3, #3
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	4413      	add	r3, r2
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	3304      	adds	r3, #4
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	3305      	adds	r3, #5
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	b29b      	uxth	r3, r3
 800940c:	4413      	add	r3, r2
 800940e:	b29a      	uxth	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	3306      	adds	r3, #6
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	3307      	adds	r3, #7
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	b29b      	uxth	r3, r3
 8009426:	4413      	add	r3, r2
 8009428:	b29a      	uxth	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	80da      	strh	r2, [r3, #6]

}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	bc80      	pop	{r7}
 8009436:	4770      	bx	lr

08009438 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009442:	2180      	movs	r1, #128	@ 0x80
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fc59 	bl	8009cfc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800944a:	2100      	movs	r1, #0
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fc55 	bl	8009cfc <USBD_LL_StallEP>
}
 8009452:	bf00      	nop
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b086      	sub	sp, #24
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d032      	beq.n	80094d6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f834 	bl	80094de <USBD_GetLen>
 8009476:	4603      	mov	r3, r0
 8009478:	3301      	adds	r3, #1
 800947a:	b29b      	uxth	r3, r3
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
 8009486:	1c5a      	adds	r2, r3, #1
 8009488:	75fa      	strb	r2, [r7, #23]
 800948a:	461a      	mov	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4413      	add	r3, r2
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	7812      	ldrb	r2, [r2, #0]
 8009494:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	75fa      	strb	r2, [r7, #23]
 800949c:	461a      	mov	r2, r3
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	4413      	add	r3, r2
 80094a2:	2203      	movs	r2, #3
 80094a4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094a6:	e012      	b.n	80094ce <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	60fa      	str	r2, [r7, #12]
 80094ae:	7dfa      	ldrb	r2, [r7, #23]
 80094b0:	1c51      	adds	r1, r2, #1
 80094b2:	75f9      	strb	r1, [r7, #23]
 80094b4:	4611      	mov	r1, r2
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	440a      	add	r2, r1
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	75fa      	strb	r2, [r7, #23]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	4413      	add	r3, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e8      	bne.n	80094a8 <USBD_GetString+0x4e>
    }
  }
}
 80094d6:	bf00      	nop
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094de:	b480      	push	{r7}
 80094e0:	b085      	sub	sp, #20
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80094ea:	e005      	b.n	80094f8 <USBD_GetLen+0x1a>
  {
    len++;
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	3301      	adds	r3, #1
 80094f0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3301      	adds	r3, #1
 80094f6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f5      	bne.n	80094ec <USBD_GetLen+0xe>
  }

  return len;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr

0800950c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	4613      	mov	r3, r2
 8009518:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2202      	movs	r2, #2
 800951e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009522:	88fa      	ldrh	r2, [r7, #6]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009528:	88fa      	ldrh	r2, [r7, #6]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	2100      	movs	r1, #0
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 fc69 	bl	8009e0c <USBD_LL_Transmit>

  return USBD_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009552:	88fb      	ldrh	r3, [r7, #6]
 8009554:	68ba      	ldr	r2, [r7, #8]
 8009556:	2100      	movs	r1, #0
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 fc57 	bl	8009e0c <USBD_LL_Transmit>

  return USBD_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2203      	movs	r2, #3
 800957a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800957e:	88fa      	ldrh	r2, [r7, #6]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009586:	88fa      	ldrh	r2, [r7, #6]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800958e:	88fb      	ldrh	r3, [r7, #6]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	2100      	movs	r1, #0
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 fc5c 	bl	8009e52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	2100      	movs	r1, #0
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fc4a 	bl	8009e52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2204      	movs	r2, #4
 80095d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095d8:	2300      	movs	r3, #0
 80095da:	2200      	movs	r2, #0
 80095dc:	2100      	movs	r1, #0
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fc14 	bl	8009e0c <USBD_LL_Transmit>

  return USBD_OK;
 80095e4:	2300      	movs	r3, #0
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2205      	movs	r2, #5
 80095fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095fe:	2300      	movs	r3, #0
 8009600:	2200      	movs	r2, #0
 8009602:	2100      	movs	r1, #0
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fc24 	bl	8009e52 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009618:	2200      	movs	r2, #0
 800961a:	4912      	ldr	r1, [pc, #72]	@ (8009664 <MX_USB_DEVICE_Init+0x50>)
 800961c:	4812      	ldr	r0, [pc, #72]	@ (8009668 <MX_USB_DEVICE_Init+0x54>)
 800961e:	f7fe ff62 	bl	80084e6 <USBD_Init>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009628:	f7f8 f8de 	bl	80017e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800962c:	490f      	ldr	r1, [pc, #60]	@ (800966c <MX_USB_DEVICE_Init+0x58>)
 800962e:	480e      	ldr	r0, [pc, #56]	@ (8009668 <MX_USB_DEVICE_Init+0x54>)
 8009630:	f7fe ff84 	bl	800853c <USBD_RegisterClass>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800963a:	f7f8 f8d5 	bl	80017e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800963e:	490c      	ldr	r1, [pc, #48]	@ (8009670 <MX_USB_DEVICE_Init+0x5c>)
 8009640:	4809      	ldr	r0, [pc, #36]	@ (8009668 <MX_USB_DEVICE_Init+0x54>)
 8009642:	f7fe feb5 	bl	80083b0 <USBD_CDC_RegisterInterface>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800964c:	f7f8 f8cc 	bl	80017e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009650:	4805      	ldr	r0, [pc, #20]	@ (8009668 <MX_USB_DEVICE_Init+0x54>)
 8009652:	f7fe ff8c 	bl	800856e <USBD_Start>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800965c:	f7f8 f8c4 	bl	80017e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009660:	bf00      	nop
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000134 	.word	0x20000134
 8009668:	20000488 	.word	0x20000488
 800966c:	20000020 	.word	0x20000020
 8009670:	20000124 	.word	0x20000124

08009674 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009678:	2200      	movs	r2, #0
 800967a:	4905      	ldr	r1, [pc, #20]	@ (8009690 <CDC_Init_FS+0x1c>)
 800967c:	4805      	ldr	r0, [pc, #20]	@ (8009694 <CDC_Init_FS+0x20>)
 800967e:	f7fe fead 	bl	80083dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009682:	4905      	ldr	r1, [pc, #20]	@ (8009698 <CDC_Init_FS+0x24>)
 8009684:	4803      	ldr	r0, [pc, #12]	@ (8009694 <CDC_Init_FS+0x20>)
 8009686:	f7fe fec2 	bl	800840e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800968a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800968c:	4618      	mov	r0, r3
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000b4c 	.word	0x20000b4c
 8009694:	20000488 	.word	0x20000488
 8009698:	2000074c 	.word	0x2000074c

0800969c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800969c:	b480      	push	{r7}
 800969e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bc80      	pop	{r7}
 80096a8:	4770      	bx	lr
	...

080096ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	6039      	str	r1, [r7, #0]
 80096b6:	71fb      	strb	r3, [r7, #7]
 80096b8:	4613      	mov	r3, r2
 80096ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80096bc:	79fb      	ldrb	r3, [r7, #7]
 80096be:	2b23      	cmp	r3, #35	@ 0x23
 80096c0:	d84a      	bhi.n	8009758 <CDC_Control_FS+0xac>
 80096c2:	a201      	add	r2, pc, #4	@ (adr r2, 80096c8 <CDC_Control_FS+0x1c>)
 80096c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c8:	08009759 	.word	0x08009759
 80096cc:	08009759 	.word	0x08009759
 80096d0:	08009759 	.word	0x08009759
 80096d4:	08009759 	.word	0x08009759
 80096d8:	08009759 	.word	0x08009759
 80096dc:	08009759 	.word	0x08009759
 80096e0:	08009759 	.word	0x08009759
 80096e4:	08009759 	.word	0x08009759
 80096e8:	08009759 	.word	0x08009759
 80096ec:	08009759 	.word	0x08009759
 80096f0:	08009759 	.word	0x08009759
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009759 	.word	0x08009759
 80096fc:	08009759 	.word	0x08009759
 8009700:	08009759 	.word	0x08009759
 8009704:	08009759 	.word	0x08009759
 8009708:	08009759 	.word	0x08009759
 800970c:	08009759 	.word	0x08009759
 8009710:	08009759 	.word	0x08009759
 8009714:	08009759 	.word	0x08009759
 8009718:	08009759 	.word	0x08009759
 800971c:	08009759 	.word	0x08009759
 8009720:	08009759 	.word	0x08009759
 8009724:	08009759 	.word	0x08009759
 8009728:	08009759 	.word	0x08009759
 800972c:	08009759 	.word	0x08009759
 8009730:	08009759 	.word	0x08009759
 8009734:	08009759 	.word	0x08009759
 8009738:	08009759 	.word	0x08009759
 800973c:	08009759 	.word	0x08009759
 8009740:	08009759 	.word	0x08009759
 8009744:	08009759 	.word	0x08009759
 8009748:	08009759 	.word	0x08009759
 800974c:	08009759 	.word	0x08009759
 8009750:	08009759 	.word	0x08009759
 8009754:	08009759 	.word	0x08009759
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009758:	bf00      	nop
  }

  return (USBD_OK);
 800975a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800975c:	4618      	mov	r0, r3
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	bc80      	pop	{r7}
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop

08009768 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	// Gọi callback người dùng để xử lý dữ liệu nhận

	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4808      	ldr	r0, [pc, #32]	@ (8009798 <CDC_Receive_FS+0x30>)
 8009776:	f7fe fe4a 	bl	800840e <USBD_CDC_SetRxBuffer>
	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800977a:	4807      	ldr	r0, [pc, #28]	@ (8009798 <CDC_Receive_FS+0x30>)
 800977c:	f7fe fe89 	bl	8008492 <USBD_CDC_ReceivePacket>
	    CDC_ReceiveCallback(Buf, *Len);
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7f7 feee 	bl	8001568 <CDC_ReceiveCallback>
	    return (USBD_OK);
 800978c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000488 	.word	0x20000488

0800979c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80097ac:	4b0d      	ldr	r3, [pc, #52]	@ (80097e4 <CDC_Transmit_FS+0x48>)
 80097ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80097be:	2301      	movs	r3, #1
 80097c0:	e00b      	b.n	80097da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80097c2:	887b      	ldrh	r3, [r7, #2]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	4806      	ldr	r0, [pc, #24]	@ (80097e4 <CDC_Transmit_FS+0x48>)
 80097ca:	f7fe fe07 	bl	80083dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80097ce:	4805      	ldr	r0, [pc, #20]	@ (80097e4 <CDC_Transmit_FS+0x48>)
 80097d0:	f7fe fe30 	bl	8008434 <USBD_CDC_TransmitPacket>
 80097d4:	4603      	mov	r3, r0
 80097d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000488 	.word	0x20000488

080097e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	4603      	mov	r3, r0
 80097f0:	6039      	str	r1, [r7, #0]
 80097f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2212      	movs	r2, #18
 80097f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097fa:	4b03      	ldr	r3, [pc, #12]	@ (8009808 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000150 	.word	0x20000150

0800980c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	6039      	str	r1, [r7, #0]
 8009816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2204      	movs	r2, #4
 800981c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800981e:	4b03      	ldr	r3, [pc, #12]	@ (800982c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	bc80      	pop	{r7}
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	20000164 	.word	0x20000164

08009830 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	6039      	str	r1, [r7, #0]
 800983a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d105      	bne.n	800984e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4907      	ldr	r1, [pc, #28]	@ (8009864 <USBD_FS_ProductStrDescriptor+0x34>)
 8009846:	4808      	ldr	r0, [pc, #32]	@ (8009868 <USBD_FS_ProductStrDescriptor+0x38>)
 8009848:	f7ff fe07 	bl	800945a <USBD_GetString>
 800984c:	e004      	b.n	8009858 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	4904      	ldr	r1, [pc, #16]	@ (8009864 <USBD_FS_ProductStrDescriptor+0x34>)
 8009852:	4805      	ldr	r0, [pc, #20]	@ (8009868 <USBD_FS_ProductStrDescriptor+0x38>)
 8009854:	f7ff fe01 	bl	800945a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009858:	4b02      	ldr	r3, [pc, #8]	@ (8009864 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000f4c 	.word	0x20000f4c
 8009868:	0800cae8 	.word	0x0800cae8

0800986c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	6039      	str	r1, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	4904      	ldr	r1, [pc, #16]	@ (800988c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800987c:	4804      	ldr	r0, [pc, #16]	@ (8009890 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800987e:	f7ff fdec 	bl	800945a <USBD_GetString>
  return USBD_StrDesc;
 8009882:	4b02      	ldr	r3, [pc, #8]	@ (800988c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20000f4c 	.word	0x20000f4c
 8009890:	0800cb00 	.word	0x0800cb00

08009894 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	4603      	mov	r3, r0
 800989c:	6039      	str	r1, [r7, #0]
 800989e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	221a      	movs	r2, #26
 80098a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80098a6:	f000 f843 	bl	8009930 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80098aa:	4b02      	ldr	r3, [pc, #8]	@ (80098b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20000168 	.word	0x20000168

080098b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	6039      	str	r1, [r7, #0]
 80098c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d105      	bne.n	80098d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	4907      	ldr	r1, [pc, #28]	@ (80098ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80098ce:	4808      	ldr	r0, [pc, #32]	@ (80098f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098d0:	f7ff fdc3 	bl	800945a <USBD_GetString>
 80098d4:	e004      	b.n	80098e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	4904      	ldr	r1, [pc, #16]	@ (80098ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80098da:	4805      	ldr	r0, [pc, #20]	@ (80098f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098dc:	f7ff fdbd 	bl	800945a <USBD_GetString>
  }
  return USBD_StrDesc;
 80098e0:	4b02      	ldr	r3, [pc, #8]	@ (80098ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000f4c 	.word	0x20000f4c
 80098f0:	0800cb14 	.word	0x0800cb14

080098f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	6039      	str	r1, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d105      	bne.n	8009912 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	4907      	ldr	r1, [pc, #28]	@ (8009928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800990a:	4808      	ldr	r0, [pc, #32]	@ (800992c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800990c:	f7ff fda5 	bl	800945a <USBD_GetString>
 8009910:	e004      	b.n	800991c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	4904      	ldr	r1, [pc, #16]	@ (8009928 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009916:	4805      	ldr	r0, [pc, #20]	@ (800992c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009918:	f7ff fd9f 	bl	800945a <USBD_GetString>
  }
  return USBD_StrDesc;
 800991c:	4b02      	ldr	r3, [pc, #8]	@ (8009928 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20000f4c 	.word	0x20000f4c
 800992c:	0800cb20 	.word	0x0800cb20

08009930 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009936:	4b0f      	ldr	r3, [pc, #60]	@ (8009974 <Get_SerialNum+0x44>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800993c:	4b0e      	ldr	r3, [pc, #56]	@ (8009978 <Get_SerialNum+0x48>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009942:	4b0e      	ldr	r3, [pc, #56]	@ (800997c <Get_SerialNum+0x4c>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009948:	68fa      	ldr	r2, [r7, #12]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d009      	beq.n	800996a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009956:	2208      	movs	r2, #8
 8009958:	4909      	ldr	r1, [pc, #36]	@ (8009980 <Get_SerialNum+0x50>)
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f814 	bl	8009988 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009960:	2204      	movs	r2, #4
 8009962:	4908      	ldr	r1, [pc, #32]	@ (8009984 <Get_SerialNum+0x54>)
 8009964:	68b8      	ldr	r0, [r7, #8]
 8009966:	f000 f80f 	bl	8009988 <IntToUnicode>
  }
}
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	1ffff7e8 	.word	0x1ffff7e8
 8009978:	1ffff7ec 	.word	0x1ffff7ec
 800997c:	1ffff7f0 	.word	0x1ffff7f0
 8009980:	2000016a 	.word	0x2000016a
 8009984:	2000017a 	.word	0x2000017a

08009988 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	4613      	mov	r3, r2
 8009994:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800999a:	2300      	movs	r3, #0
 800999c:	75fb      	strb	r3, [r7, #23]
 800999e:	e027      	b.n	80099f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	0f1b      	lsrs	r3, r3, #28
 80099a4:	2b09      	cmp	r3, #9
 80099a6:	d80b      	bhi.n	80099c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	0f1b      	lsrs	r3, r3, #28
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	4619      	mov	r1, r3
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	440b      	add	r3, r1
 80099b8:	3230      	adds	r2, #48	@ 0x30
 80099ba:	b2d2      	uxtb	r2, r2
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e00a      	b.n	80099d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	0f1b      	lsrs	r3, r3, #28
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	005b      	lsls	r3, r3, #1
 80099ca:	4619      	mov	r1, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	440b      	add	r3, r1
 80099d0:	3237      	adds	r2, #55	@ 0x37
 80099d2:	b2d2      	uxtb	r2, r2
 80099d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	011b      	lsls	r3, r3, #4
 80099da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	3301      	adds	r3, #1
 80099e2:	68ba      	ldr	r2, [r7, #8]
 80099e4:	4413      	add	r3, r2
 80099e6:	2200      	movs	r2, #0
 80099e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
 80099ec:	3301      	adds	r3, #1
 80099ee:	75fb      	strb	r3, [r7, #23]
 80099f0:	7dfa      	ldrb	r2, [r7, #23]
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d3d3      	bcc.n	80099a0 <IntToUnicode+0x18>
  }
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bc80      	pop	{r7}
 8009a02:	4770      	bx	lr

08009a04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0d      	ldr	r2, [pc, #52]	@ (8009a48 <HAL_PCD_MspInit+0x44>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d113      	bne.n	8009a3e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a16:	4b0d      	ldr	r3, [pc, #52]	@ (8009a4c <HAL_PCD_MspInit+0x48>)
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a4c <HAL_PCD_MspInit+0x48>)
 8009a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a20:	61d3      	str	r3, [r2, #28]
 8009a22:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <HAL_PCD_MspInit+0x48>)
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2100      	movs	r1, #0
 8009a32:	2014      	movs	r0, #20
 8009a34:	f7f8 f9cf 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009a38:	2014      	movs	r0, #20
 8009a3a:	f7f8 f9e8 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	40005c00 	.word	0x40005c00
 8009a4c:	40021000 	.word	0x40021000

08009a50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f7fe fdc9 	bl	80085fe <USBD_LL_SetupStage>
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	00db      	lsls	r3, r3, #3
 8009a92:	440b      	add	r3, r1
 8009a94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f7fe fdfb 	bl	8008698 <USBD_LL_DataOutStage>
}
 8009aa2:	bf00      	nop
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009abc:	78fa      	ldrb	r2, [r7, #3]
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	440b      	add	r3, r1
 8009aca:	3324      	adds	r3, #36	@ 0x24
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	78fb      	ldrb	r3, [r7, #3]
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	f7fe fe52 	bl	800877a <USBD_LL_DataInStage>
}
 8009ad6:	bf00      	nop
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}

08009ade <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7fe ff62 	bl	80089b6 <USBD_LL_SOF>
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b02:	2301      	movs	r3, #1
 8009b04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	799b      	ldrb	r3, [r3, #6]
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d001      	beq.n	8009b12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b0e:	f7f7 fe6b 	bl	80017e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b18:	7bfa      	ldrb	r2, [r7, #15]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe ff12 	bl	8008946 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f7fe fecb 	bl	80088c4 <USBD_LL_Reset>
}
 8009b2e:	bf00      	nop
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe ff0c 	bl	8008964 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	7a9b      	ldrb	r3, [r3, #10]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b54:	4b04      	ldr	r3, [pc, #16]	@ (8009b68 <HAL_PCD_SuspendCallback+0x30>)
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	4a03      	ldr	r2, [pc, #12]	@ (8009b68 <HAL_PCD_SuspendCallback+0x30>)
 8009b5a:	f043 0306 	orr.w	r3, r3, #6
 8009b5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	e000ed00 	.word	0xe000ed00

08009b6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe ff06 	bl	800898c <USBD_LL_Resume>
}
 8009b80:	bf00      	nop
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b90:	4a28      	ldr	r2, [pc, #160]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a26      	ldr	r2, [pc, #152]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009b9c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ba0:	4b24      	ldr	r3, [pc, #144]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009ba2:	4a25      	ldr	r2, [pc, #148]	@ (8009c38 <USBD_LL_Init+0xb0>)
 8009ba4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ba6:	4b23      	ldr	r3, [pc, #140]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009ba8:	2208      	movs	r2, #8
 8009baa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bac:	4b21      	ldr	r3, [pc, #132]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009bae:	2202      	movs	r2, #2
 8009bb0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bb2:	4b20      	ldr	r3, [pc, #128]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009bc4:	481b      	ldr	r0, [pc, #108]	@ (8009c34 <USBD_LL_Init+0xac>)
 8009bc6:	f7f9 fc12 	bl	80033ee <HAL_PCD_Init>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009bd0:	f7f7 fe0a 	bl	80017e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bda:	2318      	movs	r3, #24
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	f7fb f923 	bl	8004e2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bea:	2358      	movs	r3, #88	@ 0x58
 8009bec:	2200      	movs	r2, #0
 8009bee:	2180      	movs	r1, #128	@ 0x80
 8009bf0:	f7fb f91b 	bl	8004e2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bfa:	23c0      	movs	r3, #192	@ 0xc0
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	2181      	movs	r1, #129	@ 0x81
 8009c00:	f7fb f913 	bl	8004e2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c0a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2101      	movs	r1, #1
 8009c12:	f7fb f90a 	bl	8004e2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c20:	2200      	movs	r2, #0
 8009c22:	2182      	movs	r1, #130	@ 0x82
 8009c24:	f7fb f901 	bl	8004e2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	2000114c 	.word	0x2000114c
 8009c38:	40005c00 	.word	0x40005c00

08009c3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7f9 fcc1 	bl	80035da <HAL_PCD_Start>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f000 f94e 	bl	8009f00 <USBD_Get_USB_Status>
 8009c64:	4603      	mov	r3, r0
 8009c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b084      	sub	sp, #16
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	4608      	mov	r0, r1
 8009c7c:	4611      	mov	r1, r2
 8009c7e:	461a      	mov	r2, r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	70fb      	strb	r3, [r7, #3]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70bb      	strb	r3, [r7, #2]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c9a:	78bb      	ldrb	r3, [r7, #2]
 8009c9c:	883a      	ldrh	r2, [r7, #0]
 8009c9e:	78f9      	ldrb	r1, [r7, #3]
 8009ca0:	f7f9 fe15 	bl	80038ce <HAL_PCD_EP_Open>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 f928 	bl	8009f00 <USBD_Get_USB_Status>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b084      	sub	sp, #16
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cd8:	78fa      	ldrb	r2, [r7, #3]
 8009cda:	4611      	mov	r1, r2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7f9 fe53 	bl	8003988 <HAL_PCD_EP_Close>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 f909 	bl	8009f00 <USBD_Get_USB_Status>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d16:	78fa      	ldrb	r2, [r7, #3]
 8009d18:	4611      	mov	r1, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7f9 fefb 	bl	8003b16 <HAL_PCD_EP_SetStall>
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d24:	7bfb      	ldrb	r3, [r7, #15]
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f8ea 	bl	8009f00 <USBD_Get_USB_Status>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d54:	78fa      	ldrb	r2, [r7, #3]
 8009d56:	4611      	mov	r1, r2
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7f9 ff3c 	bl	8003bd6 <HAL_PCD_EP_ClrStall>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d62:	7bfb      	ldrb	r3, [r7, #15]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 f8cb 	bl	8009f00 <USBD_Get_USB_Status>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	460b      	mov	r3, r1
 8009d82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	da0b      	bge.n	8009dac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d94:	78fb      	ldrb	r3, [r7, #3]
 8009d96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d9a:	68f9      	ldr	r1, [r7, #12]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	00db      	lsls	r3, r3, #3
 8009da4:	440b      	add	r3, r1
 8009da6:	3312      	adds	r3, #18
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	e00b      	b.n	8009dc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009db2:	68f9      	ldr	r1, [r7, #12]
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	440b      	add	r3, r1
 8009dbe:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009dc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bc80      	pop	{r7}
 8009dcc:	4770      	bx	lr

08009dce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dce:	b580      	push	{r7, lr}
 8009dd0:	b084      	sub	sp, #16
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009de8:	78fa      	ldrb	r2, [r7, #3]
 8009dea:	4611      	mov	r1, r2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7f9 fd4a 	bl	8003886 <HAL_PCD_SetAddress>
 8009df2:	4603      	mov	r3, r0
 8009df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 f881 	bl	8009f00 <USBD_Get_USB_Status>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	607a      	str	r2, [r7, #4]
 8009e16:	461a      	mov	r2, r3
 8009e18:	460b      	mov	r3, r1
 8009e1a:	72fb      	strb	r3, [r7, #11]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e2e:	893b      	ldrh	r3, [r7, #8]
 8009e30:	7af9      	ldrb	r1, [r7, #11]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	f7f9 fe38 	bl	8003aa8 <HAL_PCD_EP_Transmit>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f85e 	bl	8009f00 <USBD_Get_USB_Status>
 8009e44:	4603      	mov	r3, r0
 8009e46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e48:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3718      	adds	r7, #24
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b086      	sub	sp, #24
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	60f8      	str	r0, [r7, #12]
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	460b      	mov	r3, r1
 8009e60:	72fb      	strb	r3, [r7, #11]
 8009e62:	4613      	mov	r3, r2
 8009e64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e66:	2300      	movs	r3, #0
 8009e68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e74:	893b      	ldrh	r3, [r7, #8]
 8009e76:	7af9      	ldrb	r1, [r7, #11]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	f7f9 fdcd 	bl	8003a18 <HAL_PCD_EP_Receive>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 f83b 	bl	8009f00 <USBD_Get_USB_Status>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009eaa:	78fa      	ldrb	r2, [r7, #3]
 8009eac:	4611      	mov	r1, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7f9 fde3 	bl	8003a7a <HAL_PCD_EP_GetRxCount>
 8009eb4:	4603      	mov	r3, r0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
	...

08009ec0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ec8:	4b02      	ldr	r3, [pc, #8]	@ (8009ed4 <USBD_static_malloc+0x14>)
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bc80      	pop	{r7}
 8009ed2:	4770      	bx	lr
 8009ed4:	20001424 	.word	0x20001424

08009ed8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]

}
 8009ee0:	bf00      	nop
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bc80      	pop	{r7}
 8009ee8:	4770      	bx	lr

08009eea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bc80      	pop	{r7}
 8009efe:	4770      	bx	lr

08009f00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b085      	sub	sp, #20
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f0e:	79fb      	ldrb	r3, [r7, #7]
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d817      	bhi.n	8009f44 <USBD_Get_USB_Status+0x44>
 8009f14:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <USBD_Get_USB_Status+0x1c>)
 8009f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1a:	bf00      	nop
 8009f1c:	08009f2d 	.word	0x08009f2d
 8009f20:	08009f33 	.word	0x08009f33
 8009f24:	08009f39 	.word	0x08009f39
 8009f28:	08009f3f 	.word	0x08009f3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f30:	e00b      	b.n	8009f4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f32:	2302      	movs	r3, #2
 8009f34:	73fb      	strb	r3, [r7, #15]
    break;
 8009f36:	e008      	b.n	8009f4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3c:	e005      	b.n	8009f4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f3e:	2302      	movs	r3, #2
 8009f40:	73fb      	strb	r3, [r7, #15]
    break;
 8009f42:	e002      	b.n	8009f4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f44:	2302      	movs	r3, #2
 8009f46:	73fb      	strb	r3, [r7, #15]
    break;
 8009f48:	bf00      	nop
  }
  return usb_status;
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bc80      	pop	{r7}
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop

08009f58 <__cvt>:
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f5e:	461d      	mov	r5, r3
 8009f60:	bfbb      	ittet	lt
 8009f62:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009f66:	461d      	movlt	r5, r3
 8009f68:	2300      	movge	r3, #0
 8009f6a:	232d      	movlt	r3, #45	@ 0x2d
 8009f6c:	b088      	sub	sp, #32
 8009f6e:	4614      	mov	r4, r2
 8009f70:	bfb8      	it	lt
 8009f72:	4614      	movlt	r4, r2
 8009f74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f76:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009f78:	7013      	strb	r3, [r2, #0]
 8009f7a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009f80:	f023 0820 	bic.w	r8, r3, #32
 8009f84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f88:	d005      	beq.n	8009f96 <__cvt+0x3e>
 8009f8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f8e:	d100      	bne.n	8009f92 <__cvt+0x3a>
 8009f90:	3601      	adds	r6, #1
 8009f92:	2302      	movs	r3, #2
 8009f94:	e000      	b.n	8009f98 <__cvt+0x40>
 8009f96:	2303      	movs	r3, #3
 8009f98:	aa07      	add	r2, sp, #28
 8009f9a:	9204      	str	r2, [sp, #16]
 8009f9c:	aa06      	add	r2, sp, #24
 8009f9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009fa2:	e9cd 3600 	strd	r3, r6, [sp]
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	462b      	mov	r3, r5
 8009faa:	f000 ff61 	bl	800ae70 <_dtoa_r>
 8009fae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	d119      	bne.n	8009fea <__cvt+0x92>
 8009fb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fb8:	07db      	lsls	r3, r3, #31
 8009fba:	d50e      	bpl.n	8009fda <__cvt+0x82>
 8009fbc:	eb00 0906 	add.w	r9, r0, r6
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 fcf8 	bl	80009bc <__aeabi_dcmpeq>
 8009fcc:	b108      	cbz	r0, 8009fd2 <__cvt+0x7a>
 8009fce:	f8cd 901c 	str.w	r9, [sp, #28]
 8009fd2:	2230      	movs	r2, #48	@ 0x30
 8009fd4:	9b07      	ldr	r3, [sp, #28]
 8009fd6:	454b      	cmp	r3, r9
 8009fd8:	d31e      	bcc.n	800a018 <__cvt+0xc0>
 8009fda:	4638      	mov	r0, r7
 8009fdc:	9b07      	ldr	r3, [sp, #28]
 8009fde:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009fe0:	1bdb      	subs	r3, r3, r7
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	b008      	add	sp, #32
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009fee:	eb00 0906 	add.w	r9, r0, r6
 8009ff2:	d1e5      	bne.n	8009fc0 <__cvt+0x68>
 8009ff4:	7803      	ldrb	r3, [r0, #0]
 8009ff6:	2b30      	cmp	r3, #48	@ 0x30
 8009ff8:	d10a      	bne.n	800a010 <__cvt+0xb8>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	f7f6 fcdb 	bl	80009bc <__aeabi_dcmpeq>
 800a006:	b918      	cbnz	r0, 800a010 <__cvt+0xb8>
 800a008:	f1c6 0601 	rsb	r6, r6, #1
 800a00c:	f8ca 6000 	str.w	r6, [sl]
 800a010:	f8da 3000 	ldr.w	r3, [sl]
 800a014:	4499      	add	r9, r3
 800a016:	e7d3      	b.n	8009fc0 <__cvt+0x68>
 800a018:	1c59      	adds	r1, r3, #1
 800a01a:	9107      	str	r1, [sp, #28]
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e7d9      	b.n	8009fd4 <__cvt+0x7c>

0800a020 <__exponent>:
 800a020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a022:	2900      	cmp	r1, #0
 800a024:	bfb6      	itet	lt
 800a026:	232d      	movlt	r3, #45	@ 0x2d
 800a028:	232b      	movge	r3, #43	@ 0x2b
 800a02a:	4249      	neglt	r1, r1
 800a02c:	2909      	cmp	r1, #9
 800a02e:	7002      	strb	r2, [r0, #0]
 800a030:	7043      	strb	r3, [r0, #1]
 800a032:	dd29      	ble.n	800a088 <__exponent+0x68>
 800a034:	f10d 0307 	add.w	r3, sp, #7
 800a038:	461d      	mov	r5, r3
 800a03a:	270a      	movs	r7, #10
 800a03c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a040:	461a      	mov	r2, r3
 800a042:	fb07 1416 	mls	r4, r7, r6, r1
 800a046:	3430      	adds	r4, #48	@ 0x30
 800a048:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a04c:	460c      	mov	r4, r1
 800a04e:	2c63      	cmp	r4, #99	@ 0x63
 800a050:	4631      	mov	r1, r6
 800a052:	f103 33ff 	add.w	r3, r3, #4294967295
 800a056:	dcf1      	bgt.n	800a03c <__exponent+0x1c>
 800a058:	3130      	adds	r1, #48	@ 0x30
 800a05a:	1e94      	subs	r4, r2, #2
 800a05c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a060:	4623      	mov	r3, r4
 800a062:	1c41      	adds	r1, r0, #1
 800a064:	42ab      	cmp	r3, r5
 800a066:	d30a      	bcc.n	800a07e <__exponent+0x5e>
 800a068:	f10d 0309 	add.w	r3, sp, #9
 800a06c:	1a9b      	subs	r3, r3, r2
 800a06e:	42ac      	cmp	r4, r5
 800a070:	bf88      	it	hi
 800a072:	2300      	movhi	r3, #0
 800a074:	3302      	adds	r3, #2
 800a076:	4403      	add	r3, r0
 800a078:	1a18      	subs	r0, r3, r0
 800a07a:	b003      	add	sp, #12
 800a07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a07e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a082:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a086:	e7ed      	b.n	800a064 <__exponent+0x44>
 800a088:	2330      	movs	r3, #48	@ 0x30
 800a08a:	3130      	adds	r1, #48	@ 0x30
 800a08c:	7083      	strb	r3, [r0, #2]
 800a08e:	70c1      	strb	r1, [r0, #3]
 800a090:	1d03      	adds	r3, r0, #4
 800a092:	e7f1      	b.n	800a078 <__exponent+0x58>

0800a094 <_printf_float>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	b091      	sub	sp, #68	@ 0x44
 800a09a:	460c      	mov	r4, r1
 800a09c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	461f      	mov	r7, r3
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	f000 fdc5 	bl	800ac34 <_localeconv_r>
 800a0aa:	6803      	ldr	r3, [r0, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	9308      	str	r3, [sp, #32]
 800a0b0:	f7f6 f858 	bl	8000164 <strlen>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0bc:	9009      	str	r0, [sp, #36]	@ 0x24
 800a0be:	3307      	adds	r3, #7
 800a0c0:	f023 0307 	bic.w	r3, r3, #7
 800a0c4:	f103 0208 	add.w	r2, r3, #8
 800a0c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0cc:	f8d4 b000 	ldr.w	fp, [r4]
 800a0d0:	f8c8 2000 	str.w	r2, [r8]
 800a0d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0ee:	4b9c      	ldr	r3, [pc, #624]	@ (800a360 <_printf_float+0x2cc>)
 800a0f0:	f7f6 fc96 	bl	8000a20 <__aeabi_dcmpun>
 800a0f4:	bb70      	cbnz	r0, 800a154 <_printf_float+0xc0>
 800a0f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a0fe:	4b98      	ldr	r3, [pc, #608]	@ (800a360 <_printf_float+0x2cc>)
 800a100:	f7f6 fc70 	bl	80009e4 <__aeabi_dcmple>
 800a104:	bb30      	cbnz	r0, 800a154 <_printf_float+0xc0>
 800a106:	2200      	movs	r2, #0
 800a108:	2300      	movs	r3, #0
 800a10a:	4640      	mov	r0, r8
 800a10c:	4649      	mov	r1, r9
 800a10e:	f7f6 fc5f 	bl	80009d0 <__aeabi_dcmplt>
 800a112:	b110      	cbz	r0, 800a11a <_printf_float+0x86>
 800a114:	232d      	movs	r3, #45	@ 0x2d
 800a116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a11a:	4a92      	ldr	r2, [pc, #584]	@ (800a364 <_printf_float+0x2d0>)
 800a11c:	4b92      	ldr	r3, [pc, #584]	@ (800a368 <_printf_float+0x2d4>)
 800a11e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a122:	bf94      	ite	ls
 800a124:	4690      	movls	r8, r2
 800a126:	4698      	movhi	r8, r3
 800a128:	2303      	movs	r3, #3
 800a12a:	f04f 0900 	mov.w	r9, #0
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	f02b 0304 	bic.w	r3, fp, #4
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	4633      	mov	r3, r6
 800a138:	4621      	mov	r1, r4
 800a13a:	4628      	mov	r0, r5
 800a13c:	9700      	str	r7, [sp, #0]
 800a13e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a140:	f000 f9d4 	bl	800a4ec <_printf_common>
 800a144:	3001      	adds	r0, #1
 800a146:	f040 8090 	bne.w	800a26a <_printf_float+0x1d6>
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295
 800a14e:	b011      	add	sp, #68	@ 0x44
 800a150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a154:	4642      	mov	r2, r8
 800a156:	464b      	mov	r3, r9
 800a158:	4640      	mov	r0, r8
 800a15a:	4649      	mov	r1, r9
 800a15c:	f7f6 fc60 	bl	8000a20 <__aeabi_dcmpun>
 800a160:	b148      	cbz	r0, 800a176 <_printf_float+0xe2>
 800a162:	464b      	mov	r3, r9
 800a164:	2b00      	cmp	r3, #0
 800a166:	bfb8      	it	lt
 800a168:	232d      	movlt	r3, #45	@ 0x2d
 800a16a:	4a80      	ldr	r2, [pc, #512]	@ (800a36c <_printf_float+0x2d8>)
 800a16c:	bfb8      	it	lt
 800a16e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a172:	4b7f      	ldr	r3, [pc, #508]	@ (800a370 <_printf_float+0x2dc>)
 800a174:	e7d3      	b.n	800a11e <_printf_float+0x8a>
 800a176:	6863      	ldr	r3, [r4, #4]
 800a178:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	d13f      	bne.n	800a200 <_printf_float+0x16c>
 800a180:	2306      	movs	r3, #6
 800a182:	6063      	str	r3, [r4, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	9206      	str	r2, [sp, #24]
 800a18e:	aa0e      	add	r2, sp, #56	@ 0x38
 800a190:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a194:	aa0d      	add	r2, sp, #52	@ 0x34
 800a196:	9203      	str	r2, [sp, #12]
 800a198:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a19c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a1a0:	6863      	ldr	r3, [r4, #4]
 800a1a2:	4642      	mov	r2, r8
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	464b      	mov	r3, r9
 800a1aa:	910a      	str	r1, [sp, #40]	@ 0x28
 800a1ac:	f7ff fed4 	bl	8009f58 <__cvt>
 800a1b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	2947      	cmp	r1, #71	@ 0x47
 800a1b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a1b8:	d128      	bne.n	800a20c <_printf_float+0x178>
 800a1ba:	1cc8      	adds	r0, r1, #3
 800a1bc:	db02      	blt.n	800a1c4 <_printf_float+0x130>
 800a1be:	6863      	ldr	r3, [r4, #4]
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	dd40      	ble.n	800a246 <_printf_float+0x1b2>
 800a1c4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1c8:	fa5f fa8a 	uxtb.w	sl, sl
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	3901      	subs	r1, #1
 800a1d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1d4:	910d      	str	r1, [sp, #52]	@ 0x34
 800a1d6:	f7ff ff23 	bl	800a020 <__exponent>
 800a1da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1dc:	4681      	mov	r9, r0
 800a1de:	1813      	adds	r3, r2, r0
 800a1e0:	2a01      	cmp	r2, #1
 800a1e2:	6123      	str	r3, [r4, #16]
 800a1e4:	dc02      	bgt.n	800a1ec <_printf_float+0x158>
 800a1e6:	6822      	ldr	r2, [r4, #0]
 800a1e8:	07d2      	lsls	r2, r2, #31
 800a1ea:	d501      	bpl.n	800a1f0 <_printf_float+0x15c>
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d09e      	beq.n	800a136 <_printf_float+0xa2>
 800a1f8:	232d      	movs	r3, #45	@ 0x2d
 800a1fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1fe:	e79a      	b.n	800a136 <_printf_float+0xa2>
 800a200:	2947      	cmp	r1, #71	@ 0x47
 800a202:	d1bf      	bne.n	800a184 <_printf_float+0xf0>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1bd      	bne.n	800a184 <_printf_float+0xf0>
 800a208:	2301      	movs	r3, #1
 800a20a:	e7ba      	b.n	800a182 <_printf_float+0xee>
 800a20c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a210:	d9dc      	bls.n	800a1cc <_printf_float+0x138>
 800a212:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a216:	d118      	bne.n	800a24a <_printf_float+0x1b6>
 800a218:	2900      	cmp	r1, #0
 800a21a:	6863      	ldr	r3, [r4, #4]
 800a21c:	dd0b      	ble.n	800a236 <_printf_float+0x1a2>
 800a21e:	6121      	str	r1, [r4, #16]
 800a220:	b913      	cbnz	r3, 800a228 <_printf_float+0x194>
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	07d0      	lsls	r0, r2, #31
 800a226:	d502      	bpl.n	800a22e <_printf_float+0x19a>
 800a228:	3301      	adds	r3, #1
 800a22a:	440b      	add	r3, r1
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	f04f 0900 	mov.w	r9, #0
 800a232:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a234:	e7dc      	b.n	800a1f0 <_printf_float+0x15c>
 800a236:	b913      	cbnz	r3, 800a23e <_printf_float+0x1aa>
 800a238:	6822      	ldr	r2, [r4, #0]
 800a23a:	07d2      	lsls	r2, r2, #31
 800a23c:	d501      	bpl.n	800a242 <_printf_float+0x1ae>
 800a23e:	3302      	adds	r3, #2
 800a240:	e7f4      	b.n	800a22c <_printf_float+0x198>
 800a242:	2301      	movs	r3, #1
 800a244:	e7f2      	b.n	800a22c <_printf_float+0x198>
 800a246:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a24a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a24c:	4299      	cmp	r1, r3
 800a24e:	db05      	blt.n	800a25c <_printf_float+0x1c8>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	6121      	str	r1, [r4, #16]
 800a254:	07d8      	lsls	r0, r3, #31
 800a256:	d5ea      	bpl.n	800a22e <_printf_float+0x19a>
 800a258:	1c4b      	adds	r3, r1, #1
 800a25a:	e7e7      	b.n	800a22c <_printf_float+0x198>
 800a25c:	2900      	cmp	r1, #0
 800a25e:	bfcc      	ite	gt
 800a260:	2201      	movgt	r2, #1
 800a262:	f1c1 0202 	rsble	r2, r1, #2
 800a266:	4413      	add	r3, r2
 800a268:	e7e0      	b.n	800a22c <_printf_float+0x198>
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	055a      	lsls	r2, r3, #21
 800a26e:	d407      	bmi.n	800a280 <_printf_float+0x1ec>
 800a270:	6923      	ldr	r3, [r4, #16]
 800a272:	4642      	mov	r2, r8
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	d12b      	bne.n	800a2d6 <_printf_float+0x242>
 800a27e:	e764      	b.n	800a14a <_printf_float+0xb6>
 800a280:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a284:	f240 80dc 	bls.w	800a440 <_printf_float+0x3ac>
 800a288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a28c:	2200      	movs	r2, #0
 800a28e:	2300      	movs	r3, #0
 800a290:	f7f6 fb94 	bl	80009bc <__aeabi_dcmpeq>
 800a294:	2800      	cmp	r0, #0
 800a296:	d033      	beq.n	800a300 <_printf_float+0x26c>
 800a298:	2301      	movs	r3, #1
 800a29a:	4631      	mov	r1, r6
 800a29c:	4628      	mov	r0, r5
 800a29e:	4a35      	ldr	r2, [pc, #212]	@ (800a374 <_printf_float+0x2e0>)
 800a2a0:	47b8      	blx	r7
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f43f af51 	beq.w	800a14a <_printf_float+0xb6>
 800a2a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a2ac:	4543      	cmp	r3, r8
 800a2ae:	db02      	blt.n	800a2b6 <_printf_float+0x222>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	07d8      	lsls	r0, r3, #31
 800a2b4:	d50f      	bpl.n	800a2d6 <_printf_float+0x242>
 800a2b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2ba:	4631      	mov	r1, r6
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b8      	blx	r7
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	f43f af42 	beq.w	800a14a <_printf_float+0xb6>
 800a2c6:	f04f 0900 	mov.w	r9, #0
 800a2ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2ce:	f104 0a1a 	add.w	sl, r4, #26
 800a2d2:	45c8      	cmp	r8, r9
 800a2d4:	dc09      	bgt.n	800a2ea <_printf_float+0x256>
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	079b      	lsls	r3, r3, #30
 800a2da:	f100 8102 	bmi.w	800a4e2 <_printf_float+0x44e>
 800a2de:	68e0      	ldr	r0, [r4, #12]
 800a2e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2e2:	4298      	cmp	r0, r3
 800a2e4:	bfb8      	it	lt
 800a2e6:	4618      	movlt	r0, r3
 800a2e8:	e731      	b.n	800a14e <_printf_float+0xba>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	4652      	mov	r2, sl
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	47b8      	blx	r7
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	f43f af28 	beq.w	800a14a <_printf_float+0xb6>
 800a2fa:	f109 0901 	add.w	r9, r9, #1
 800a2fe:	e7e8      	b.n	800a2d2 <_printf_float+0x23e>
 800a300:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a302:	2b00      	cmp	r3, #0
 800a304:	dc38      	bgt.n	800a378 <_printf_float+0x2e4>
 800a306:	2301      	movs	r3, #1
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	4a19      	ldr	r2, [pc, #100]	@ (800a374 <_printf_float+0x2e0>)
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	f43f af1a 	beq.w	800a14a <_printf_float+0xb6>
 800a316:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a31a:	ea59 0303 	orrs.w	r3, r9, r3
 800a31e:	d102      	bne.n	800a326 <_printf_float+0x292>
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	07d9      	lsls	r1, r3, #31
 800a324:	d5d7      	bpl.n	800a2d6 <_printf_float+0x242>
 800a326:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a32a:	4631      	mov	r1, r6
 800a32c:	4628      	mov	r0, r5
 800a32e:	47b8      	blx	r7
 800a330:	3001      	adds	r0, #1
 800a332:	f43f af0a 	beq.w	800a14a <_printf_float+0xb6>
 800a336:	f04f 0a00 	mov.w	sl, #0
 800a33a:	f104 0b1a 	add.w	fp, r4, #26
 800a33e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a340:	425b      	negs	r3, r3
 800a342:	4553      	cmp	r3, sl
 800a344:	dc01      	bgt.n	800a34a <_printf_float+0x2b6>
 800a346:	464b      	mov	r3, r9
 800a348:	e793      	b.n	800a272 <_printf_float+0x1de>
 800a34a:	2301      	movs	r3, #1
 800a34c:	465a      	mov	r2, fp
 800a34e:	4631      	mov	r1, r6
 800a350:	4628      	mov	r0, r5
 800a352:	47b8      	blx	r7
 800a354:	3001      	adds	r0, #1
 800a356:	f43f aef8 	beq.w	800a14a <_printf_float+0xb6>
 800a35a:	f10a 0a01 	add.w	sl, sl, #1
 800a35e:	e7ee      	b.n	800a33e <_printf_float+0x2aa>
 800a360:	7fefffff 	.word	0x7fefffff
 800a364:	0800cb5a 	.word	0x0800cb5a
 800a368:	0800cb5e 	.word	0x0800cb5e
 800a36c:	0800cb62 	.word	0x0800cb62
 800a370:	0800cb66 	.word	0x0800cb66
 800a374:	0800cb6a 	.word	0x0800cb6a
 800a378:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a37a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a37e:	4553      	cmp	r3, sl
 800a380:	bfa8      	it	ge
 800a382:	4653      	movge	r3, sl
 800a384:	2b00      	cmp	r3, #0
 800a386:	4699      	mov	r9, r3
 800a388:	dc36      	bgt.n	800a3f8 <_printf_float+0x364>
 800a38a:	f04f 0b00 	mov.w	fp, #0
 800a38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a392:	f104 021a 	add.w	r2, r4, #26
 800a396:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a398:	930a      	str	r3, [sp, #40]	@ 0x28
 800a39a:	eba3 0309 	sub.w	r3, r3, r9
 800a39e:	455b      	cmp	r3, fp
 800a3a0:	dc31      	bgt.n	800a406 <_printf_float+0x372>
 800a3a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3a4:	459a      	cmp	sl, r3
 800a3a6:	dc3a      	bgt.n	800a41e <_printf_float+0x38a>
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	07da      	lsls	r2, r3, #31
 800a3ac:	d437      	bmi.n	800a41e <_printf_float+0x38a>
 800a3ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3b0:	ebaa 0903 	sub.w	r9, sl, r3
 800a3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3b6:	ebaa 0303 	sub.w	r3, sl, r3
 800a3ba:	4599      	cmp	r9, r3
 800a3bc:	bfa8      	it	ge
 800a3be:	4699      	movge	r9, r3
 800a3c0:	f1b9 0f00 	cmp.w	r9, #0
 800a3c4:	dc33      	bgt.n	800a42e <_printf_float+0x39a>
 800a3c6:	f04f 0800 	mov.w	r8, #0
 800a3ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ce:	f104 0b1a 	add.w	fp, r4, #26
 800a3d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3d4:	ebaa 0303 	sub.w	r3, sl, r3
 800a3d8:	eba3 0309 	sub.w	r3, r3, r9
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	f77f af7a 	ble.w	800a2d6 <_printf_float+0x242>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	465a      	mov	r2, fp
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f43f aeac 	beq.w	800a14a <_printf_float+0xb6>
 800a3f2:	f108 0801 	add.w	r8, r8, #1
 800a3f6:	e7ec      	b.n	800a3d2 <_printf_float+0x33e>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	d1c2      	bne.n	800a38a <_printf_float+0x2f6>
 800a404:	e6a1      	b.n	800a14a <_printf_float+0xb6>
 800a406:	2301      	movs	r3, #1
 800a408:	4631      	mov	r1, r6
 800a40a:	4628      	mov	r0, r5
 800a40c:	920a      	str	r2, [sp, #40]	@ 0x28
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	f43f ae9a 	beq.w	800a14a <_printf_float+0xb6>
 800a416:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a418:	f10b 0b01 	add.w	fp, fp, #1
 800a41c:	e7bb      	b.n	800a396 <_printf_float+0x302>
 800a41e:	4631      	mov	r1, r6
 800a420:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	d1c0      	bne.n	800a3ae <_printf_float+0x31a>
 800a42c:	e68d      	b.n	800a14a <_printf_float+0xb6>
 800a42e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a430:	464b      	mov	r3, r9
 800a432:	4631      	mov	r1, r6
 800a434:	4628      	mov	r0, r5
 800a436:	4442      	add	r2, r8
 800a438:	47b8      	blx	r7
 800a43a:	3001      	adds	r0, #1
 800a43c:	d1c3      	bne.n	800a3c6 <_printf_float+0x332>
 800a43e:	e684      	b.n	800a14a <_printf_float+0xb6>
 800a440:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a444:	f1ba 0f01 	cmp.w	sl, #1
 800a448:	dc01      	bgt.n	800a44e <_printf_float+0x3ba>
 800a44a:	07db      	lsls	r3, r3, #31
 800a44c:	d536      	bpl.n	800a4bc <_printf_float+0x428>
 800a44e:	2301      	movs	r3, #1
 800a450:	4642      	mov	r2, r8
 800a452:	4631      	mov	r1, r6
 800a454:	4628      	mov	r0, r5
 800a456:	47b8      	blx	r7
 800a458:	3001      	adds	r0, #1
 800a45a:	f43f ae76 	beq.w	800a14a <_printf_float+0xb6>
 800a45e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	f43f ae6e 	beq.w	800a14a <_printf_float+0xb6>
 800a46e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a472:	2200      	movs	r2, #0
 800a474:	2300      	movs	r3, #0
 800a476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a47a:	f7f6 fa9f 	bl	80009bc <__aeabi_dcmpeq>
 800a47e:	b9c0      	cbnz	r0, 800a4b2 <_printf_float+0x41e>
 800a480:	4653      	mov	r3, sl
 800a482:	f108 0201 	add.w	r2, r8, #1
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	d10c      	bne.n	800a4aa <_printf_float+0x416>
 800a490:	e65b      	b.n	800a14a <_printf_float+0xb6>
 800a492:	2301      	movs	r3, #1
 800a494:	465a      	mov	r2, fp
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	f43f ae54 	beq.w	800a14a <_printf_float+0xb6>
 800a4a2:	f108 0801 	add.w	r8, r8, #1
 800a4a6:	45d0      	cmp	r8, sl
 800a4a8:	dbf3      	blt.n	800a492 <_printf_float+0x3fe>
 800a4aa:	464b      	mov	r3, r9
 800a4ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4b0:	e6e0      	b.n	800a274 <_printf_float+0x1e0>
 800a4b2:	f04f 0800 	mov.w	r8, #0
 800a4b6:	f104 0b1a 	add.w	fp, r4, #26
 800a4ba:	e7f4      	b.n	800a4a6 <_printf_float+0x412>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	4642      	mov	r2, r8
 800a4c0:	e7e1      	b.n	800a486 <_printf_float+0x3f2>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	464a      	mov	r2, r9
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b8      	blx	r7
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f43f ae3c 	beq.w	800a14a <_printf_float+0xb6>
 800a4d2:	f108 0801 	add.w	r8, r8, #1
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a4da:	1a5b      	subs	r3, r3, r1
 800a4dc:	4543      	cmp	r3, r8
 800a4de:	dcf0      	bgt.n	800a4c2 <_printf_float+0x42e>
 800a4e0:	e6fd      	b.n	800a2de <_printf_float+0x24a>
 800a4e2:	f04f 0800 	mov.w	r8, #0
 800a4e6:	f104 0919 	add.w	r9, r4, #25
 800a4ea:	e7f4      	b.n	800a4d6 <_printf_float+0x442>

0800a4ec <_printf_common>:
 800a4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	4698      	mov	r8, r3
 800a4f4:	688a      	ldr	r2, [r1, #8]
 800a4f6:	690b      	ldr	r3, [r1, #16]
 800a4f8:	4607      	mov	r7, r0
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	bfb8      	it	lt
 800a4fe:	4613      	movlt	r3, r2
 800a500:	6033      	str	r3, [r6, #0]
 800a502:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a506:	460c      	mov	r4, r1
 800a508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a50c:	b10a      	cbz	r2, 800a512 <_printf_common+0x26>
 800a50e:	3301      	adds	r3, #1
 800a510:	6033      	str	r3, [r6, #0]
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	0699      	lsls	r1, r3, #26
 800a516:	bf42      	ittt	mi
 800a518:	6833      	ldrmi	r3, [r6, #0]
 800a51a:	3302      	addmi	r3, #2
 800a51c:	6033      	strmi	r3, [r6, #0]
 800a51e:	6825      	ldr	r5, [r4, #0]
 800a520:	f015 0506 	ands.w	r5, r5, #6
 800a524:	d106      	bne.n	800a534 <_printf_common+0x48>
 800a526:	f104 0a19 	add.w	sl, r4, #25
 800a52a:	68e3      	ldr	r3, [r4, #12]
 800a52c:	6832      	ldr	r2, [r6, #0]
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	42ab      	cmp	r3, r5
 800a532:	dc2b      	bgt.n	800a58c <_printf_common+0xa0>
 800a534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	3b00      	subs	r3, #0
 800a53c:	bf18      	it	ne
 800a53e:	2301      	movne	r3, #1
 800a540:	0692      	lsls	r2, r2, #26
 800a542:	d430      	bmi.n	800a5a6 <_printf_common+0xba>
 800a544:	4641      	mov	r1, r8
 800a546:	4638      	mov	r0, r7
 800a548:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a54c:	47c8      	blx	r9
 800a54e:	3001      	adds	r0, #1
 800a550:	d023      	beq.n	800a59a <_printf_common+0xae>
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	6922      	ldr	r2, [r4, #16]
 800a556:	f003 0306 	and.w	r3, r3, #6
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	bf14      	ite	ne
 800a55e:	2500      	movne	r5, #0
 800a560:	6833      	ldreq	r3, [r6, #0]
 800a562:	f04f 0600 	mov.w	r6, #0
 800a566:	bf08      	it	eq
 800a568:	68e5      	ldreq	r5, [r4, #12]
 800a56a:	f104 041a 	add.w	r4, r4, #26
 800a56e:	bf08      	it	eq
 800a570:	1aed      	subeq	r5, r5, r3
 800a572:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a576:	bf08      	it	eq
 800a578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a57c:	4293      	cmp	r3, r2
 800a57e:	bfc4      	itt	gt
 800a580:	1a9b      	subgt	r3, r3, r2
 800a582:	18ed      	addgt	r5, r5, r3
 800a584:	42b5      	cmp	r5, r6
 800a586:	d11a      	bne.n	800a5be <_printf_common+0xd2>
 800a588:	2000      	movs	r0, #0
 800a58a:	e008      	b.n	800a59e <_printf_common+0xb2>
 800a58c:	2301      	movs	r3, #1
 800a58e:	4652      	mov	r2, sl
 800a590:	4641      	mov	r1, r8
 800a592:	4638      	mov	r0, r7
 800a594:	47c8      	blx	r9
 800a596:	3001      	adds	r0, #1
 800a598:	d103      	bne.n	800a5a2 <_printf_common+0xb6>
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	3501      	adds	r5, #1
 800a5a4:	e7c1      	b.n	800a52a <_printf_common+0x3e>
 800a5a6:	2030      	movs	r0, #48	@ 0x30
 800a5a8:	18e1      	adds	r1, r4, r3
 800a5aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5ae:	1c5a      	adds	r2, r3, #1
 800a5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5b4:	4422      	add	r2, r4
 800a5b6:	3302      	adds	r3, #2
 800a5b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5bc:	e7c2      	b.n	800a544 <_printf_common+0x58>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4641      	mov	r1, r8
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	47c8      	blx	r9
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d0e6      	beq.n	800a59a <_printf_common+0xae>
 800a5cc:	3601      	adds	r6, #1
 800a5ce:	e7d9      	b.n	800a584 <_printf_common+0x98>

0800a5d0 <_printf_i>:
 800a5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d4:	7e0f      	ldrb	r7, [r1, #24]
 800a5d6:	4691      	mov	r9, r2
 800a5d8:	2f78      	cmp	r7, #120	@ 0x78
 800a5da:	4680      	mov	r8, r0
 800a5dc:	460c      	mov	r4, r1
 800a5de:	469a      	mov	sl, r3
 800a5e0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5e6:	d807      	bhi.n	800a5f8 <_printf_i+0x28>
 800a5e8:	2f62      	cmp	r7, #98	@ 0x62
 800a5ea:	d80a      	bhi.n	800a602 <_printf_i+0x32>
 800a5ec:	2f00      	cmp	r7, #0
 800a5ee:	f000 80d3 	beq.w	800a798 <_printf_i+0x1c8>
 800a5f2:	2f58      	cmp	r7, #88	@ 0x58
 800a5f4:	f000 80ba 	beq.w	800a76c <_printf_i+0x19c>
 800a5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a600:	e03a      	b.n	800a678 <_printf_i+0xa8>
 800a602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a606:	2b15      	cmp	r3, #21
 800a608:	d8f6      	bhi.n	800a5f8 <_printf_i+0x28>
 800a60a:	a101      	add	r1, pc, #4	@ (adr r1, 800a610 <_printf_i+0x40>)
 800a60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a610:	0800a669 	.word	0x0800a669
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a5f9 	.word	0x0800a5f9
 800a61c:	0800a5f9 	.word	0x0800a5f9
 800a620:	0800a5f9 	.word	0x0800a5f9
 800a624:	0800a5f9 	.word	0x0800a5f9
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a5f9 	.word	0x0800a5f9
 800a630:	0800a5f9 	.word	0x0800a5f9
 800a634:	0800a5f9 	.word	0x0800a5f9
 800a638:	0800a5f9 	.word	0x0800a5f9
 800a63c:	0800a77f 	.word	0x0800a77f
 800a640:	0800a6a7 	.word	0x0800a6a7
 800a644:	0800a739 	.word	0x0800a739
 800a648:	0800a5f9 	.word	0x0800a5f9
 800a64c:	0800a5f9 	.word	0x0800a5f9
 800a650:	0800a7a1 	.word	0x0800a7a1
 800a654:	0800a5f9 	.word	0x0800a5f9
 800a658:	0800a6a7 	.word	0x0800a6a7
 800a65c:	0800a5f9 	.word	0x0800a5f9
 800a660:	0800a5f9 	.word	0x0800a5f9
 800a664:	0800a741 	.word	0x0800a741
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6032      	str	r2, [r6, #0]
 800a670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a678:	2301      	movs	r3, #1
 800a67a:	e09e      	b.n	800a7ba <_printf_i+0x1ea>
 800a67c:	6833      	ldr	r3, [r6, #0]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	6031      	str	r1, [r6, #0]
 800a684:	0606      	lsls	r6, r0, #24
 800a686:	d501      	bpl.n	800a68c <_printf_i+0xbc>
 800a688:	681d      	ldr	r5, [r3, #0]
 800a68a:	e003      	b.n	800a694 <_printf_i+0xc4>
 800a68c:	0645      	lsls	r5, r0, #25
 800a68e:	d5fb      	bpl.n	800a688 <_printf_i+0xb8>
 800a690:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a694:	2d00      	cmp	r5, #0
 800a696:	da03      	bge.n	800a6a0 <_printf_i+0xd0>
 800a698:	232d      	movs	r3, #45	@ 0x2d
 800a69a:	426d      	negs	r5, r5
 800a69c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a0:	230a      	movs	r3, #10
 800a6a2:	4859      	ldr	r0, [pc, #356]	@ (800a808 <_printf_i+0x238>)
 800a6a4:	e011      	b.n	800a6ca <_printf_i+0xfa>
 800a6a6:	6821      	ldr	r1, [r4, #0]
 800a6a8:	6833      	ldr	r3, [r6, #0]
 800a6aa:	0608      	lsls	r0, r1, #24
 800a6ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6b0:	d402      	bmi.n	800a6b8 <_printf_i+0xe8>
 800a6b2:	0649      	lsls	r1, r1, #25
 800a6b4:	bf48      	it	mi
 800a6b6:	b2ad      	uxthmi	r5, r5
 800a6b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6ba:	6033      	str	r3, [r6, #0]
 800a6bc:	bf14      	ite	ne
 800a6be:	230a      	movne	r3, #10
 800a6c0:	2308      	moveq	r3, #8
 800a6c2:	4851      	ldr	r0, [pc, #324]	@ (800a808 <_printf_i+0x238>)
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6ca:	6866      	ldr	r6, [r4, #4]
 800a6cc:	2e00      	cmp	r6, #0
 800a6ce:	bfa8      	it	ge
 800a6d0:	6821      	ldrge	r1, [r4, #0]
 800a6d2:	60a6      	str	r6, [r4, #8]
 800a6d4:	bfa4      	itt	ge
 800a6d6:	f021 0104 	bicge.w	r1, r1, #4
 800a6da:	6021      	strge	r1, [r4, #0]
 800a6dc:	b90d      	cbnz	r5, 800a6e2 <_printf_i+0x112>
 800a6de:	2e00      	cmp	r6, #0
 800a6e0:	d04b      	beq.n	800a77a <_printf_i+0x1aa>
 800a6e2:	4616      	mov	r6, r2
 800a6e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6e8:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ec:	5dc7      	ldrb	r7, [r0, r7]
 800a6ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6f2:	462f      	mov	r7, r5
 800a6f4:	42bb      	cmp	r3, r7
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	d9f4      	bls.n	800a6e4 <_printf_i+0x114>
 800a6fa:	2b08      	cmp	r3, #8
 800a6fc:	d10b      	bne.n	800a716 <_printf_i+0x146>
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	07df      	lsls	r7, r3, #31
 800a702:	d508      	bpl.n	800a716 <_printf_i+0x146>
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	6861      	ldr	r1, [r4, #4]
 800a708:	4299      	cmp	r1, r3
 800a70a:	bfde      	ittt	le
 800a70c:	2330      	movle	r3, #48	@ 0x30
 800a70e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a712:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a716:	1b92      	subs	r2, r2, r6
 800a718:	6122      	str	r2, [r4, #16]
 800a71a:	464b      	mov	r3, r9
 800a71c:	4621      	mov	r1, r4
 800a71e:	4640      	mov	r0, r8
 800a720:	f8cd a000 	str.w	sl, [sp]
 800a724:	aa03      	add	r2, sp, #12
 800a726:	f7ff fee1 	bl	800a4ec <_printf_common>
 800a72a:	3001      	adds	r0, #1
 800a72c:	d14a      	bne.n	800a7c4 <_printf_i+0x1f4>
 800a72e:	f04f 30ff 	mov.w	r0, #4294967295
 800a732:	b004      	add	sp, #16
 800a734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	f043 0320 	orr.w	r3, r3, #32
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	2778      	movs	r7, #120	@ 0x78
 800a742:	4832      	ldr	r0, [pc, #200]	@ (800a80c <_printf_i+0x23c>)
 800a744:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	6831      	ldr	r1, [r6, #0]
 800a74c:	061f      	lsls	r7, r3, #24
 800a74e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a752:	d402      	bmi.n	800a75a <_printf_i+0x18a>
 800a754:	065f      	lsls	r7, r3, #25
 800a756:	bf48      	it	mi
 800a758:	b2ad      	uxthmi	r5, r5
 800a75a:	6031      	str	r1, [r6, #0]
 800a75c:	07d9      	lsls	r1, r3, #31
 800a75e:	bf44      	itt	mi
 800a760:	f043 0320 	orrmi.w	r3, r3, #32
 800a764:	6023      	strmi	r3, [r4, #0]
 800a766:	b11d      	cbz	r5, 800a770 <_printf_i+0x1a0>
 800a768:	2310      	movs	r3, #16
 800a76a:	e7ab      	b.n	800a6c4 <_printf_i+0xf4>
 800a76c:	4826      	ldr	r0, [pc, #152]	@ (800a808 <_printf_i+0x238>)
 800a76e:	e7e9      	b.n	800a744 <_printf_i+0x174>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	f023 0320 	bic.w	r3, r3, #32
 800a776:	6023      	str	r3, [r4, #0]
 800a778:	e7f6      	b.n	800a768 <_printf_i+0x198>
 800a77a:	4616      	mov	r6, r2
 800a77c:	e7bd      	b.n	800a6fa <_printf_i+0x12a>
 800a77e:	6833      	ldr	r3, [r6, #0]
 800a780:	6825      	ldr	r5, [r4, #0]
 800a782:	1d18      	adds	r0, r3, #4
 800a784:	6961      	ldr	r1, [r4, #20]
 800a786:	6030      	str	r0, [r6, #0]
 800a788:	062e      	lsls	r6, r5, #24
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	d501      	bpl.n	800a792 <_printf_i+0x1c2>
 800a78e:	6019      	str	r1, [r3, #0]
 800a790:	e002      	b.n	800a798 <_printf_i+0x1c8>
 800a792:	0668      	lsls	r0, r5, #25
 800a794:	d5fb      	bpl.n	800a78e <_printf_i+0x1be>
 800a796:	8019      	strh	r1, [r3, #0]
 800a798:	2300      	movs	r3, #0
 800a79a:	4616      	mov	r6, r2
 800a79c:	6123      	str	r3, [r4, #16]
 800a79e:	e7bc      	b.n	800a71a <_printf_i+0x14a>
 800a7a0:	6833      	ldr	r3, [r6, #0]
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	1d1a      	adds	r2, r3, #4
 800a7a6:	6032      	str	r2, [r6, #0]
 800a7a8:	681e      	ldr	r6, [r3, #0]
 800a7aa:	6862      	ldr	r2, [r4, #4]
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f000 fab8 	bl	800ad22 <memchr>
 800a7b2:	b108      	cbz	r0, 800a7b8 <_printf_i+0x1e8>
 800a7b4:	1b80      	subs	r0, r0, r6
 800a7b6:	6060      	str	r0, [r4, #4]
 800a7b8:	6863      	ldr	r3, [r4, #4]
 800a7ba:	6123      	str	r3, [r4, #16]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7c2:	e7aa      	b.n	800a71a <_printf_i+0x14a>
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	6923      	ldr	r3, [r4, #16]
 800a7cc:	47d0      	blx	sl
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	d0ad      	beq.n	800a72e <_printf_i+0x15e>
 800a7d2:	6823      	ldr	r3, [r4, #0]
 800a7d4:	079b      	lsls	r3, r3, #30
 800a7d6:	d413      	bmi.n	800a800 <_printf_i+0x230>
 800a7d8:	68e0      	ldr	r0, [r4, #12]
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	4298      	cmp	r0, r3
 800a7de:	bfb8      	it	lt
 800a7e0:	4618      	movlt	r0, r3
 800a7e2:	e7a6      	b.n	800a732 <_printf_i+0x162>
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	4632      	mov	r2, r6
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	47d0      	blx	sl
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	d09d      	beq.n	800a72e <_printf_i+0x15e>
 800a7f2:	3501      	adds	r5, #1
 800a7f4:	68e3      	ldr	r3, [r4, #12]
 800a7f6:	9903      	ldr	r1, [sp, #12]
 800a7f8:	1a5b      	subs	r3, r3, r1
 800a7fa:	42ab      	cmp	r3, r5
 800a7fc:	dcf2      	bgt.n	800a7e4 <_printf_i+0x214>
 800a7fe:	e7eb      	b.n	800a7d8 <_printf_i+0x208>
 800a800:	2500      	movs	r5, #0
 800a802:	f104 0619 	add.w	r6, r4, #25
 800a806:	e7f5      	b.n	800a7f4 <_printf_i+0x224>
 800a808:	0800cb6c 	.word	0x0800cb6c
 800a80c:	0800cb7d 	.word	0x0800cb7d

0800a810 <std>:
 800a810:	2300      	movs	r3, #0
 800a812:	b510      	push	{r4, lr}
 800a814:	4604      	mov	r4, r0
 800a816:	e9c0 3300 	strd	r3, r3, [r0]
 800a81a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a81e:	6083      	str	r3, [r0, #8]
 800a820:	8181      	strh	r1, [r0, #12]
 800a822:	6643      	str	r3, [r0, #100]	@ 0x64
 800a824:	81c2      	strh	r2, [r0, #14]
 800a826:	6183      	str	r3, [r0, #24]
 800a828:	4619      	mov	r1, r3
 800a82a:	2208      	movs	r2, #8
 800a82c:	305c      	adds	r0, #92	@ 0x5c
 800a82e:	f000 f9f9 	bl	800ac24 <memset>
 800a832:	4b0d      	ldr	r3, [pc, #52]	@ (800a868 <std+0x58>)
 800a834:	6224      	str	r4, [r4, #32]
 800a836:	6263      	str	r3, [r4, #36]	@ 0x24
 800a838:	4b0c      	ldr	r3, [pc, #48]	@ (800a86c <std+0x5c>)
 800a83a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a83c:	4b0c      	ldr	r3, [pc, #48]	@ (800a870 <std+0x60>)
 800a83e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a840:	4b0c      	ldr	r3, [pc, #48]	@ (800a874 <std+0x64>)
 800a842:	6323      	str	r3, [r4, #48]	@ 0x30
 800a844:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <std+0x68>)
 800a846:	429c      	cmp	r4, r3
 800a848:	d006      	beq.n	800a858 <std+0x48>
 800a84a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a84e:	4294      	cmp	r4, r2
 800a850:	d002      	beq.n	800a858 <std+0x48>
 800a852:	33d0      	adds	r3, #208	@ 0xd0
 800a854:	429c      	cmp	r4, r3
 800a856:	d105      	bne.n	800a864 <std+0x54>
 800a858:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a860:	f000 ba5c 	b.w	800ad1c <__retarget_lock_init_recursive>
 800a864:	bd10      	pop	{r4, pc}
 800a866:	bf00      	nop
 800a868:	0800aa75 	.word	0x0800aa75
 800a86c:	0800aa97 	.word	0x0800aa97
 800a870:	0800aacf 	.word	0x0800aacf
 800a874:	0800aaf3 	.word	0x0800aaf3
 800a878:	20001644 	.word	0x20001644

0800a87c <stdio_exit_handler>:
 800a87c:	4a02      	ldr	r2, [pc, #8]	@ (800a888 <stdio_exit_handler+0xc>)
 800a87e:	4903      	ldr	r1, [pc, #12]	@ (800a88c <stdio_exit_handler+0x10>)
 800a880:	4803      	ldr	r0, [pc, #12]	@ (800a890 <stdio_exit_handler+0x14>)
 800a882:	f000 b869 	b.w	800a958 <_fwalk_sglue>
 800a886:	bf00      	nop
 800a888:	20000184 	.word	0x20000184
 800a88c:	0800c67d 	.word	0x0800c67d
 800a890:	20000194 	.word	0x20000194

0800a894 <cleanup_stdio>:
 800a894:	6841      	ldr	r1, [r0, #4]
 800a896:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c8 <cleanup_stdio+0x34>)
 800a898:	b510      	push	{r4, lr}
 800a89a:	4299      	cmp	r1, r3
 800a89c:	4604      	mov	r4, r0
 800a89e:	d001      	beq.n	800a8a4 <cleanup_stdio+0x10>
 800a8a0:	f001 feec 	bl	800c67c <_fflush_r>
 800a8a4:	68a1      	ldr	r1, [r4, #8]
 800a8a6:	4b09      	ldr	r3, [pc, #36]	@ (800a8cc <cleanup_stdio+0x38>)
 800a8a8:	4299      	cmp	r1, r3
 800a8aa:	d002      	beq.n	800a8b2 <cleanup_stdio+0x1e>
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f001 fee5 	bl	800c67c <_fflush_r>
 800a8b2:	68e1      	ldr	r1, [r4, #12]
 800a8b4:	4b06      	ldr	r3, [pc, #24]	@ (800a8d0 <cleanup_stdio+0x3c>)
 800a8b6:	4299      	cmp	r1, r3
 800a8b8:	d004      	beq.n	800a8c4 <cleanup_stdio+0x30>
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8c0:	f001 bedc 	b.w	800c67c <_fflush_r>
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20001644 	.word	0x20001644
 800a8cc:	200016ac 	.word	0x200016ac
 800a8d0:	20001714 	.word	0x20001714

0800a8d4 <global_stdio_init.part.0>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a904 <global_stdio_init.part.0+0x30>)
 800a8d8:	4c0b      	ldr	r4, [pc, #44]	@ (800a908 <global_stdio_init.part.0+0x34>)
 800a8da:	4a0c      	ldr	r2, [pc, #48]	@ (800a90c <global_stdio_init.part.0+0x38>)
 800a8dc:	4620      	mov	r0, r4
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	2104      	movs	r1, #4
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f7ff ff94 	bl	800a810 <std>
 800a8e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	2109      	movs	r1, #9
 800a8f0:	f7ff ff8e 	bl	800a810 <std>
 800a8f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8fe:	2112      	movs	r1, #18
 800a900:	f7ff bf86 	b.w	800a810 <std>
 800a904:	2000177c 	.word	0x2000177c
 800a908:	20001644 	.word	0x20001644
 800a90c:	0800a87d 	.word	0x0800a87d

0800a910 <__sfp_lock_acquire>:
 800a910:	4801      	ldr	r0, [pc, #4]	@ (800a918 <__sfp_lock_acquire+0x8>)
 800a912:	f000 ba04 	b.w	800ad1e <__retarget_lock_acquire_recursive>
 800a916:	bf00      	nop
 800a918:	20001785 	.word	0x20001785

0800a91c <__sfp_lock_release>:
 800a91c:	4801      	ldr	r0, [pc, #4]	@ (800a924 <__sfp_lock_release+0x8>)
 800a91e:	f000 b9ff 	b.w	800ad20 <__retarget_lock_release_recursive>
 800a922:	bf00      	nop
 800a924:	20001785 	.word	0x20001785

0800a928 <__sinit>:
 800a928:	b510      	push	{r4, lr}
 800a92a:	4604      	mov	r4, r0
 800a92c:	f7ff fff0 	bl	800a910 <__sfp_lock_acquire>
 800a930:	6a23      	ldr	r3, [r4, #32]
 800a932:	b11b      	cbz	r3, 800a93c <__sinit+0x14>
 800a934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a938:	f7ff bff0 	b.w	800a91c <__sfp_lock_release>
 800a93c:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <__sinit+0x28>)
 800a93e:	6223      	str	r3, [r4, #32]
 800a940:	4b04      	ldr	r3, [pc, #16]	@ (800a954 <__sinit+0x2c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1f5      	bne.n	800a934 <__sinit+0xc>
 800a948:	f7ff ffc4 	bl	800a8d4 <global_stdio_init.part.0>
 800a94c:	e7f2      	b.n	800a934 <__sinit+0xc>
 800a94e:	bf00      	nop
 800a950:	0800a895 	.word	0x0800a895
 800a954:	2000177c 	.word	0x2000177c

0800a958 <_fwalk_sglue>:
 800a958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a95c:	4607      	mov	r7, r0
 800a95e:	4688      	mov	r8, r1
 800a960:	4614      	mov	r4, r2
 800a962:	2600      	movs	r6, #0
 800a964:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a968:	f1b9 0901 	subs.w	r9, r9, #1
 800a96c:	d505      	bpl.n	800a97a <_fwalk_sglue+0x22>
 800a96e:	6824      	ldr	r4, [r4, #0]
 800a970:	2c00      	cmp	r4, #0
 800a972:	d1f7      	bne.n	800a964 <_fwalk_sglue+0xc>
 800a974:	4630      	mov	r0, r6
 800a976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d907      	bls.n	800a990 <_fwalk_sglue+0x38>
 800a980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a984:	3301      	adds	r3, #1
 800a986:	d003      	beq.n	800a990 <_fwalk_sglue+0x38>
 800a988:	4629      	mov	r1, r5
 800a98a:	4638      	mov	r0, r7
 800a98c:	47c0      	blx	r8
 800a98e:	4306      	orrs	r6, r0
 800a990:	3568      	adds	r5, #104	@ 0x68
 800a992:	e7e9      	b.n	800a968 <_fwalk_sglue+0x10>

0800a994 <iprintf>:
 800a994:	b40f      	push	{r0, r1, r2, r3}
 800a996:	b507      	push	{r0, r1, r2, lr}
 800a998:	4906      	ldr	r1, [pc, #24]	@ (800a9b4 <iprintf+0x20>)
 800a99a:	ab04      	add	r3, sp, #16
 800a99c:	6808      	ldr	r0, [r1, #0]
 800a99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a2:	6881      	ldr	r1, [r0, #8]
 800a9a4:	9301      	str	r3, [sp, #4]
 800a9a6:	f001 fcd1 	bl	800c34c <_vfiprintf_r>
 800a9aa:	b003      	add	sp, #12
 800a9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9b0:	b004      	add	sp, #16
 800a9b2:	4770      	bx	lr
 800a9b4:	20000190 	.word	0x20000190

0800a9b8 <_puts_r>:
 800a9b8:	6a03      	ldr	r3, [r0, #32]
 800a9ba:	b570      	push	{r4, r5, r6, lr}
 800a9bc:	4605      	mov	r5, r0
 800a9be:	460e      	mov	r6, r1
 800a9c0:	6884      	ldr	r4, [r0, #8]
 800a9c2:	b90b      	cbnz	r3, 800a9c8 <_puts_r+0x10>
 800a9c4:	f7ff ffb0 	bl	800a928 <__sinit>
 800a9c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ca:	07db      	lsls	r3, r3, #31
 800a9cc:	d405      	bmi.n	800a9da <_puts_r+0x22>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	0598      	lsls	r0, r3, #22
 800a9d2:	d402      	bmi.n	800a9da <_puts_r+0x22>
 800a9d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9d6:	f000 f9a2 	bl	800ad1e <__retarget_lock_acquire_recursive>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	0719      	lsls	r1, r3, #28
 800a9de:	d502      	bpl.n	800a9e6 <_puts_r+0x2e>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d135      	bne.n	800aa52 <_puts_r+0x9a>
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f000 f8c5 	bl	800ab78 <__swsetup_r>
 800a9ee:	b380      	cbz	r0, 800aa52 <_puts_r+0x9a>
 800a9f0:	f04f 35ff 	mov.w	r5, #4294967295
 800a9f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9f6:	07da      	lsls	r2, r3, #31
 800a9f8:	d405      	bmi.n	800aa06 <_puts_r+0x4e>
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	059b      	lsls	r3, r3, #22
 800a9fe:	d402      	bmi.n	800aa06 <_puts_r+0x4e>
 800aa00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa02:	f000 f98d 	bl	800ad20 <__retarget_lock_release_recursive>
 800aa06:	4628      	mov	r0, r5
 800aa08:	bd70      	pop	{r4, r5, r6, pc}
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da04      	bge.n	800aa18 <_puts_r+0x60>
 800aa0e:	69a2      	ldr	r2, [r4, #24]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	dc17      	bgt.n	800aa44 <_puts_r+0x8c>
 800aa14:	290a      	cmp	r1, #10
 800aa16:	d015      	beq.n	800aa44 <_puts_r+0x8c>
 800aa18:	6823      	ldr	r3, [r4, #0]
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	6022      	str	r2, [r4, #0]
 800aa1e:	7019      	strb	r1, [r3, #0]
 800aa20:	68a3      	ldr	r3, [r4, #8]
 800aa22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa26:	3b01      	subs	r3, #1
 800aa28:	60a3      	str	r3, [r4, #8]
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	d1ed      	bne.n	800aa0a <_puts_r+0x52>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	da11      	bge.n	800aa56 <_puts_r+0x9e>
 800aa32:	4622      	mov	r2, r4
 800aa34:	210a      	movs	r1, #10
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f85f 	bl	800aafa <__swbuf_r>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d0d7      	beq.n	800a9f0 <_puts_r+0x38>
 800aa40:	250a      	movs	r5, #10
 800aa42:	e7d7      	b.n	800a9f4 <_puts_r+0x3c>
 800aa44:	4622      	mov	r2, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 f857 	bl	800aafa <__swbuf_r>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d1e7      	bne.n	800aa20 <_puts_r+0x68>
 800aa50:	e7ce      	b.n	800a9f0 <_puts_r+0x38>
 800aa52:	3e01      	subs	r6, #1
 800aa54:	e7e4      	b.n	800aa20 <_puts_r+0x68>
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	6022      	str	r2, [r4, #0]
 800aa5c:	220a      	movs	r2, #10
 800aa5e:	701a      	strb	r2, [r3, #0]
 800aa60:	e7ee      	b.n	800aa40 <_puts_r+0x88>
	...

0800aa64 <puts>:
 800aa64:	4b02      	ldr	r3, [pc, #8]	@ (800aa70 <puts+0xc>)
 800aa66:	4601      	mov	r1, r0
 800aa68:	6818      	ldr	r0, [r3, #0]
 800aa6a:	f7ff bfa5 	b.w	800a9b8 <_puts_r>
 800aa6e:	bf00      	nop
 800aa70:	20000190 	.word	0x20000190

0800aa74 <__sread>:
 800aa74:	b510      	push	{r4, lr}
 800aa76:	460c      	mov	r4, r1
 800aa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa7c:	f000 f900 	bl	800ac80 <_read_r>
 800aa80:	2800      	cmp	r0, #0
 800aa82:	bfab      	itete	ge
 800aa84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa86:	89a3      	ldrhlt	r3, [r4, #12]
 800aa88:	181b      	addge	r3, r3, r0
 800aa8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa8e:	bfac      	ite	ge
 800aa90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa92:	81a3      	strhlt	r3, [r4, #12]
 800aa94:	bd10      	pop	{r4, pc}

0800aa96 <__swrite>:
 800aa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9a:	461f      	mov	r7, r3
 800aa9c:	898b      	ldrh	r3, [r1, #12]
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	05db      	lsls	r3, r3, #23
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	d505      	bpl.n	800aab4 <__swrite+0x1e>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab0:	f000 f8d4 	bl	800ac5c <_lseek_r>
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	4632      	mov	r2, r6
 800aab8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	4628      	mov	r0, r5
 800aac0:	463b      	mov	r3, r7
 800aac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaca:	f000 b8eb 	b.w	800aca4 <_write_r>

0800aace <__sseek>:
 800aace:	b510      	push	{r4, lr}
 800aad0:	460c      	mov	r4, r1
 800aad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad6:	f000 f8c1 	bl	800ac5c <_lseek_r>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	bf15      	itete	ne
 800aae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aaea:	81a3      	strheq	r3, [r4, #12]
 800aaec:	bf18      	it	ne
 800aaee:	81a3      	strhne	r3, [r4, #12]
 800aaf0:	bd10      	pop	{r4, pc}

0800aaf2 <__sclose>:
 800aaf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf6:	f000 b8a1 	b.w	800ac3c <_close_r>

0800aafa <__swbuf_r>:
 800aafa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafc:	460e      	mov	r6, r1
 800aafe:	4614      	mov	r4, r2
 800ab00:	4605      	mov	r5, r0
 800ab02:	b118      	cbz	r0, 800ab0c <__swbuf_r+0x12>
 800ab04:	6a03      	ldr	r3, [r0, #32]
 800ab06:	b90b      	cbnz	r3, 800ab0c <__swbuf_r+0x12>
 800ab08:	f7ff ff0e 	bl	800a928 <__sinit>
 800ab0c:	69a3      	ldr	r3, [r4, #24]
 800ab0e:	60a3      	str	r3, [r4, #8]
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	071a      	lsls	r2, r3, #28
 800ab14:	d501      	bpl.n	800ab1a <__swbuf_r+0x20>
 800ab16:	6923      	ldr	r3, [r4, #16]
 800ab18:	b943      	cbnz	r3, 800ab2c <__swbuf_r+0x32>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 f82b 	bl	800ab78 <__swsetup_r>
 800ab22:	b118      	cbz	r0, 800ab2c <__swbuf_r+0x32>
 800ab24:	f04f 37ff 	mov.w	r7, #4294967295
 800ab28:	4638      	mov	r0, r7
 800ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2c:	6823      	ldr	r3, [r4, #0]
 800ab2e:	6922      	ldr	r2, [r4, #16]
 800ab30:	b2f6      	uxtb	r6, r6
 800ab32:	1a98      	subs	r0, r3, r2
 800ab34:	6963      	ldr	r3, [r4, #20]
 800ab36:	4637      	mov	r7, r6
 800ab38:	4283      	cmp	r3, r0
 800ab3a:	dc05      	bgt.n	800ab48 <__swbuf_r+0x4e>
 800ab3c:	4621      	mov	r1, r4
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f001 fd9c 	bl	800c67c <_fflush_r>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d1ed      	bne.n	800ab24 <__swbuf_r+0x2a>
 800ab48:	68a3      	ldr	r3, [r4, #8]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	60a3      	str	r3, [r4, #8]
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	1c5a      	adds	r2, r3, #1
 800ab52:	6022      	str	r2, [r4, #0]
 800ab54:	701e      	strb	r6, [r3, #0]
 800ab56:	6962      	ldr	r2, [r4, #20]
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d004      	beq.n	800ab68 <__swbuf_r+0x6e>
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	07db      	lsls	r3, r3, #31
 800ab62:	d5e1      	bpl.n	800ab28 <__swbuf_r+0x2e>
 800ab64:	2e0a      	cmp	r6, #10
 800ab66:	d1df      	bne.n	800ab28 <__swbuf_r+0x2e>
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f001 fd86 	bl	800c67c <_fflush_r>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	d0d9      	beq.n	800ab28 <__swbuf_r+0x2e>
 800ab74:	e7d6      	b.n	800ab24 <__swbuf_r+0x2a>
	...

0800ab78 <__swsetup_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4b29      	ldr	r3, [pc, #164]	@ (800ac20 <__swsetup_r+0xa8>)
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	460c      	mov	r4, r1
 800ab82:	b118      	cbz	r0, 800ab8c <__swsetup_r+0x14>
 800ab84:	6a03      	ldr	r3, [r0, #32]
 800ab86:	b90b      	cbnz	r3, 800ab8c <__swsetup_r+0x14>
 800ab88:	f7ff fece 	bl	800a928 <__sinit>
 800ab8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab90:	0719      	lsls	r1, r3, #28
 800ab92:	d422      	bmi.n	800abda <__swsetup_r+0x62>
 800ab94:	06da      	lsls	r2, r3, #27
 800ab96:	d407      	bmi.n	800aba8 <__swsetup_r+0x30>
 800ab98:	2209      	movs	r2, #9
 800ab9a:	602a      	str	r2, [r5, #0]
 800ab9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	e033      	b.n	800ac10 <__swsetup_r+0x98>
 800aba8:	0758      	lsls	r0, r3, #29
 800abaa:	d512      	bpl.n	800abd2 <__swsetup_r+0x5a>
 800abac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abae:	b141      	cbz	r1, 800abc2 <__swsetup_r+0x4a>
 800abb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abb4:	4299      	cmp	r1, r3
 800abb6:	d002      	beq.n	800abbe <__swsetup_r+0x46>
 800abb8:	4628      	mov	r0, r5
 800abba:	f000 ff21 	bl	800ba00 <_free_r>
 800abbe:	2300      	movs	r3, #0
 800abc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	2300      	movs	r3, #0
 800abcc:	6063      	str	r3, [r4, #4]
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	f043 0308 	orr.w	r3, r3, #8
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	b94b      	cbnz	r3, 800abf2 <__swsetup_r+0x7a>
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abe8:	d003      	beq.n	800abf2 <__swsetup_r+0x7a>
 800abea:	4621      	mov	r1, r4
 800abec:	4628      	mov	r0, r5
 800abee:	f001 fd92 	bl	800c716 <__smakebuf_r>
 800abf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf6:	f013 0201 	ands.w	r2, r3, #1
 800abfa:	d00a      	beq.n	800ac12 <__swsetup_r+0x9a>
 800abfc:	2200      	movs	r2, #0
 800abfe:	60a2      	str	r2, [r4, #8]
 800ac00:	6962      	ldr	r2, [r4, #20]
 800ac02:	4252      	negs	r2, r2
 800ac04:	61a2      	str	r2, [r4, #24]
 800ac06:	6922      	ldr	r2, [r4, #16]
 800ac08:	b942      	cbnz	r2, 800ac1c <__swsetup_r+0xa4>
 800ac0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac0e:	d1c5      	bne.n	800ab9c <__swsetup_r+0x24>
 800ac10:	bd38      	pop	{r3, r4, r5, pc}
 800ac12:	0799      	lsls	r1, r3, #30
 800ac14:	bf58      	it	pl
 800ac16:	6962      	ldrpl	r2, [r4, #20]
 800ac18:	60a2      	str	r2, [r4, #8]
 800ac1a:	e7f4      	b.n	800ac06 <__swsetup_r+0x8e>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7f7      	b.n	800ac10 <__swsetup_r+0x98>
 800ac20:	20000190 	.word	0x20000190

0800ac24 <memset>:
 800ac24:	4603      	mov	r3, r0
 800ac26:	4402      	add	r2, r0
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d100      	bne.n	800ac2e <memset+0xa>
 800ac2c:	4770      	bx	lr
 800ac2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac32:	e7f9      	b.n	800ac28 <memset+0x4>

0800ac34 <_localeconv_r>:
 800ac34:	4800      	ldr	r0, [pc, #0]	@ (800ac38 <_localeconv_r+0x4>)
 800ac36:	4770      	bx	lr
 800ac38:	200002d0 	.word	0x200002d0

0800ac3c <_close_r>:
 800ac3c:	b538      	push	{r3, r4, r5, lr}
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4d05      	ldr	r5, [pc, #20]	@ (800ac58 <_close_r+0x1c>)
 800ac42:	4604      	mov	r4, r0
 800ac44:	4608      	mov	r0, r1
 800ac46:	602b      	str	r3, [r5, #0]
 800ac48:	f7f6 fed5 	bl	80019f6 <_close>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	d102      	bne.n	800ac56 <_close_r+0x1a>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	b103      	cbz	r3, 800ac56 <_close_r+0x1a>
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	20001780 	.word	0x20001780

0800ac5c <_lseek_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4604      	mov	r4, r0
 800ac60:	4608      	mov	r0, r1
 800ac62:	4611      	mov	r1, r2
 800ac64:	2200      	movs	r2, #0
 800ac66:	4d05      	ldr	r5, [pc, #20]	@ (800ac7c <_lseek_r+0x20>)
 800ac68:	602a      	str	r2, [r5, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f7f6 fee7 	bl	8001a3e <_lseek>
 800ac70:	1c43      	adds	r3, r0, #1
 800ac72:	d102      	bne.n	800ac7a <_lseek_r+0x1e>
 800ac74:	682b      	ldr	r3, [r5, #0]
 800ac76:	b103      	cbz	r3, 800ac7a <_lseek_r+0x1e>
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	20001780 	.word	0x20001780

0800ac80 <_read_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4604      	mov	r4, r0
 800ac84:	4608      	mov	r0, r1
 800ac86:	4611      	mov	r1, r2
 800ac88:	2200      	movs	r2, #0
 800ac8a:	4d05      	ldr	r5, [pc, #20]	@ (800aca0 <_read_r+0x20>)
 800ac8c:	602a      	str	r2, [r5, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f7f6 fe78 	bl	8001984 <_read>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_read_r+0x1e>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_read_r+0x1e>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20001780 	.word	0x20001780

0800aca4 <_write_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	4611      	mov	r1, r2
 800acac:	2200      	movs	r2, #0
 800acae:	4d05      	ldr	r5, [pc, #20]	@ (800acc4 <_write_r+0x20>)
 800acb0:	602a      	str	r2, [r5, #0]
 800acb2:	461a      	mov	r2, r3
 800acb4:	f7f6 fe83 	bl	80019be <_write>
 800acb8:	1c43      	adds	r3, r0, #1
 800acba:	d102      	bne.n	800acc2 <_write_r+0x1e>
 800acbc:	682b      	ldr	r3, [r5, #0]
 800acbe:	b103      	cbz	r3, 800acc2 <_write_r+0x1e>
 800acc0:	6023      	str	r3, [r4, #0]
 800acc2:	bd38      	pop	{r3, r4, r5, pc}
 800acc4:	20001780 	.word	0x20001780

0800acc8 <__errno>:
 800acc8:	4b01      	ldr	r3, [pc, #4]	@ (800acd0 <__errno+0x8>)
 800acca:	6818      	ldr	r0, [r3, #0]
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20000190 	.word	0x20000190

0800acd4 <__libc_init_array>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	2600      	movs	r6, #0
 800acd8:	4d0c      	ldr	r5, [pc, #48]	@ (800ad0c <__libc_init_array+0x38>)
 800acda:	4c0d      	ldr	r4, [pc, #52]	@ (800ad10 <__libc_init_array+0x3c>)
 800acdc:	1b64      	subs	r4, r4, r5
 800acde:	10a4      	asrs	r4, r4, #2
 800ace0:	42a6      	cmp	r6, r4
 800ace2:	d109      	bne.n	800acf8 <__libc_init_array+0x24>
 800ace4:	f001 fe36 	bl	800c954 <_init>
 800ace8:	2600      	movs	r6, #0
 800acea:	4d0a      	ldr	r5, [pc, #40]	@ (800ad14 <__libc_init_array+0x40>)
 800acec:	4c0a      	ldr	r4, [pc, #40]	@ (800ad18 <__libc_init_array+0x44>)
 800acee:	1b64      	subs	r4, r4, r5
 800acf0:	10a4      	asrs	r4, r4, #2
 800acf2:	42a6      	cmp	r6, r4
 800acf4:	d105      	bne.n	800ad02 <__libc_init_array+0x2e>
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
 800acf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfc:	4798      	blx	r3
 800acfe:	3601      	adds	r6, #1
 800ad00:	e7ee      	b.n	800ace0 <__libc_init_array+0xc>
 800ad02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad06:	4798      	blx	r3
 800ad08:	3601      	adds	r6, #1
 800ad0a:	e7f2      	b.n	800acf2 <__libc_init_array+0x1e>
 800ad0c:	0800ced0 	.word	0x0800ced0
 800ad10:	0800ced0 	.word	0x0800ced0
 800ad14:	0800ced0 	.word	0x0800ced0
 800ad18:	0800ced4 	.word	0x0800ced4

0800ad1c <__retarget_lock_init_recursive>:
 800ad1c:	4770      	bx	lr

0800ad1e <__retarget_lock_acquire_recursive>:
 800ad1e:	4770      	bx	lr

0800ad20 <__retarget_lock_release_recursive>:
 800ad20:	4770      	bx	lr

0800ad22 <memchr>:
 800ad22:	4603      	mov	r3, r0
 800ad24:	b510      	push	{r4, lr}
 800ad26:	b2c9      	uxtb	r1, r1
 800ad28:	4402      	add	r2, r0
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	d101      	bne.n	800ad34 <memchr+0x12>
 800ad30:	2000      	movs	r0, #0
 800ad32:	e003      	b.n	800ad3c <memchr+0x1a>
 800ad34:	7804      	ldrb	r4, [r0, #0]
 800ad36:	3301      	adds	r3, #1
 800ad38:	428c      	cmp	r4, r1
 800ad3a:	d1f6      	bne.n	800ad2a <memchr+0x8>
 800ad3c:	bd10      	pop	{r4, pc}

0800ad3e <memcpy>:
 800ad3e:	440a      	add	r2, r1
 800ad40:	4291      	cmp	r1, r2
 800ad42:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad46:	d100      	bne.n	800ad4a <memcpy+0xc>
 800ad48:	4770      	bx	lr
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad50:	4291      	cmp	r1, r2
 800ad52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad56:	d1f9      	bne.n	800ad4c <memcpy+0xe>
 800ad58:	bd10      	pop	{r4, pc}

0800ad5a <quorem>:
 800ad5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5e:	6903      	ldr	r3, [r0, #16]
 800ad60:	690c      	ldr	r4, [r1, #16]
 800ad62:	4607      	mov	r7, r0
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	db7e      	blt.n	800ae66 <quorem+0x10c>
 800ad68:	3c01      	subs	r4, #1
 800ad6a:	00a3      	lsls	r3, r4, #2
 800ad6c:	f100 0514 	add.w	r5, r0, #20
 800ad70:	f101 0814 	add.w	r8, r1, #20
 800ad74:	9300      	str	r3, [sp, #0]
 800ad76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad84:	3301      	adds	r3, #1
 800ad86:	429a      	cmp	r2, r3
 800ad88:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad90:	d32e      	bcc.n	800adf0 <quorem+0x96>
 800ad92:	f04f 0a00 	mov.w	sl, #0
 800ad96:	46c4      	mov	ip, r8
 800ad98:	46ae      	mov	lr, r5
 800ad9a:	46d3      	mov	fp, sl
 800ad9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ada0:	b298      	uxth	r0, r3
 800ada2:	fb06 a000 	mla	r0, r6, r0, sl
 800ada6:	0c1b      	lsrs	r3, r3, #16
 800ada8:	0c02      	lsrs	r2, r0, #16
 800adaa:	fb06 2303 	mla	r3, r6, r3, r2
 800adae:	f8de 2000 	ldr.w	r2, [lr]
 800adb2:	b280      	uxth	r0, r0
 800adb4:	b292      	uxth	r2, r2
 800adb6:	1a12      	subs	r2, r2, r0
 800adb8:	445a      	add	r2, fp
 800adba:	f8de 0000 	ldr.w	r0, [lr]
 800adbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800adc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800adcc:	b292      	uxth	r2, r2
 800adce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800add2:	45e1      	cmp	r9, ip
 800add4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800add8:	f84e 2b04 	str.w	r2, [lr], #4
 800addc:	d2de      	bcs.n	800ad9c <quorem+0x42>
 800adde:	9b00      	ldr	r3, [sp, #0]
 800ade0:	58eb      	ldr	r3, [r5, r3]
 800ade2:	b92b      	cbnz	r3, 800adf0 <quorem+0x96>
 800ade4:	9b01      	ldr	r3, [sp, #4]
 800ade6:	3b04      	subs	r3, #4
 800ade8:	429d      	cmp	r5, r3
 800adea:	461a      	mov	r2, r3
 800adec:	d32f      	bcc.n	800ae4e <quorem+0xf4>
 800adee:	613c      	str	r4, [r7, #16]
 800adf0:	4638      	mov	r0, r7
 800adf2:	f001 f97b 	bl	800c0ec <__mcmp>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	db25      	blt.n	800ae46 <quorem+0xec>
 800adfa:	4629      	mov	r1, r5
 800adfc:	2000      	movs	r0, #0
 800adfe:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae02:	f8d1 c000 	ldr.w	ip, [r1]
 800ae06:	fa1f fe82 	uxth.w	lr, r2
 800ae0a:	fa1f f38c 	uxth.w	r3, ip
 800ae0e:	eba3 030e 	sub.w	r3, r3, lr
 800ae12:	4403      	add	r3, r0
 800ae14:	0c12      	lsrs	r2, r2, #16
 800ae16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae24:	45c1      	cmp	r9, r8
 800ae26:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae2a:	f841 3b04 	str.w	r3, [r1], #4
 800ae2e:	d2e6      	bcs.n	800adfe <quorem+0xa4>
 800ae30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae38:	b922      	cbnz	r2, 800ae44 <quorem+0xea>
 800ae3a:	3b04      	subs	r3, #4
 800ae3c:	429d      	cmp	r5, r3
 800ae3e:	461a      	mov	r2, r3
 800ae40:	d30b      	bcc.n	800ae5a <quorem+0x100>
 800ae42:	613c      	str	r4, [r7, #16]
 800ae44:	3601      	adds	r6, #1
 800ae46:	4630      	mov	r0, r6
 800ae48:	b003      	add	sp, #12
 800ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4e:	6812      	ldr	r2, [r2, #0]
 800ae50:	3b04      	subs	r3, #4
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	d1cb      	bne.n	800adee <quorem+0x94>
 800ae56:	3c01      	subs	r4, #1
 800ae58:	e7c6      	b.n	800ade8 <quorem+0x8e>
 800ae5a:	6812      	ldr	r2, [r2, #0]
 800ae5c:	3b04      	subs	r3, #4
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	d1ef      	bne.n	800ae42 <quorem+0xe8>
 800ae62:	3c01      	subs	r4, #1
 800ae64:	e7ea      	b.n	800ae3c <quorem+0xe2>
 800ae66:	2000      	movs	r0, #0
 800ae68:	e7ee      	b.n	800ae48 <quorem+0xee>
 800ae6a:	0000      	movs	r0, r0
 800ae6c:	0000      	movs	r0, r0
	...

0800ae70 <_dtoa_r>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	4614      	mov	r4, r2
 800ae76:	461d      	mov	r5, r3
 800ae78:	69c7      	ldr	r7, [r0, #28]
 800ae7a:	b097      	sub	sp, #92	@ 0x5c
 800ae7c:	4683      	mov	fp, r0
 800ae7e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ae82:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ae84:	b97f      	cbnz	r7, 800aea6 <_dtoa_r+0x36>
 800ae86:	2010      	movs	r0, #16
 800ae88:	f000 fe02 	bl	800ba90 <malloc>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae92:	b920      	cbnz	r0, 800ae9e <_dtoa_r+0x2e>
 800ae94:	21ef      	movs	r1, #239	@ 0xef
 800ae96:	4ba8      	ldr	r3, [pc, #672]	@ (800b138 <_dtoa_r+0x2c8>)
 800ae98:	48a8      	ldr	r0, [pc, #672]	@ (800b13c <_dtoa_r+0x2cc>)
 800ae9a:	f001 fcab 	bl	800c7f4 <__assert_func>
 800ae9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aea2:	6007      	str	r7, [r0, #0]
 800aea4:	60c7      	str	r7, [r0, #12]
 800aea6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aeaa:	6819      	ldr	r1, [r3, #0]
 800aeac:	b159      	cbz	r1, 800aec6 <_dtoa_r+0x56>
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	4093      	lsls	r3, r2
 800aeb4:	604a      	str	r2, [r1, #4]
 800aeb6:	608b      	str	r3, [r1, #8]
 800aeb8:	4658      	mov	r0, fp
 800aeba:	f000 fedf 	bl	800bc7c <_Bfree>
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	1e2b      	subs	r3, r5, #0
 800aec8:	bfaf      	iteee	ge
 800aeca:	2300      	movge	r3, #0
 800aecc:	2201      	movlt	r2, #1
 800aece:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aed2:	9303      	strlt	r3, [sp, #12]
 800aed4:	bfa8      	it	ge
 800aed6:	6033      	strge	r3, [r6, #0]
 800aed8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800aedc:	4b98      	ldr	r3, [pc, #608]	@ (800b140 <_dtoa_r+0x2d0>)
 800aede:	bfb8      	it	lt
 800aee0:	6032      	strlt	r2, [r6, #0]
 800aee2:	ea33 0308 	bics.w	r3, r3, r8
 800aee6:	d112      	bne.n	800af0e <_dtoa_r+0x9e>
 800aee8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aeec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800aef4:	4323      	orrs	r3, r4
 800aef6:	f000 8550 	beq.w	800b99a <_dtoa_r+0xb2a>
 800aefa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800aefc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b144 <_dtoa_r+0x2d4>
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8552 	beq.w	800b9aa <_dtoa_r+0xb3a>
 800af06:	f10a 0303 	add.w	r3, sl, #3
 800af0a:	f000 bd4c 	b.w	800b9a6 <_dtoa_r+0xb36>
 800af0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af1a:	2200      	movs	r2, #0
 800af1c:	2300      	movs	r3, #0
 800af1e:	f7f5 fd4d 	bl	80009bc <__aeabi_dcmpeq>
 800af22:	4607      	mov	r7, r0
 800af24:	b158      	cbz	r0, 800af3e <_dtoa_r+0xce>
 800af26:	2301      	movs	r3, #1
 800af28:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800af2e:	b113      	cbz	r3, 800af36 <_dtoa_r+0xc6>
 800af30:	4b85      	ldr	r3, [pc, #532]	@ (800b148 <_dtoa_r+0x2d8>)
 800af32:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b14c <_dtoa_r+0x2dc>
 800af3a:	f000 bd36 	b.w	800b9aa <_dtoa_r+0xb3a>
 800af3e:	ab14      	add	r3, sp, #80	@ 0x50
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	ab15      	add	r3, sp, #84	@ 0x54
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	4658      	mov	r0, fp
 800af48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800af4c:	f001 f97e 	bl	800c24c <__d2b>
 800af50:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800af54:	4681      	mov	r9, r0
 800af56:	2e00      	cmp	r6, #0
 800af58:	d077      	beq.n	800b04a <_dtoa_r+0x1da>
 800af5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af60:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af68:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af6c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af70:	9712      	str	r7, [sp, #72]	@ 0x48
 800af72:	4619      	mov	r1, r3
 800af74:	2200      	movs	r2, #0
 800af76:	4b76      	ldr	r3, [pc, #472]	@ (800b150 <_dtoa_r+0x2e0>)
 800af78:	f7f5 f900 	bl	800017c <__aeabi_dsub>
 800af7c:	a368      	add	r3, pc, #416	@ (adr r3, 800b120 <_dtoa_r+0x2b0>)
 800af7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af82:	f7f5 fab3 	bl	80004ec <__aeabi_dmul>
 800af86:	a368      	add	r3, pc, #416	@ (adr r3, 800b128 <_dtoa_r+0x2b8>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 f8f8 	bl	8000180 <__adddf3>
 800af90:	4604      	mov	r4, r0
 800af92:	4630      	mov	r0, r6
 800af94:	460d      	mov	r5, r1
 800af96:	f7f5 fa3f 	bl	8000418 <__aeabi_i2d>
 800af9a:	a365      	add	r3, pc, #404	@ (adr r3, 800b130 <_dtoa_r+0x2c0>)
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	f7f5 faa4 	bl	80004ec <__aeabi_dmul>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4620      	mov	r0, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	f7f5 f8e8 	bl	8000180 <__adddf3>
 800afb0:	4604      	mov	r4, r0
 800afb2:	460d      	mov	r5, r1
 800afb4:	f7f5 fd4a 	bl	8000a4c <__aeabi_d2iz>
 800afb8:	2200      	movs	r2, #0
 800afba:	4607      	mov	r7, r0
 800afbc:	2300      	movs	r3, #0
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	f7f5 fd05 	bl	80009d0 <__aeabi_dcmplt>
 800afc6:	b140      	cbz	r0, 800afda <_dtoa_r+0x16a>
 800afc8:	4638      	mov	r0, r7
 800afca:	f7f5 fa25 	bl	8000418 <__aeabi_i2d>
 800afce:	4622      	mov	r2, r4
 800afd0:	462b      	mov	r3, r5
 800afd2:	f7f5 fcf3 	bl	80009bc <__aeabi_dcmpeq>
 800afd6:	b900      	cbnz	r0, 800afda <_dtoa_r+0x16a>
 800afd8:	3f01      	subs	r7, #1
 800afda:	2f16      	cmp	r7, #22
 800afdc:	d853      	bhi.n	800b086 <_dtoa_r+0x216>
 800afde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afe2:	4b5c      	ldr	r3, [pc, #368]	@ (800b154 <_dtoa_r+0x2e4>)
 800afe4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f7f5 fcf0 	bl	80009d0 <__aeabi_dcmplt>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d04a      	beq.n	800b08a <_dtoa_r+0x21a>
 800aff4:	2300      	movs	r3, #0
 800aff6:	3f01      	subs	r7, #1
 800aff8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800affa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800affc:	1b9b      	subs	r3, r3, r6
 800affe:	1e5a      	subs	r2, r3, #1
 800b000:	bf46      	itte	mi
 800b002:	f1c3 0801 	rsbmi	r8, r3, #1
 800b006:	2300      	movmi	r3, #0
 800b008:	f04f 0800 	movpl.w	r8, #0
 800b00c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b00e:	bf48      	it	mi
 800b010:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b012:	2f00      	cmp	r7, #0
 800b014:	db3b      	blt.n	800b08e <_dtoa_r+0x21e>
 800b016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b018:	970e      	str	r7, [sp, #56]	@ 0x38
 800b01a:	443b      	add	r3, r7
 800b01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b01e:	2300      	movs	r3, #0
 800b020:	930a      	str	r3, [sp, #40]	@ 0x28
 800b022:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b024:	2b09      	cmp	r3, #9
 800b026:	d866      	bhi.n	800b0f6 <_dtoa_r+0x286>
 800b028:	2b05      	cmp	r3, #5
 800b02a:	bfc4      	itt	gt
 800b02c:	3b04      	subgt	r3, #4
 800b02e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b030:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b032:	bfc8      	it	gt
 800b034:	2400      	movgt	r4, #0
 800b036:	f1a3 0302 	sub.w	r3, r3, #2
 800b03a:	bfd8      	it	le
 800b03c:	2401      	movle	r4, #1
 800b03e:	2b03      	cmp	r3, #3
 800b040:	d864      	bhi.n	800b10c <_dtoa_r+0x29c>
 800b042:	e8df f003 	tbb	[pc, r3]
 800b046:	382b      	.short	0x382b
 800b048:	5636      	.short	0x5636
 800b04a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b04e:	441e      	add	r6, r3
 800b050:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b054:	2b20      	cmp	r3, #32
 800b056:	bfc1      	itttt	gt
 800b058:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b05c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b060:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b064:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b068:	bfd6      	itet	le
 800b06a:	f1c3 0320 	rsble	r3, r3, #32
 800b06e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b072:	fa04 f003 	lslle.w	r0, r4, r3
 800b076:	f7f5 f9bf 	bl	80003f8 <__aeabi_ui2d>
 800b07a:	2201      	movs	r2, #1
 800b07c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b080:	3e01      	subs	r6, #1
 800b082:	9212      	str	r2, [sp, #72]	@ 0x48
 800b084:	e775      	b.n	800af72 <_dtoa_r+0x102>
 800b086:	2301      	movs	r3, #1
 800b088:	e7b6      	b.n	800aff8 <_dtoa_r+0x188>
 800b08a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b08c:	e7b5      	b.n	800affa <_dtoa_r+0x18a>
 800b08e:	427b      	negs	r3, r7
 800b090:	930a      	str	r3, [sp, #40]	@ 0x28
 800b092:	2300      	movs	r3, #0
 800b094:	eba8 0807 	sub.w	r8, r8, r7
 800b098:	930e      	str	r3, [sp, #56]	@ 0x38
 800b09a:	e7c2      	b.n	800b022 <_dtoa_r+0x1b2>
 800b09c:	2300      	movs	r3, #0
 800b09e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	dc35      	bgt.n	800b112 <_dtoa_r+0x2a2>
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b0ae:	9221      	str	r2, [sp, #132]	@ 0x84
 800b0b0:	e00b      	b.n	800b0ca <_dtoa_r+0x25a>
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e7f3      	b.n	800b09e <_dtoa_r+0x22e>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0bc:	18fb      	adds	r3, r7, r3
 800b0be:	9308      	str	r3, [sp, #32]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	9307      	str	r3, [sp, #28]
 800b0c6:	bfb8      	it	lt
 800b0c8:	2301      	movlt	r3, #1
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b0d2:	f102 0514 	add.w	r5, r2, #20
 800b0d6:	429d      	cmp	r5, r3
 800b0d8:	d91f      	bls.n	800b11a <_dtoa_r+0x2aa>
 800b0da:	6041      	str	r1, [r0, #4]
 800b0dc:	4658      	mov	r0, fp
 800b0de:	f000 fd8d 	bl	800bbfc <_Balloc>
 800b0e2:	4682      	mov	sl, r0
 800b0e4:	2800      	cmp	r0, #0
 800b0e6:	d139      	bne.n	800b15c <_dtoa_r+0x2ec>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b158 <_dtoa_r+0x2e8>)
 800b0f0:	e6d2      	b.n	800ae98 <_dtoa_r+0x28>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e7e0      	b.n	800b0b8 <_dtoa_r+0x248>
 800b0f6:	2401      	movs	r4, #1
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0fc:	9320      	str	r3, [sp, #128]	@ 0x80
 800b0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b102:	2200      	movs	r2, #0
 800b104:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b108:	2312      	movs	r3, #18
 800b10a:	e7d0      	b.n	800b0ae <_dtoa_r+0x23e>
 800b10c:	2301      	movs	r3, #1
 800b10e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b110:	e7f5      	b.n	800b0fe <_dtoa_r+0x28e>
 800b112:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b114:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b118:	e7d7      	b.n	800b0ca <_dtoa_r+0x25a>
 800b11a:	3101      	adds	r1, #1
 800b11c:	0052      	lsls	r2, r2, #1
 800b11e:	e7d8      	b.n	800b0d2 <_dtoa_r+0x262>
 800b120:	636f4361 	.word	0x636f4361
 800b124:	3fd287a7 	.word	0x3fd287a7
 800b128:	8b60c8b3 	.word	0x8b60c8b3
 800b12c:	3fc68a28 	.word	0x3fc68a28
 800b130:	509f79fb 	.word	0x509f79fb
 800b134:	3fd34413 	.word	0x3fd34413
 800b138:	0800cb9b 	.word	0x0800cb9b
 800b13c:	0800cbb2 	.word	0x0800cbb2
 800b140:	7ff00000 	.word	0x7ff00000
 800b144:	0800cb97 	.word	0x0800cb97
 800b148:	0800cb6b 	.word	0x0800cb6b
 800b14c:	0800cb6a 	.word	0x0800cb6a
 800b150:	3ff80000 	.word	0x3ff80000
 800b154:	0800cca8 	.word	0x0800cca8
 800b158:	0800cc0a 	.word	0x0800cc0a
 800b15c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b160:	6018      	str	r0, [r3, #0]
 800b162:	9b07      	ldr	r3, [sp, #28]
 800b164:	2b0e      	cmp	r3, #14
 800b166:	f200 80a4 	bhi.w	800b2b2 <_dtoa_r+0x442>
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	f000 80a1 	beq.w	800b2b2 <_dtoa_r+0x442>
 800b170:	2f00      	cmp	r7, #0
 800b172:	dd33      	ble.n	800b1dc <_dtoa_r+0x36c>
 800b174:	4b86      	ldr	r3, [pc, #536]	@ (800b390 <_dtoa_r+0x520>)
 800b176:	f007 020f 	and.w	r2, r7, #15
 800b17a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b17e:	05f8      	lsls	r0, r7, #23
 800b180:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b184:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b18c:	d516      	bpl.n	800b1bc <_dtoa_r+0x34c>
 800b18e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b192:	4b80      	ldr	r3, [pc, #512]	@ (800b394 <_dtoa_r+0x524>)
 800b194:	2603      	movs	r6, #3
 800b196:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b19a:	f7f5 fad1 	bl	8000740 <__aeabi_ddiv>
 800b19e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a2:	f004 040f 	and.w	r4, r4, #15
 800b1a6:	4d7b      	ldr	r5, [pc, #492]	@ (800b394 <_dtoa_r+0x524>)
 800b1a8:	b954      	cbnz	r4, 800b1c0 <_dtoa_r+0x350>
 800b1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b2:	f7f5 fac5 	bl	8000740 <__aeabi_ddiv>
 800b1b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ba:	e028      	b.n	800b20e <_dtoa_r+0x39e>
 800b1bc:	2602      	movs	r6, #2
 800b1be:	e7f2      	b.n	800b1a6 <_dtoa_r+0x336>
 800b1c0:	07e1      	lsls	r1, r4, #31
 800b1c2:	d508      	bpl.n	800b1d6 <_dtoa_r+0x366>
 800b1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1cc:	f7f5 f98e 	bl	80004ec <__aeabi_dmul>
 800b1d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1d4:	3601      	adds	r6, #1
 800b1d6:	1064      	asrs	r4, r4, #1
 800b1d8:	3508      	adds	r5, #8
 800b1da:	e7e5      	b.n	800b1a8 <_dtoa_r+0x338>
 800b1dc:	f000 80d2 	beq.w	800b384 <_dtoa_r+0x514>
 800b1e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1e4:	427c      	negs	r4, r7
 800b1e6:	4b6a      	ldr	r3, [pc, #424]	@ (800b390 <_dtoa_r+0x520>)
 800b1e8:	f004 020f 	and.w	r2, r4, #15
 800b1ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f4:	f7f5 f97a 	bl	80004ec <__aeabi_dmul>
 800b1f8:	2602      	movs	r6, #2
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b200:	4d64      	ldr	r5, [pc, #400]	@ (800b394 <_dtoa_r+0x524>)
 800b202:	1124      	asrs	r4, r4, #4
 800b204:	2c00      	cmp	r4, #0
 800b206:	f040 80b2 	bne.w	800b36e <_dtoa_r+0x4fe>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1d3      	bne.n	800b1b6 <_dtoa_r+0x346>
 800b20e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 80b7 	beq.w	800b388 <_dtoa_r+0x518>
 800b21a:	2200      	movs	r2, #0
 800b21c:	4620      	mov	r0, r4
 800b21e:	4629      	mov	r1, r5
 800b220:	4b5d      	ldr	r3, [pc, #372]	@ (800b398 <_dtoa_r+0x528>)
 800b222:	f7f5 fbd5 	bl	80009d0 <__aeabi_dcmplt>
 800b226:	2800      	cmp	r0, #0
 800b228:	f000 80ae 	beq.w	800b388 <_dtoa_r+0x518>
 800b22c:	9b07      	ldr	r3, [sp, #28]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80aa 	beq.w	800b388 <_dtoa_r+0x518>
 800b234:	9b08      	ldr	r3, [sp, #32]
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd37      	ble.n	800b2aa <_dtoa_r+0x43a>
 800b23a:	1e7b      	subs	r3, r7, #1
 800b23c:	4620      	mov	r0, r4
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	2200      	movs	r2, #0
 800b242:	4629      	mov	r1, r5
 800b244:	4b55      	ldr	r3, [pc, #340]	@ (800b39c <_dtoa_r+0x52c>)
 800b246:	f7f5 f951 	bl	80004ec <__aeabi_dmul>
 800b24a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b24e:	9c08      	ldr	r4, [sp, #32]
 800b250:	3601      	adds	r6, #1
 800b252:	4630      	mov	r0, r6
 800b254:	f7f5 f8e0 	bl	8000418 <__aeabi_i2d>
 800b258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b25c:	f7f5 f946 	bl	80004ec <__aeabi_dmul>
 800b260:	2200      	movs	r2, #0
 800b262:	4b4f      	ldr	r3, [pc, #316]	@ (800b3a0 <_dtoa_r+0x530>)
 800b264:	f7f4 ff8c 	bl	8000180 <__adddf3>
 800b268:	4605      	mov	r5, r0
 800b26a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b26e:	2c00      	cmp	r4, #0
 800b270:	f040 809a 	bne.w	800b3a8 <_dtoa_r+0x538>
 800b274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b278:	2200      	movs	r2, #0
 800b27a:	4b4a      	ldr	r3, [pc, #296]	@ (800b3a4 <_dtoa_r+0x534>)
 800b27c:	f7f4 ff7e 	bl	800017c <__aeabi_dsub>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b288:	462a      	mov	r2, r5
 800b28a:	4633      	mov	r3, r6
 800b28c:	f7f5 fbbe 	bl	8000a0c <__aeabi_dcmpgt>
 800b290:	2800      	cmp	r0, #0
 800b292:	f040 828e 	bne.w	800b7b2 <_dtoa_r+0x942>
 800b296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29a:	462a      	mov	r2, r5
 800b29c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2a0:	f7f5 fb96 	bl	80009d0 <__aeabi_dcmplt>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	f040 8127 	bne.w	800b4f8 <_dtoa_r+0x688>
 800b2aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b2ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b2b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f2c0 8163 	blt.w	800b580 <_dtoa_r+0x710>
 800b2ba:	2f0e      	cmp	r7, #14
 800b2bc:	f300 8160 	bgt.w	800b580 <_dtoa_r+0x710>
 800b2c0:	4b33      	ldr	r3, [pc, #204]	@ (800b390 <_dtoa_r+0x520>)
 800b2c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b2ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b2ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	da03      	bge.n	800b2dc <_dtoa_r+0x46c>
 800b2d4:	9b07      	ldr	r3, [sp, #28]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f340 8100 	ble.w	800b4dc <_dtoa_r+0x66c>
 800b2dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2e0:	4656      	mov	r6, sl
 800b2e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 fa29 	bl	8000740 <__aeabi_ddiv>
 800b2ee:	f7f5 fbad 	bl	8000a4c <__aeabi_d2iz>
 800b2f2:	4680      	mov	r8, r0
 800b2f4:	f7f5 f890 	bl	8000418 <__aeabi_i2d>
 800b2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fc:	f7f5 f8f6 	bl	80004ec <__aeabi_dmul>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4620      	mov	r0, r4
 800b306:	4629      	mov	r1, r5
 800b308:	f7f4 ff38 	bl	800017c <__aeabi_dsub>
 800b30c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b310:	9d07      	ldr	r5, [sp, #28]
 800b312:	f806 4b01 	strb.w	r4, [r6], #1
 800b316:	eba6 040a 	sub.w	r4, r6, sl
 800b31a:	42a5      	cmp	r5, r4
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	f040 8116 	bne.w	800b550 <_dtoa_r+0x6e0>
 800b324:	f7f4 ff2c 	bl	8000180 <__adddf3>
 800b328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b32c:	4604      	mov	r4, r0
 800b32e:	460d      	mov	r5, r1
 800b330:	f7f5 fb6c 	bl	8000a0c <__aeabi_dcmpgt>
 800b334:	2800      	cmp	r0, #0
 800b336:	f040 80f8 	bne.w	800b52a <_dtoa_r+0x6ba>
 800b33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	f7f5 fb3b 	bl	80009bc <__aeabi_dcmpeq>
 800b346:	b118      	cbz	r0, 800b350 <_dtoa_r+0x4e0>
 800b348:	f018 0f01 	tst.w	r8, #1
 800b34c:	f040 80ed 	bne.w	800b52a <_dtoa_r+0x6ba>
 800b350:	4649      	mov	r1, r9
 800b352:	4658      	mov	r0, fp
 800b354:	f000 fc92 	bl	800bc7c <_Bfree>
 800b358:	2300      	movs	r3, #0
 800b35a:	7033      	strb	r3, [r6, #0]
 800b35c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b35e:	3701      	adds	r7, #1
 800b360:	601f      	str	r7, [r3, #0]
 800b362:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 8320 	beq.w	800b9aa <_dtoa_r+0xb3a>
 800b36a:	601e      	str	r6, [r3, #0]
 800b36c:	e31d      	b.n	800b9aa <_dtoa_r+0xb3a>
 800b36e:	07e2      	lsls	r2, r4, #31
 800b370:	d505      	bpl.n	800b37e <_dtoa_r+0x50e>
 800b372:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b376:	f7f5 f8b9 	bl	80004ec <__aeabi_dmul>
 800b37a:	2301      	movs	r3, #1
 800b37c:	3601      	adds	r6, #1
 800b37e:	1064      	asrs	r4, r4, #1
 800b380:	3508      	adds	r5, #8
 800b382:	e73f      	b.n	800b204 <_dtoa_r+0x394>
 800b384:	2602      	movs	r6, #2
 800b386:	e742      	b.n	800b20e <_dtoa_r+0x39e>
 800b388:	9c07      	ldr	r4, [sp, #28]
 800b38a:	9704      	str	r7, [sp, #16]
 800b38c:	e761      	b.n	800b252 <_dtoa_r+0x3e2>
 800b38e:	bf00      	nop
 800b390:	0800cca8 	.word	0x0800cca8
 800b394:	0800cc80 	.word	0x0800cc80
 800b398:	3ff00000 	.word	0x3ff00000
 800b39c:	40240000 	.word	0x40240000
 800b3a0:	401c0000 	.word	0x401c0000
 800b3a4:	40140000 	.word	0x40140000
 800b3a8:	4b70      	ldr	r3, [pc, #448]	@ (800b56c <_dtoa_r+0x6fc>)
 800b3aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3b4:	4454      	add	r4, sl
 800b3b6:	2900      	cmp	r1, #0
 800b3b8:	d045      	beq.n	800b446 <_dtoa_r+0x5d6>
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	496c      	ldr	r1, [pc, #432]	@ (800b570 <_dtoa_r+0x700>)
 800b3be:	f7f5 f9bf 	bl	8000740 <__aeabi_ddiv>
 800b3c2:	4633      	mov	r3, r6
 800b3c4:	462a      	mov	r2, r5
 800b3c6:	f7f4 fed9 	bl	800017c <__aeabi_dsub>
 800b3ca:	4656      	mov	r6, sl
 800b3cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3d4:	f7f5 fb3a 	bl	8000a4c <__aeabi_d2iz>
 800b3d8:	4605      	mov	r5, r0
 800b3da:	f7f5 f81d 	bl	8000418 <__aeabi_i2d>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3e6:	f7f4 fec9 	bl	800017c <__aeabi_dsub>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	3530      	adds	r5, #48	@ 0x30
 800b3f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3f8:	f806 5b01 	strb.w	r5, [r6], #1
 800b3fc:	f7f5 fae8 	bl	80009d0 <__aeabi_dcmplt>
 800b400:	2800      	cmp	r0, #0
 800b402:	d163      	bne.n	800b4cc <_dtoa_r+0x65c>
 800b404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b408:	2000      	movs	r0, #0
 800b40a:	495a      	ldr	r1, [pc, #360]	@ (800b574 <_dtoa_r+0x704>)
 800b40c:	f7f4 feb6 	bl	800017c <__aeabi_dsub>
 800b410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b414:	f7f5 fadc 	bl	80009d0 <__aeabi_dcmplt>
 800b418:	2800      	cmp	r0, #0
 800b41a:	f040 8087 	bne.w	800b52c <_dtoa_r+0x6bc>
 800b41e:	42a6      	cmp	r6, r4
 800b420:	f43f af43 	beq.w	800b2aa <_dtoa_r+0x43a>
 800b424:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b428:	2200      	movs	r2, #0
 800b42a:	4b53      	ldr	r3, [pc, #332]	@ (800b578 <_dtoa_r+0x708>)
 800b42c:	f7f5 f85e 	bl	80004ec <__aeabi_dmul>
 800b430:	2200      	movs	r2, #0
 800b432:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b43a:	4b4f      	ldr	r3, [pc, #316]	@ (800b578 <_dtoa_r+0x708>)
 800b43c:	f7f5 f856 	bl	80004ec <__aeabi_dmul>
 800b440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b444:	e7c4      	b.n	800b3d0 <_dtoa_r+0x560>
 800b446:	4631      	mov	r1, r6
 800b448:	4628      	mov	r0, r5
 800b44a:	f7f5 f84f 	bl	80004ec <__aeabi_dmul>
 800b44e:	4656      	mov	r6, sl
 800b450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b454:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b45a:	f7f5 faf7 	bl	8000a4c <__aeabi_d2iz>
 800b45e:	4605      	mov	r5, r0
 800b460:	f7f4 ffda 	bl	8000418 <__aeabi_i2d>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b46c:	f7f4 fe86 	bl	800017c <__aeabi_dsub>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	3530      	adds	r5, #48	@ 0x30
 800b476:	f806 5b01 	strb.w	r5, [r6], #1
 800b47a:	42a6      	cmp	r6, r4
 800b47c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b480:	f04f 0200 	mov.w	r2, #0
 800b484:	d124      	bne.n	800b4d0 <_dtoa_r+0x660>
 800b486:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b48a:	4b39      	ldr	r3, [pc, #228]	@ (800b570 <_dtoa_r+0x700>)
 800b48c:	f7f4 fe78 	bl	8000180 <__adddf3>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b498:	f7f5 fab8 	bl	8000a0c <__aeabi_dcmpgt>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d145      	bne.n	800b52c <_dtoa_r+0x6bc>
 800b4a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	4932      	ldr	r1, [pc, #200]	@ (800b570 <_dtoa_r+0x700>)
 800b4a8:	f7f4 fe68 	bl	800017c <__aeabi_dsub>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b4:	f7f5 fa8c 	bl	80009d0 <__aeabi_dcmplt>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	f43f aef6 	beq.w	800b2aa <_dtoa_r+0x43a>
 800b4be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b4c0:	1e73      	subs	r3, r6, #1
 800b4c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4c8:	2b30      	cmp	r3, #48	@ 0x30
 800b4ca:	d0f8      	beq.n	800b4be <_dtoa_r+0x64e>
 800b4cc:	9f04      	ldr	r7, [sp, #16]
 800b4ce:	e73f      	b.n	800b350 <_dtoa_r+0x4e0>
 800b4d0:	4b29      	ldr	r3, [pc, #164]	@ (800b578 <_dtoa_r+0x708>)
 800b4d2:	f7f5 f80b 	bl	80004ec <__aeabi_dmul>
 800b4d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4da:	e7bc      	b.n	800b456 <_dtoa_r+0x5e6>
 800b4dc:	d10c      	bne.n	800b4f8 <_dtoa_r+0x688>
 800b4de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	4b25      	ldr	r3, [pc, #148]	@ (800b57c <_dtoa_r+0x70c>)
 800b4e6:	f7f5 f801 	bl	80004ec <__aeabi_dmul>
 800b4ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ee:	f7f5 fa83 	bl	80009f8 <__aeabi_dcmpge>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f000 815b 	beq.w	800b7ae <_dtoa_r+0x93e>
 800b4f8:	2400      	movs	r4, #0
 800b4fa:	4625      	mov	r5, r4
 800b4fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b4fe:	4656      	mov	r6, sl
 800b500:	43db      	mvns	r3, r3
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	2700      	movs	r7, #0
 800b506:	4621      	mov	r1, r4
 800b508:	4658      	mov	r0, fp
 800b50a:	f000 fbb7 	bl	800bc7c <_Bfree>
 800b50e:	2d00      	cmp	r5, #0
 800b510:	d0dc      	beq.n	800b4cc <_dtoa_r+0x65c>
 800b512:	b12f      	cbz	r7, 800b520 <_dtoa_r+0x6b0>
 800b514:	42af      	cmp	r7, r5
 800b516:	d003      	beq.n	800b520 <_dtoa_r+0x6b0>
 800b518:	4639      	mov	r1, r7
 800b51a:	4658      	mov	r0, fp
 800b51c:	f000 fbae 	bl	800bc7c <_Bfree>
 800b520:	4629      	mov	r1, r5
 800b522:	4658      	mov	r0, fp
 800b524:	f000 fbaa 	bl	800bc7c <_Bfree>
 800b528:	e7d0      	b.n	800b4cc <_dtoa_r+0x65c>
 800b52a:	9704      	str	r7, [sp, #16]
 800b52c:	4633      	mov	r3, r6
 800b52e:	461e      	mov	r6, r3
 800b530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b534:	2a39      	cmp	r2, #57	@ 0x39
 800b536:	d107      	bne.n	800b548 <_dtoa_r+0x6d8>
 800b538:	459a      	cmp	sl, r3
 800b53a:	d1f8      	bne.n	800b52e <_dtoa_r+0x6be>
 800b53c:	9a04      	ldr	r2, [sp, #16]
 800b53e:	3201      	adds	r2, #1
 800b540:	9204      	str	r2, [sp, #16]
 800b542:	2230      	movs	r2, #48	@ 0x30
 800b544:	f88a 2000 	strb.w	r2, [sl]
 800b548:	781a      	ldrb	r2, [r3, #0]
 800b54a:	3201      	adds	r2, #1
 800b54c:	701a      	strb	r2, [r3, #0]
 800b54e:	e7bd      	b.n	800b4cc <_dtoa_r+0x65c>
 800b550:	2200      	movs	r2, #0
 800b552:	4b09      	ldr	r3, [pc, #36]	@ (800b578 <_dtoa_r+0x708>)
 800b554:	f7f4 ffca 	bl	80004ec <__aeabi_dmul>
 800b558:	2200      	movs	r2, #0
 800b55a:	2300      	movs	r3, #0
 800b55c:	4604      	mov	r4, r0
 800b55e:	460d      	mov	r5, r1
 800b560:	f7f5 fa2c 	bl	80009bc <__aeabi_dcmpeq>
 800b564:	2800      	cmp	r0, #0
 800b566:	f43f aebc 	beq.w	800b2e2 <_dtoa_r+0x472>
 800b56a:	e6f1      	b.n	800b350 <_dtoa_r+0x4e0>
 800b56c:	0800cca8 	.word	0x0800cca8
 800b570:	3fe00000 	.word	0x3fe00000
 800b574:	3ff00000 	.word	0x3ff00000
 800b578:	40240000 	.word	0x40240000
 800b57c:	40140000 	.word	0x40140000
 800b580:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b582:	2a00      	cmp	r2, #0
 800b584:	f000 80db 	beq.w	800b73e <_dtoa_r+0x8ce>
 800b588:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b58a:	2a01      	cmp	r2, #1
 800b58c:	f300 80bf 	bgt.w	800b70e <_dtoa_r+0x89e>
 800b590:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b592:	2a00      	cmp	r2, #0
 800b594:	f000 80b7 	beq.w	800b706 <_dtoa_r+0x896>
 800b598:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b59c:	4646      	mov	r6, r8
 800b59e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b5a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	441a      	add	r2, r3
 800b5a6:	4658      	mov	r0, fp
 800b5a8:	4498      	add	r8, r3
 800b5aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5ac:	f000 fc1a 	bl	800bde4 <__i2b>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	b15e      	cbz	r6, 800b5cc <_dtoa_r+0x75c>
 800b5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	dd08      	ble.n	800b5cc <_dtoa_r+0x75c>
 800b5ba:	42b3      	cmp	r3, r6
 800b5bc:	bfa8      	it	ge
 800b5be:	4633      	movge	r3, r6
 800b5c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5c2:	eba8 0803 	sub.w	r8, r8, r3
 800b5c6:	1af6      	subs	r6, r6, r3
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ce:	b1f3      	cbz	r3, 800b60e <_dtoa_r+0x79e>
 800b5d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80b7 	beq.w	800b746 <_dtoa_r+0x8d6>
 800b5d8:	b18c      	cbz	r4, 800b5fe <_dtoa_r+0x78e>
 800b5da:	4629      	mov	r1, r5
 800b5dc:	4622      	mov	r2, r4
 800b5de:	4658      	mov	r0, fp
 800b5e0:	f000 fcbe 	bl	800bf60 <__pow5mult>
 800b5e4:	464a      	mov	r2, r9
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	4605      	mov	r5, r0
 800b5ea:	4658      	mov	r0, fp
 800b5ec:	f000 fc10 	bl	800be10 <__multiply>
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	9004      	str	r0, [sp, #16]
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	f000 fb41 	bl	800bc7c <_Bfree>
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	4699      	mov	r9, r3
 800b5fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b600:	1b1a      	subs	r2, r3, r4
 800b602:	d004      	beq.n	800b60e <_dtoa_r+0x79e>
 800b604:	4649      	mov	r1, r9
 800b606:	4658      	mov	r0, fp
 800b608:	f000 fcaa 	bl	800bf60 <__pow5mult>
 800b60c:	4681      	mov	r9, r0
 800b60e:	2101      	movs	r1, #1
 800b610:	4658      	mov	r0, fp
 800b612:	f000 fbe7 	bl	800bde4 <__i2b>
 800b616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b618:	4604      	mov	r4, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 81c9 	beq.w	800b9b2 <_dtoa_r+0xb42>
 800b620:	461a      	mov	r2, r3
 800b622:	4601      	mov	r1, r0
 800b624:	4658      	mov	r0, fp
 800b626:	f000 fc9b 	bl	800bf60 <__pow5mult>
 800b62a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b62c:	4604      	mov	r4, r0
 800b62e:	2b01      	cmp	r3, #1
 800b630:	f300 808f 	bgt.w	800b752 <_dtoa_r+0x8e2>
 800b634:	9b02      	ldr	r3, [sp, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	f040 8087 	bne.w	800b74a <_dtoa_r+0x8da>
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b642:	2b00      	cmp	r3, #0
 800b644:	f040 8083 	bne.w	800b74e <_dtoa_r+0x8de>
 800b648:	9b03      	ldr	r3, [sp, #12]
 800b64a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b64e:	0d1b      	lsrs	r3, r3, #20
 800b650:	051b      	lsls	r3, r3, #20
 800b652:	b12b      	cbz	r3, 800b660 <_dtoa_r+0x7f0>
 800b654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b656:	f108 0801 	add.w	r8, r8, #1
 800b65a:	3301      	adds	r3, #1
 800b65c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b65e:	2301      	movs	r3, #1
 800b660:	930a      	str	r3, [sp, #40]	@ 0x28
 800b662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 81aa 	beq.w	800b9be <_dtoa_r+0xb4e>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b670:	6918      	ldr	r0, [r3, #16]
 800b672:	f000 fb6b 	bl	800bd4c <__hi0bits>
 800b676:	f1c0 0020 	rsb	r0, r0, #32
 800b67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b67c:	4418      	add	r0, r3
 800b67e:	f010 001f 	ands.w	r0, r0, #31
 800b682:	d071      	beq.n	800b768 <_dtoa_r+0x8f8>
 800b684:	f1c0 0320 	rsb	r3, r0, #32
 800b688:	2b04      	cmp	r3, #4
 800b68a:	dd65      	ble.n	800b758 <_dtoa_r+0x8e8>
 800b68c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b68e:	f1c0 001c 	rsb	r0, r0, #28
 800b692:	4403      	add	r3, r0
 800b694:	4480      	add	r8, r0
 800b696:	4406      	add	r6, r0
 800b698:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69a:	f1b8 0f00 	cmp.w	r8, #0
 800b69e:	dd05      	ble.n	800b6ac <_dtoa_r+0x83c>
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	4642      	mov	r2, r8
 800b6a4:	4658      	mov	r0, fp
 800b6a6:	f000 fcb5 	bl	800c014 <__lshift>
 800b6aa:	4681      	mov	r9, r0
 800b6ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	dd05      	ble.n	800b6be <_dtoa_r+0x84e>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	4658      	mov	r0, fp
 800b6b8:	f000 fcac 	bl	800c014 <__lshift>
 800b6bc:	4604      	mov	r4, r0
 800b6be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d053      	beq.n	800b76c <_dtoa_r+0x8fc>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4648      	mov	r0, r9
 800b6c8:	f000 fd10 	bl	800c0ec <__mcmp>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	da4d      	bge.n	800b76c <_dtoa_r+0x8fc>
 800b6d0:	1e7b      	subs	r3, r7, #1
 800b6d2:	4649      	mov	r1, r9
 800b6d4:	9304      	str	r3, [sp, #16]
 800b6d6:	220a      	movs	r2, #10
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4658      	mov	r0, fp
 800b6dc:	f000 faf0 	bl	800bcc0 <__multadd>
 800b6e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6e2:	4681      	mov	r9, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 816c 	beq.w	800b9c2 <_dtoa_r+0xb52>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	220a      	movs	r2, #10
 800b6f0:	4658      	mov	r0, fp
 800b6f2:	f000 fae5 	bl	800bcc0 <__multadd>
 800b6f6:	9b08      	ldr	r3, [sp, #32]
 800b6f8:	4605      	mov	r5, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	dc61      	bgt.n	800b7c2 <_dtoa_r+0x952>
 800b6fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b700:	2b02      	cmp	r3, #2
 800b702:	dc3b      	bgt.n	800b77c <_dtoa_r+0x90c>
 800b704:	e05d      	b.n	800b7c2 <_dtoa_r+0x952>
 800b706:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b708:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b70c:	e746      	b.n	800b59c <_dtoa_r+0x72c>
 800b70e:	9b07      	ldr	r3, [sp, #28]
 800b710:	1e5c      	subs	r4, r3, #1
 800b712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b714:	42a3      	cmp	r3, r4
 800b716:	bfbf      	itttt	lt
 800b718:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b71a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b71c:	1ae3      	sublt	r3, r4, r3
 800b71e:	18d2      	addlt	r2, r2, r3
 800b720:	bfa8      	it	ge
 800b722:	1b1c      	subge	r4, r3, r4
 800b724:	9b07      	ldr	r3, [sp, #28]
 800b726:	bfbe      	ittt	lt
 800b728:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b72a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b72c:	2400      	movlt	r4, #0
 800b72e:	2b00      	cmp	r3, #0
 800b730:	bfb5      	itete	lt
 800b732:	eba8 0603 	sublt.w	r6, r8, r3
 800b736:	4646      	movge	r6, r8
 800b738:	2300      	movlt	r3, #0
 800b73a:	9b07      	ldrge	r3, [sp, #28]
 800b73c:	e730      	b.n	800b5a0 <_dtoa_r+0x730>
 800b73e:	4646      	mov	r6, r8
 800b740:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b742:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b744:	e735      	b.n	800b5b2 <_dtoa_r+0x742>
 800b746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b748:	e75c      	b.n	800b604 <_dtoa_r+0x794>
 800b74a:	2300      	movs	r3, #0
 800b74c:	e788      	b.n	800b660 <_dtoa_r+0x7f0>
 800b74e:	9b02      	ldr	r3, [sp, #8]
 800b750:	e786      	b.n	800b660 <_dtoa_r+0x7f0>
 800b752:	2300      	movs	r3, #0
 800b754:	930a      	str	r3, [sp, #40]	@ 0x28
 800b756:	e788      	b.n	800b66a <_dtoa_r+0x7fa>
 800b758:	d09f      	beq.n	800b69a <_dtoa_r+0x82a>
 800b75a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b75c:	331c      	adds	r3, #28
 800b75e:	441a      	add	r2, r3
 800b760:	4498      	add	r8, r3
 800b762:	441e      	add	r6, r3
 800b764:	9209      	str	r2, [sp, #36]	@ 0x24
 800b766:	e798      	b.n	800b69a <_dtoa_r+0x82a>
 800b768:	4603      	mov	r3, r0
 800b76a:	e7f6      	b.n	800b75a <_dtoa_r+0x8ea>
 800b76c:	9b07      	ldr	r3, [sp, #28]
 800b76e:	9704      	str	r7, [sp, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	dc20      	bgt.n	800b7b6 <_dtoa_r+0x946>
 800b774:	9308      	str	r3, [sp, #32]
 800b776:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b778:	2b02      	cmp	r3, #2
 800b77a:	dd1e      	ble.n	800b7ba <_dtoa_r+0x94a>
 800b77c:	9b08      	ldr	r3, [sp, #32]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f47f aebc 	bne.w	800b4fc <_dtoa_r+0x68c>
 800b784:	4621      	mov	r1, r4
 800b786:	2205      	movs	r2, #5
 800b788:	4658      	mov	r0, fp
 800b78a:	f000 fa99 	bl	800bcc0 <__multadd>
 800b78e:	4601      	mov	r1, r0
 800b790:	4604      	mov	r4, r0
 800b792:	4648      	mov	r0, r9
 800b794:	f000 fcaa 	bl	800c0ec <__mcmp>
 800b798:	2800      	cmp	r0, #0
 800b79a:	f77f aeaf 	ble.w	800b4fc <_dtoa_r+0x68c>
 800b79e:	2331      	movs	r3, #49	@ 0x31
 800b7a0:	4656      	mov	r6, sl
 800b7a2:	f806 3b01 	strb.w	r3, [r6], #1
 800b7a6:	9b04      	ldr	r3, [sp, #16]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	9304      	str	r3, [sp, #16]
 800b7ac:	e6aa      	b.n	800b504 <_dtoa_r+0x694>
 800b7ae:	9c07      	ldr	r4, [sp, #28]
 800b7b0:	9704      	str	r7, [sp, #16]
 800b7b2:	4625      	mov	r5, r4
 800b7b4:	e7f3      	b.n	800b79e <_dtoa_r+0x92e>
 800b7b6:	9b07      	ldr	r3, [sp, #28]
 800b7b8:	9308      	str	r3, [sp, #32]
 800b7ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 8104 	beq.w	800b9ca <_dtoa_r+0xb5a>
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	dd05      	ble.n	800b7d2 <_dtoa_r+0x962>
 800b7c6:	4629      	mov	r1, r5
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	4658      	mov	r0, fp
 800b7cc:	f000 fc22 	bl	800c014 <__lshift>
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d05a      	beq.n	800b88e <_dtoa_r+0xa1e>
 800b7d8:	4658      	mov	r0, fp
 800b7da:	6869      	ldr	r1, [r5, #4]
 800b7dc:	f000 fa0e 	bl	800bbfc <_Balloc>
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	b928      	cbnz	r0, 800b7f0 <_dtoa_r+0x980>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7ea:	4b83      	ldr	r3, [pc, #524]	@ (800b9f8 <_dtoa_r+0xb88>)
 800b7ec:	f7ff bb54 	b.w	800ae98 <_dtoa_r+0x28>
 800b7f0:	692a      	ldr	r2, [r5, #16]
 800b7f2:	f105 010c 	add.w	r1, r5, #12
 800b7f6:	3202      	adds	r2, #2
 800b7f8:	0092      	lsls	r2, r2, #2
 800b7fa:	300c      	adds	r0, #12
 800b7fc:	f7ff fa9f 	bl	800ad3e <memcpy>
 800b800:	2201      	movs	r2, #1
 800b802:	4631      	mov	r1, r6
 800b804:	4658      	mov	r0, fp
 800b806:	f000 fc05 	bl	800c014 <__lshift>
 800b80a:	462f      	mov	r7, r5
 800b80c:	4605      	mov	r5, r0
 800b80e:	f10a 0301 	add.w	r3, sl, #1
 800b812:	9307      	str	r3, [sp, #28]
 800b814:	9b08      	ldr	r3, [sp, #32]
 800b816:	4453      	add	r3, sl
 800b818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	930a      	str	r3, [sp, #40]	@ 0x28
 800b822:	9b07      	ldr	r3, [sp, #28]
 800b824:	4621      	mov	r1, r4
 800b826:	3b01      	subs	r3, #1
 800b828:	4648      	mov	r0, r9
 800b82a:	9302      	str	r3, [sp, #8]
 800b82c:	f7ff fa95 	bl	800ad5a <quorem>
 800b830:	4639      	mov	r1, r7
 800b832:	9008      	str	r0, [sp, #32]
 800b834:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b838:	4648      	mov	r0, r9
 800b83a:	f000 fc57 	bl	800c0ec <__mcmp>
 800b83e:	462a      	mov	r2, r5
 800b840:	9009      	str	r0, [sp, #36]	@ 0x24
 800b842:	4621      	mov	r1, r4
 800b844:	4658      	mov	r0, fp
 800b846:	f000 fc6d 	bl	800c124 <__mdiff>
 800b84a:	68c2      	ldr	r2, [r0, #12]
 800b84c:	4606      	mov	r6, r0
 800b84e:	bb02      	cbnz	r2, 800b892 <_dtoa_r+0xa22>
 800b850:	4601      	mov	r1, r0
 800b852:	4648      	mov	r0, r9
 800b854:	f000 fc4a 	bl	800c0ec <__mcmp>
 800b858:	4602      	mov	r2, r0
 800b85a:	4631      	mov	r1, r6
 800b85c:	4658      	mov	r0, fp
 800b85e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b860:	f000 fa0c 	bl	800bc7c <_Bfree>
 800b864:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b866:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b868:	9e07      	ldr	r6, [sp, #28]
 800b86a:	ea43 0102 	orr.w	r1, r3, r2
 800b86e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b870:	4319      	orrs	r1, r3
 800b872:	d110      	bne.n	800b896 <_dtoa_r+0xa26>
 800b874:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b878:	d029      	beq.n	800b8ce <_dtoa_r+0xa5e>
 800b87a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dd02      	ble.n	800b886 <_dtoa_r+0xa16>
 800b880:	9b08      	ldr	r3, [sp, #32]
 800b882:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	f883 8000 	strb.w	r8, [r3]
 800b88c:	e63b      	b.n	800b506 <_dtoa_r+0x696>
 800b88e:	4628      	mov	r0, r5
 800b890:	e7bb      	b.n	800b80a <_dtoa_r+0x99a>
 800b892:	2201      	movs	r2, #1
 800b894:	e7e1      	b.n	800b85a <_dtoa_r+0x9ea>
 800b896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	db04      	blt.n	800b8a6 <_dtoa_r+0xa36>
 800b89c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b89e:	430b      	orrs	r3, r1
 800b8a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8a2:	430b      	orrs	r3, r1
 800b8a4:	d120      	bne.n	800b8e8 <_dtoa_r+0xa78>
 800b8a6:	2a00      	cmp	r2, #0
 800b8a8:	dded      	ble.n	800b886 <_dtoa_r+0xa16>
 800b8aa:	4649      	mov	r1, r9
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	4658      	mov	r0, fp
 800b8b0:	f000 fbb0 	bl	800c014 <__lshift>
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4681      	mov	r9, r0
 800b8b8:	f000 fc18 	bl	800c0ec <__mcmp>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	dc03      	bgt.n	800b8c8 <_dtoa_r+0xa58>
 800b8c0:	d1e1      	bne.n	800b886 <_dtoa_r+0xa16>
 800b8c2:	f018 0f01 	tst.w	r8, #1
 800b8c6:	d0de      	beq.n	800b886 <_dtoa_r+0xa16>
 800b8c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8cc:	d1d8      	bne.n	800b880 <_dtoa_r+0xa10>
 800b8ce:	2339      	movs	r3, #57	@ 0x39
 800b8d0:	9a02      	ldr	r2, [sp, #8]
 800b8d2:	7013      	strb	r3, [r2, #0]
 800b8d4:	4633      	mov	r3, r6
 800b8d6:	461e      	mov	r6, r3
 800b8d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	2a39      	cmp	r2, #57	@ 0x39
 800b8e0:	d052      	beq.n	800b988 <_dtoa_r+0xb18>
 800b8e2:	3201      	adds	r2, #1
 800b8e4:	701a      	strb	r2, [r3, #0]
 800b8e6:	e60e      	b.n	800b506 <_dtoa_r+0x696>
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	dd07      	ble.n	800b8fc <_dtoa_r+0xa8c>
 800b8ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8f0:	d0ed      	beq.n	800b8ce <_dtoa_r+0xa5e>
 800b8f2:	9a02      	ldr	r2, [sp, #8]
 800b8f4:	f108 0301 	add.w	r3, r8, #1
 800b8f8:	7013      	strb	r3, [r2, #0]
 800b8fa:	e604      	b.n	800b506 <_dtoa_r+0x696>
 800b8fc:	9b07      	ldr	r3, [sp, #28]
 800b8fe:	9a07      	ldr	r2, [sp, #28]
 800b900:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b906:	4293      	cmp	r3, r2
 800b908:	d028      	beq.n	800b95c <_dtoa_r+0xaec>
 800b90a:	4649      	mov	r1, r9
 800b90c:	2300      	movs	r3, #0
 800b90e:	220a      	movs	r2, #10
 800b910:	4658      	mov	r0, fp
 800b912:	f000 f9d5 	bl	800bcc0 <__multadd>
 800b916:	42af      	cmp	r7, r5
 800b918:	4681      	mov	r9, r0
 800b91a:	f04f 0300 	mov.w	r3, #0
 800b91e:	f04f 020a 	mov.w	r2, #10
 800b922:	4639      	mov	r1, r7
 800b924:	4658      	mov	r0, fp
 800b926:	d107      	bne.n	800b938 <_dtoa_r+0xac8>
 800b928:	f000 f9ca 	bl	800bcc0 <__multadd>
 800b92c:	4607      	mov	r7, r0
 800b92e:	4605      	mov	r5, r0
 800b930:	9b07      	ldr	r3, [sp, #28]
 800b932:	3301      	adds	r3, #1
 800b934:	9307      	str	r3, [sp, #28]
 800b936:	e774      	b.n	800b822 <_dtoa_r+0x9b2>
 800b938:	f000 f9c2 	bl	800bcc0 <__multadd>
 800b93c:	4629      	mov	r1, r5
 800b93e:	4607      	mov	r7, r0
 800b940:	2300      	movs	r3, #0
 800b942:	220a      	movs	r2, #10
 800b944:	4658      	mov	r0, fp
 800b946:	f000 f9bb 	bl	800bcc0 <__multadd>
 800b94a:	4605      	mov	r5, r0
 800b94c:	e7f0      	b.n	800b930 <_dtoa_r+0xac0>
 800b94e:	9b08      	ldr	r3, [sp, #32]
 800b950:	2700      	movs	r7, #0
 800b952:	2b00      	cmp	r3, #0
 800b954:	bfcc      	ite	gt
 800b956:	461e      	movgt	r6, r3
 800b958:	2601      	movle	r6, #1
 800b95a:	4456      	add	r6, sl
 800b95c:	4649      	mov	r1, r9
 800b95e:	2201      	movs	r2, #1
 800b960:	4658      	mov	r0, fp
 800b962:	f000 fb57 	bl	800c014 <__lshift>
 800b966:	4621      	mov	r1, r4
 800b968:	4681      	mov	r9, r0
 800b96a:	f000 fbbf 	bl	800c0ec <__mcmp>
 800b96e:	2800      	cmp	r0, #0
 800b970:	dcb0      	bgt.n	800b8d4 <_dtoa_r+0xa64>
 800b972:	d102      	bne.n	800b97a <_dtoa_r+0xb0a>
 800b974:	f018 0f01 	tst.w	r8, #1
 800b978:	d1ac      	bne.n	800b8d4 <_dtoa_r+0xa64>
 800b97a:	4633      	mov	r3, r6
 800b97c:	461e      	mov	r6, r3
 800b97e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b982:	2a30      	cmp	r2, #48	@ 0x30
 800b984:	d0fa      	beq.n	800b97c <_dtoa_r+0xb0c>
 800b986:	e5be      	b.n	800b506 <_dtoa_r+0x696>
 800b988:	459a      	cmp	sl, r3
 800b98a:	d1a4      	bne.n	800b8d6 <_dtoa_r+0xa66>
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	3301      	adds	r3, #1
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	2331      	movs	r3, #49	@ 0x31
 800b994:	f88a 3000 	strb.w	r3, [sl]
 800b998:	e5b5      	b.n	800b506 <_dtoa_r+0x696>
 800b99a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b99c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b9fc <_dtoa_r+0xb8c>
 800b9a0:	b11b      	cbz	r3, 800b9aa <_dtoa_r+0xb3a>
 800b9a2:	f10a 0308 	add.w	r3, sl, #8
 800b9a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b9a8:	6013      	str	r3, [r2, #0]
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	b017      	add	sp, #92	@ 0x5c
 800b9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	f77f ae3d 	ble.w	800b634 <_dtoa_r+0x7c4>
 800b9ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9be:	2001      	movs	r0, #1
 800b9c0:	e65b      	b.n	800b67a <_dtoa_r+0x80a>
 800b9c2:	9b08      	ldr	r3, [sp, #32]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f77f aed6 	ble.w	800b776 <_dtoa_r+0x906>
 800b9ca:	4656      	mov	r6, sl
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4648      	mov	r0, r9
 800b9d0:	f7ff f9c3 	bl	800ad5a <quorem>
 800b9d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9d8:	9b08      	ldr	r3, [sp, #32]
 800b9da:	f806 8b01 	strb.w	r8, [r6], #1
 800b9de:	eba6 020a 	sub.w	r2, r6, sl
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	ddb3      	ble.n	800b94e <_dtoa_r+0xade>
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	220a      	movs	r2, #10
 800b9ec:	4658      	mov	r0, fp
 800b9ee:	f000 f967 	bl	800bcc0 <__multadd>
 800b9f2:	4681      	mov	r9, r0
 800b9f4:	e7ea      	b.n	800b9cc <_dtoa_r+0xb5c>
 800b9f6:	bf00      	nop
 800b9f8:	0800cc0a 	.word	0x0800cc0a
 800b9fc:	0800cb8e 	.word	0x0800cb8e

0800ba00 <_free_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4605      	mov	r5, r0
 800ba04:	2900      	cmp	r1, #0
 800ba06:	d040      	beq.n	800ba8a <_free_r+0x8a>
 800ba08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba0c:	1f0c      	subs	r4, r1, #4
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfb8      	it	lt
 800ba12:	18e4      	addlt	r4, r4, r3
 800ba14:	f000 f8e6 	bl	800bbe4 <__malloc_lock>
 800ba18:	4a1c      	ldr	r2, [pc, #112]	@ (800ba8c <_free_r+0x8c>)
 800ba1a:	6813      	ldr	r3, [r2, #0]
 800ba1c:	b933      	cbnz	r3, 800ba2c <_free_r+0x2c>
 800ba1e:	6063      	str	r3, [r4, #4]
 800ba20:	6014      	str	r4, [r2, #0]
 800ba22:	4628      	mov	r0, r5
 800ba24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba28:	f000 b8e2 	b.w	800bbf0 <__malloc_unlock>
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	d908      	bls.n	800ba42 <_free_r+0x42>
 800ba30:	6820      	ldr	r0, [r4, #0]
 800ba32:	1821      	adds	r1, r4, r0
 800ba34:	428b      	cmp	r3, r1
 800ba36:	bf01      	itttt	eq
 800ba38:	6819      	ldreq	r1, [r3, #0]
 800ba3a:	685b      	ldreq	r3, [r3, #4]
 800ba3c:	1809      	addeq	r1, r1, r0
 800ba3e:	6021      	streq	r1, [r4, #0]
 800ba40:	e7ed      	b.n	800ba1e <_free_r+0x1e>
 800ba42:	461a      	mov	r2, r3
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	b10b      	cbz	r3, 800ba4c <_free_r+0x4c>
 800ba48:	42a3      	cmp	r3, r4
 800ba4a:	d9fa      	bls.n	800ba42 <_free_r+0x42>
 800ba4c:	6811      	ldr	r1, [r2, #0]
 800ba4e:	1850      	adds	r0, r2, r1
 800ba50:	42a0      	cmp	r0, r4
 800ba52:	d10b      	bne.n	800ba6c <_free_r+0x6c>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	4401      	add	r1, r0
 800ba58:	1850      	adds	r0, r2, r1
 800ba5a:	4283      	cmp	r3, r0
 800ba5c:	6011      	str	r1, [r2, #0]
 800ba5e:	d1e0      	bne.n	800ba22 <_free_r+0x22>
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	4408      	add	r0, r1
 800ba66:	6010      	str	r0, [r2, #0]
 800ba68:	6053      	str	r3, [r2, #4]
 800ba6a:	e7da      	b.n	800ba22 <_free_r+0x22>
 800ba6c:	d902      	bls.n	800ba74 <_free_r+0x74>
 800ba6e:	230c      	movs	r3, #12
 800ba70:	602b      	str	r3, [r5, #0]
 800ba72:	e7d6      	b.n	800ba22 <_free_r+0x22>
 800ba74:	6820      	ldr	r0, [r4, #0]
 800ba76:	1821      	adds	r1, r4, r0
 800ba78:	428b      	cmp	r3, r1
 800ba7a:	bf01      	itttt	eq
 800ba7c:	6819      	ldreq	r1, [r3, #0]
 800ba7e:	685b      	ldreq	r3, [r3, #4]
 800ba80:	1809      	addeq	r1, r1, r0
 800ba82:	6021      	streq	r1, [r4, #0]
 800ba84:	6063      	str	r3, [r4, #4]
 800ba86:	6054      	str	r4, [r2, #4]
 800ba88:	e7cb      	b.n	800ba22 <_free_r+0x22>
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	2000178c 	.word	0x2000178c

0800ba90 <malloc>:
 800ba90:	4b02      	ldr	r3, [pc, #8]	@ (800ba9c <malloc+0xc>)
 800ba92:	4601      	mov	r1, r0
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	f000 b825 	b.w	800bae4 <_malloc_r>
 800ba9a:	bf00      	nop
 800ba9c:	20000190 	.word	0x20000190

0800baa0 <sbrk_aligned>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	4e0f      	ldr	r6, [pc, #60]	@ (800bae0 <sbrk_aligned+0x40>)
 800baa4:	460c      	mov	r4, r1
 800baa6:	6831      	ldr	r1, [r6, #0]
 800baa8:	4605      	mov	r5, r0
 800baaa:	b911      	cbnz	r1, 800bab2 <sbrk_aligned+0x12>
 800baac:	f000 fe92 	bl	800c7d4 <_sbrk_r>
 800bab0:	6030      	str	r0, [r6, #0]
 800bab2:	4621      	mov	r1, r4
 800bab4:	4628      	mov	r0, r5
 800bab6:	f000 fe8d 	bl	800c7d4 <_sbrk_r>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d103      	bne.n	800bac6 <sbrk_aligned+0x26>
 800babe:	f04f 34ff 	mov.w	r4, #4294967295
 800bac2:	4620      	mov	r0, r4
 800bac4:	bd70      	pop	{r4, r5, r6, pc}
 800bac6:	1cc4      	adds	r4, r0, #3
 800bac8:	f024 0403 	bic.w	r4, r4, #3
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d0f8      	beq.n	800bac2 <sbrk_aligned+0x22>
 800bad0:	1a21      	subs	r1, r4, r0
 800bad2:	4628      	mov	r0, r5
 800bad4:	f000 fe7e 	bl	800c7d4 <_sbrk_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	d1f2      	bne.n	800bac2 <sbrk_aligned+0x22>
 800badc:	e7ef      	b.n	800babe <sbrk_aligned+0x1e>
 800bade:	bf00      	nop
 800bae0:	20001788 	.word	0x20001788

0800bae4 <_malloc_r>:
 800bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bae8:	1ccd      	adds	r5, r1, #3
 800baea:	f025 0503 	bic.w	r5, r5, #3
 800baee:	3508      	adds	r5, #8
 800baf0:	2d0c      	cmp	r5, #12
 800baf2:	bf38      	it	cc
 800baf4:	250c      	movcc	r5, #12
 800baf6:	2d00      	cmp	r5, #0
 800baf8:	4606      	mov	r6, r0
 800bafa:	db01      	blt.n	800bb00 <_malloc_r+0x1c>
 800bafc:	42a9      	cmp	r1, r5
 800bafe:	d904      	bls.n	800bb0a <_malloc_r+0x26>
 800bb00:	230c      	movs	r3, #12
 800bb02:	6033      	str	r3, [r6, #0]
 800bb04:	2000      	movs	r0, #0
 800bb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbe0 <_malloc_r+0xfc>
 800bb0e:	f000 f869 	bl	800bbe4 <__malloc_lock>
 800bb12:	f8d8 3000 	ldr.w	r3, [r8]
 800bb16:	461c      	mov	r4, r3
 800bb18:	bb44      	cbnz	r4, 800bb6c <_malloc_r+0x88>
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	f7ff ffbf 	bl	800baa0 <sbrk_aligned>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	4604      	mov	r4, r0
 800bb26:	d158      	bne.n	800bbda <_malloc_r+0xf6>
 800bb28:	f8d8 4000 	ldr.w	r4, [r8]
 800bb2c:	4627      	mov	r7, r4
 800bb2e:	2f00      	cmp	r7, #0
 800bb30:	d143      	bne.n	800bbba <_malloc_r+0xd6>
 800bb32:	2c00      	cmp	r4, #0
 800bb34:	d04b      	beq.n	800bbce <_malloc_r+0xea>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	4639      	mov	r1, r7
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	eb04 0903 	add.w	r9, r4, r3
 800bb40:	f000 fe48 	bl	800c7d4 <_sbrk_r>
 800bb44:	4581      	cmp	r9, r0
 800bb46:	d142      	bne.n	800bbce <_malloc_r+0xea>
 800bb48:	6821      	ldr	r1, [r4, #0]
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	1a6d      	subs	r5, r5, r1
 800bb4e:	4629      	mov	r1, r5
 800bb50:	f7ff ffa6 	bl	800baa0 <sbrk_aligned>
 800bb54:	3001      	adds	r0, #1
 800bb56:	d03a      	beq.n	800bbce <_malloc_r+0xea>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	442b      	add	r3, r5
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	bb62      	cbnz	r2, 800bbc0 <_malloc_r+0xdc>
 800bb66:	f8c8 7000 	str.w	r7, [r8]
 800bb6a:	e00f      	b.n	800bb8c <_malloc_r+0xa8>
 800bb6c:	6822      	ldr	r2, [r4, #0]
 800bb6e:	1b52      	subs	r2, r2, r5
 800bb70:	d420      	bmi.n	800bbb4 <_malloc_r+0xd0>
 800bb72:	2a0b      	cmp	r2, #11
 800bb74:	d917      	bls.n	800bba6 <_malloc_r+0xc2>
 800bb76:	1961      	adds	r1, r4, r5
 800bb78:	42a3      	cmp	r3, r4
 800bb7a:	6025      	str	r5, [r4, #0]
 800bb7c:	bf18      	it	ne
 800bb7e:	6059      	strne	r1, [r3, #4]
 800bb80:	6863      	ldr	r3, [r4, #4]
 800bb82:	bf08      	it	eq
 800bb84:	f8c8 1000 	streq.w	r1, [r8]
 800bb88:	5162      	str	r2, [r4, r5]
 800bb8a:	604b      	str	r3, [r1, #4]
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f000 f82f 	bl	800bbf0 <__malloc_unlock>
 800bb92:	f104 000b 	add.w	r0, r4, #11
 800bb96:	1d23      	adds	r3, r4, #4
 800bb98:	f020 0007 	bic.w	r0, r0, #7
 800bb9c:	1ac2      	subs	r2, r0, r3
 800bb9e:	bf1c      	itt	ne
 800bba0:	1a1b      	subne	r3, r3, r0
 800bba2:	50a3      	strne	r3, [r4, r2]
 800bba4:	e7af      	b.n	800bb06 <_malloc_r+0x22>
 800bba6:	6862      	ldr	r2, [r4, #4]
 800bba8:	42a3      	cmp	r3, r4
 800bbaa:	bf0c      	ite	eq
 800bbac:	f8c8 2000 	streq.w	r2, [r8]
 800bbb0:	605a      	strne	r2, [r3, #4]
 800bbb2:	e7eb      	b.n	800bb8c <_malloc_r+0xa8>
 800bbb4:	4623      	mov	r3, r4
 800bbb6:	6864      	ldr	r4, [r4, #4]
 800bbb8:	e7ae      	b.n	800bb18 <_malloc_r+0x34>
 800bbba:	463c      	mov	r4, r7
 800bbbc:	687f      	ldr	r7, [r7, #4]
 800bbbe:	e7b6      	b.n	800bb2e <_malloc_r+0x4a>
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	42a3      	cmp	r3, r4
 800bbc6:	d1fb      	bne.n	800bbc0 <_malloc_r+0xdc>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	6053      	str	r3, [r2, #4]
 800bbcc:	e7de      	b.n	800bb8c <_malloc_r+0xa8>
 800bbce:	230c      	movs	r3, #12
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	6033      	str	r3, [r6, #0]
 800bbd4:	f000 f80c 	bl	800bbf0 <__malloc_unlock>
 800bbd8:	e794      	b.n	800bb04 <_malloc_r+0x20>
 800bbda:	6005      	str	r5, [r0, #0]
 800bbdc:	e7d6      	b.n	800bb8c <_malloc_r+0xa8>
 800bbde:	bf00      	nop
 800bbe0:	2000178c 	.word	0x2000178c

0800bbe4 <__malloc_lock>:
 800bbe4:	4801      	ldr	r0, [pc, #4]	@ (800bbec <__malloc_lock+0x8>)
 800bbe6:	f7ff b89a 	b.w	800ad1e <__retarget_lock_acquire_recursive>
 800bbea:	bf00      	nop
 800bbec:	20001784 	.word	0x20001784

0800bbf0 <__malloc_unlock>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	@ (800bbf8 <__malloc_unlock+0x8>)
 800bbf2:	f7ff b895 	b.w	800ad20 <__retarget_lock_release_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	20001784 	.word	0x20001784

0800bbfc <_Balloc>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	69c6      	ldr	r6, [r0, #28]
 800bc00:	4604      	mov	r4, r0
 800bc02:	460d      	mov	r5, r1
 800bc04:	b976      	cbnz	r6, 800bc24 <_Balloc+0x28>
 800bc06:	2010      	movs	r0, #16
 800bc08:	f7ff ff42 	bl	800ba90 <malloc>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	61e0      	str	r0, [r4, #28]
 800bc10:	b920      	cbnz	r0, 800bc1c <_Balloc+0x20>
 800bc12:	216b      	movs	r1, #107	@ 0x6b
 800bc14:	4b17      	ldr	r3, [pc, #92]	@ (800bc74 <_Balloc+0x78>)
 800bc16:	4818      	ldr	r0, [pc, #96]	@ (800bc78 <_Balloc+0x7c>)
 800bc18:	f000 fdec 	bl	800c7f4 <__assert_func>
 800bc1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc20:	6006      	str	r6, [r0, #0]
 800bc22:	60c6      	str	r6, [r0, #12]
 800bc24:	69e6      	ldr	r6, [r4, #28]
 800bc26:	68f3      	ldr	r3, [r6, #12]
 800bc28:	b183      	cbz	r3, 800bc4c <_Balloc+0x50>
 800bc2a:	69e3      	ldr	r3, [r4, #28]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc32:	b9b8      	cbnz	r0, 800bc64 <_Balloc+0x68>
 800bc34:	2101      	movs	r1, #1
 800bc36:	fa01 f605 	lsl.w	r6, r1, r5
 800bc3a:	1d72      	adds	r2, r6, #5
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	0092      	lsls	r2, r2, #2
 800bc40:	f000 fdf6 	bl	800c830 <_calloc_r>
 800bc44:	b160      	cbz	r0, 800bc60 <_Balloc+0x64>
 800bc46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc4a:	e00e      	b.n	800bc6a <_Balloc+0x6e>
 800bc4c:	2221      	movs	r2, #33	@ 0x21
 800bc4e:	2104      	movs	r1, #4
 800bc50:	4620      	mov	r0, r4
 800bc52:	f000 fded 	bl	800c830 <_calloc_r>
 800bc56:	69e3      	ldr	r3, [r4, #28]
 800bc58:	60f0      	str	r0, [r6, #12]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1e4      	bne.n	800bc2a <_Balloc+0x2e>
 800bc60:	2000      	movs	r0, #0
 800bc62:	bd70      	pop	{r4, r5, r6, pc}
 800bc64:	6802      	ldr	r2, [r0, #0]
 800bc66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc70:	e7f7      	b.n	800bc62 <_Balloc+0x66>
 800bc72:	bf00      	nop
 800bc74:	0800cb9b 	.word	0x0800cb9b
 800bc78:	0800cc1b 	.word	0x0800cc1b

0800bc7c <_Bfree>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	69c6      	ldr	r6, [r0, #28]
 800bc80:	4605      	mov	r5, r0
 800bc82:	460c      	mov	r4, r1
 800bc84:	b976      	cbnz	r6, 800bca4 <_Bfree+0x28>
 800bc86:	2010      	movs	r0, #16
 800bc88:	f7ff ff02 	bl	800ba90 <malloc>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	61e8      	str	r0, [r5, #28]
 800bc90:	b920      	cbnz	r0, 800bc9c <_Bfree+0x20>
 800bc92:	218f      	movs	r1, #143	@ 0x8f
 800bc94:	4b08      	ldr	r3, [pc, #32]	@ (800bcb8 <_Bfree+0x3c>)
 800bc96:	4809      	ldr	r0, [pc, #36]	@ (800bcbc <_Bfree+0x40>)
 800bc98:	f000 fdac 	bl	800c7f4 <__assert_func>
 800bc9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bca0:	6006      	str	r6, [r0, #0]
 800bca2:	60c6      	str	r6, [r0, #12]
 800bca4:	b13c      	cbz	r4, 800bcb6 <_Bfree+0x3a>
 800bca6:	69eb      	ldr	r3, [r5, #28]
 800bca8:	6862      	ldr	r2, [r4, #4]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bcb0:	6021      	str	r1, [r4, #0]
 800bcb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}
 800bcb8:	0800cb9b 	.word	0x0800cb9b
 800bcbc:	0800cc1b 	.word	0x0800cc1b

0800bcc0 <__multadd>:
 800bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	460c      	mov	r4, r1
 800bcc8:	461e      	mov	r6, r3
 800bcca:	2000      	movs	r0, #0
 800bccc:	690d      	ldr	r5, [r1, #16]
 800bcce:	f101 0c14 	add.w	ip, r1, #20
 800bcd2:	f8dc 3000 	ldr.w	r3, [ip]
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	b299      	uxth	r1, r3
 800bcda:	fb02 6101 	mla	r1, r2, r1, r6
 800bcde:	0c1e      	lsrs	r6, r3, #16
 800bce0:	0c0b      	lsrs	r3, r1, #16
 800bce2:	fb02 3306 	mla	r3, r2, r6, r3
 800bce6:	b289      	uxth	r1, r1
 800bce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bcec:	4285      	cmp	r5, r0
 800bcee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bcf2:	f84c 1b04 	str.w	r1, [ip], #4
 800bcf6:	dcec      	bgt.n	800bcd2 <__multadd+0x12>
 800bcf8:	b30e      	cbz	r6, 800bd3e <__multadd+0x7e>
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	42ab      	cmp	r3, r5
 800bcfe:	dc19      	bgt.n	800bd34 <__multadd+0x74>
 800bd00:	6861      	ldr	r1, [r4, #4]
 800bd02:	4638      	mov	r0, r7
 800bd04:	3101      	adds	r1, #1
 800bd06:	f7ff ff79 	bl	800bbfc <_Balloc>
 800bd0a:	4680      	mov	r8, r0
 800bd0c:	b928      	cbnz	r0, 800bd1a <__multadd+0x5a>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	21ba      	movs	r1, #186	@ 0xba
 800bd12:	4b0c      	ldr	r3, [pc, #48]	@ (800bd44 <__multadd+0x84>)
 800bd14:	480c      	ldr	r0, [pc, #48]	@ (800bd48 <__multadd+0x88>)
 800bd16:	f000 fd6d 	bl	800c7f4 <__assert_func>
 800bd1a:	6922      	ldr	r2, [r4, #16]
 800bd1c:	f104 010c 	add.w	r1, r4, #12
 800bd20:	3202      	adds	r2, #2
 800bd22:	0092      	lsls	r2, r2, #2
 800bd24:	300c      	adds	r0, #12
 800bd26:	f7ff f80a 	bl	800ad3e <memcpy>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4638      	mov	r0, r7
 800bd2e:	f7ff ffa5 	bl	800bc7c <_Bfree>
 800bd32:	4644      	mov	r4, r8
 800bd34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd38:	3501      	adds	r5, #1
 800bd3a:	615e      	str	r6, [r3, #20]
 800bd3c:	6125      	str	r5, [r4, #16]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd44:	0800cc0a 	.word	0x0800cc0a
 800bd48:	0800cc1b 	.word	0x0800cc1b

0800bd4c <__hi0bits>:
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd52:	bf3a      	itte	cc
 800bd54:	0403      	lslcc	r3, r0, #16
 800bd56:	2010      	movcc	r0, #16
 800bd58:	2000      	movcs	r0, #0
 800bd5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd5e:	bf3c      	itt	cc
 800bd60:	021b      	lslcc	r3, r3, #8
 800bd62:	3008      	addcc	r0, #8
 800bd64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd68:	bf3c      	itt	cc
 800bd6a:	011b      	lslcc	r3, r3, #4
 800bd6c:	3004      	addcc	r0, #4
 800bd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd72:	bf3c      	itt	cc
 800bd74:	009b      	lslcc	r3, r3, #2
 800bd76:	3002      	addcc	r0, #2
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	db05      	blt.n	800bd88 <__hi0bits+0x3c>
 800bd7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd80:	f100 0001 	add.w	r0, r0, #1
 800bd84:	bf08      	it	eq
 800bd86:	2020      	moveq	r0, #32
 800bd88:	4770      	bx	lr

0800bd8a <__lo0bits>:
 800bd8a:	6803      	ldr	r3, [r0, #0]
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	f013 0007 	ands.w	r0, r3, #7
 800bd92:	d00b      	beq.n	800bdac <__lo0bits+0x22>
 800bd94:	07d9      	lsls	r1, r3, #31
 800bd96:	d421      	bmi.n	800bddc <__lo0bits+0x52>
 800bd98:	0798      	lsls	r0, r3, #30
 800bd9a:	bf49      	itett	mi
 800bd9c:	085b      	lsrmi	r3, r3, #1
 800bd9e:	089b      	lsrpl	r3, r3, #2
 800bda0:	2001      	movmi	r0, #1
 800bda2:	6013      	strmi	r3, [r2, #0]
 800bda4:	bf5c      	itt	pl
 800bda6:	2002      	movpl	r0, #2
 800bda8:	6013      	strpl	r3, [r2, #0]
 800bdaa:	4770      	bx	lr
 800bdac:	b299      	uxth	r1, r3
 800bdae:	b909      	cbnz	r1, 800bdb4 <__lo0bits+0x2a>
 800bdb0:	2010      	movs	r0, #16
 800bdb2:	0c1b      	lsrs	r3, r3, #16
 800bdb4:	b2d9      	uxtb	r1, r3
 800bdb6:	b909      	cbnz	r1, 800bdbc <__lo0bits+0x32>
 800bdb8:	3008      	adds	r0, #8
 800bdba:	0a1b      	lsrs	r3, r3, #8
 800bdbc:	0719      	lsls	r1, r3, #28
 800bdbe:	bf04      	itt	eq
 800bdc0:	091b      	lsreq	r3, r3, #4
 800bdc2:	3004      	addeq	r0, #4
 800bdc4:	0799      	lsls	r1, r3, #30
 800bdc6:	bf04      	itt	eq
 800bdc8:	089b      	lsreq	r3, r3, #2
 800bdca:	3002      	addeq	r0, #2
 800bdcc:	07d9      	lsls	r1, r3, #31
 800bdce:	d403      	bmi.n	800bdd8 <__lo0bits+0x4e>
 800bdd0:	085b      	lsrs	r3, r3, #1
 800bdd2:	f100 0001 	add.w	r0, r0, #1
 800bdd6:	d003      	beq.n	800bde0 <__lo0bits+0x56>
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	4770      	bx	lr
 800bddc:	2000      	movs	r0, #0
 800bdde:	4770      	bx	lr
 800bde0:	2020      	movs	r0, #32
 800bde2:	4770      	bx	lr

0800bde4 <__i2b>:
 800bde4:	b510      	push	{r4, lr}
 800bde6:	460c      	mov	r4, r1
 800bde8:	2101      	movs	r1, #1
 800bdea:	f7ff ff07 	bl	800bbfc <_Balloc>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	b928      	cbnz	r0, 800bdfe <__i2b+0x1a>
 800bdf2:	f240 1145 	movw	r1, #325	@ 0x145
 800bdf6:	4b04      	ldr	r3, [pc, #16]	@ (800be08 <__i2b+0x24>)
 800bdf8:	4804      	ldr	r0, [pc, #16]	@ (800be0c <__i2b+0x28>)
 800bdfa:	f000 fcfb 	bl	800c7f4 <__assert_func>
 800bdfe:	2301      	movs	r3, #1
 800be00:	6144      	str	r4, [r0, #20]
 800be02:	6103      	str	r3, [r0, #16]
 800be04:	bd10      	pop	{r4, pc}
 800be06:	bf00      	nop
 800be08:	0800cc0a 	.word	0x0800cc0a
 800be0c:	0800cc1b 	.word	0x0800cc1b

0800be10 <__multiply>:
 800be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be14:	4614      	mov	r4, r2
 800be16:	690a      	ldr	r2, [r1, #16]
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	460f      	mov	r7, r1
 800be1c:	429a      	cmp	r2, r3
 800be1e:	bfa2      	ittt	ge
 800be20:	4623      	movge	r3, r4
 800be22:	460c      	movge	r4, r1
 800be24:	461f      	movge	r7, r3
 800be26:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be2a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	6861      	ldr	r1, [r4, #4]
 800be32:	eb0a 0609 	add.w	r6, sl, r9
 800be36:	42b3      	cmp	r3, r6
 800be38:	b085      	sub	sp, #20
 800be3a:	bfb8      	it	lt
 800be3c:	3101      	addlt	r1, #1
 800be3e:	f7ff fedd 	bl	800bbfc <_Balloc>
 800be42:	b930      	cbnz	r0, 800be52 <__multiply+0x42>
 800be44:	4602      	mov	r2, r0
 800be46:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be4a:	4b43      	ldr	r3, [pc, #268]	@ (800bf58 <__multiply+0x148>)
 800be4c:	4843      	ldr	r0, [pc, #268]	@ (800bf5c <__multiply+0x14c>)
 800be4e:	f000 fcd1 	bl	800c7f4 <__assert_func>
 800be52:	f100 0514 	add.w	r5, r0, #20
 800be56:	462b      	mov	r3, r5
 800be58:	2200      	movs	r2, #0
 800be5a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be5e:	4543      	cmp	r3, r8
 800be60:	d321      	bcc.n	800bea6 <__multiply+0x96>
 800be62:	f107 0114 	add.w	r1, r7, #20
 800be66:	f104 0214 	add.w	r2, r4, #20
 800be6a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be6e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be72:	9302      	str	r3, [sp, #8]
 800be74:	1b13      	subs	r3, r2, r4
 800be76:	3b15      	subs	r3, #21
 800be78:	f023 0303 	bic.w	r3, r3, #3
 800be7c:	3304      	adds	r3, #4
 800be7e:	f104 0715 	add.w	r7, r4, #21
 800be82:	42ba      	cmp	r2, r7
 800be84:	bf38      	it	cc
 800be86:	2304      	movcc	r3, #4
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	9b02      	ldr	r3, [sp, #8]
 800be8c:	9103      	str	r1, [sp, #12]
 800be8e:	428b      	cmp	r3, r1
 800be90:	d80c      	bhi.n	800beac <__multiply+0x9c>
 800be92:	2e00      	cmp	r6, #0
 800be94:	dd03      	ble.n	800be9e <__multiply+0x8e>
 800be96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d05a      	beq.n	800bf54 <__multiply+0x144>
 800be9e:	6106      	str	r6, [r0, #16]
 800bea0:	b005      	add	sp, #20
 800bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bea6:	f843 2b04 	str.w	r2, [r3], #4
 800beaa:	e7d8      	b.n	800be5e <__multiply+0x4e>
 800beac:	f8b1 a000 	ldrh.w	sl, [r1]
 800beb0:	f1ba 0f00 	cmp.w	sl, #0
 800beb4:	d023      	beq.n	800befe <__multiply+0xee>
 800beb6:	46a9      	mov	r9, r5
 800beb8:	f04f 0c00 	mov.w	ip, #0
 800bebc:	f104 0e14 	add.w	lr, r4, #20
 800bec0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bec4:	f8d9 3000 	ldr.w	r3, [r9]
 800bec8:	fa1f fb87 	uxth.w	fp, r7
 800becc:	b29b      	uxth	r3, r3
 800bece:	fb0a 330b 	mla	r3, sl, fp, r3
 800bed2:	4463      	add	r3, ip
 800bed4:	f8d9 c000 	ldr.w	ip, [r9]
 800bed8:	0c3f      	lsrs	r7, r7, #16
 800beda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bede:	fb0a c707 	mla	r7, sl, r7, ip
 800bee2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800beec:	4572      	cmp	r2, lr
 800beee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bef2:	f849 3b04 	str.w	r3, [r9], #4
 800bef6:	d8e3      	bhi.n	800bec0 <__multiply+0xb0>
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	f845 c003 	str.w	ip, [r5, r3]
 800befe:	9b03      	ldr	r3, [sp, #12]
 800bf00:	3104      	adds	r1, #4
 800bf02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bf06:	f1b9 0f00 	cmp.w	r9, #0
 800bf0a:	d021      	beq.n	800bf50 <__multiply+0x140>
 800bf0c:	46ae      	mov	lr, r5
 800bf0e:	f04f 0a00 	mov.w	sl, #0
 800bf12:	682b      	ldr	r3, [r5, #0]
 800bf14:	f104 0c14 	add.w	ip, r4, #20
 800bf18:	f8bc b000 	ldrh.w	fp, [ip]
 800bf1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf20:	b29b      	uxth	r3, r3
 800bf22:	fb09 770b 	mla	r7, r9, fp, r7
 800bf26:	4457      	add	r7, sl
 800bf28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf2c:	f84e 3b04 	str.w	r3, [lr], #4
 800bf30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf38:	f8be 3000 	ldrh.w	r3, [lr]
 800bf3c:	4562      	cmp	r2, ip
 800bf3e:	fb09 330a 	mla	r3, r9, sl, r3
 800bf42:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf4a:	d8e5      	bhi.n	800bf18 <__multiply+0x108>
 800bf4c:	9f01      	ldr	r7, [sp, #4]
 800bf4e:	51eb      	str	r3, [r5, r7]
 800bf50:	3504      	adds	r5, #4
 800bf52:	e79a      	b.n	800be8a <__multiply+0x7a>
 800bf54:	3e01      	subs	r6, #1
 800bf56:	e79c      	b.n	800be92 <__multiply+0x82>
 800bf58:	0800cc0a 	.word	0x0800cc0a
 800bf5c:	0800cc1b 	.word	0x0800cc1b

0800bf60 <__pow5mult>:
 800bf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf64:	4615      	mov	r5, r2
 800bf66:	f012 0203 	ands.w	r2, r2, #3
 800bf6a:	4607      	mov	r7, r0
 800bf6c:	460e      	mov	r6, r1
 800bf6e:	d007      	beq.n	800bf80 <__pow5mult+0x20>
 800bf70:	4c25      	ldr	r4, [pc, #148]	@ (800c008 <__pow5mult+0xa8>)
 800bf72:	3a01      	subs	r2, #1
 800bf74:	2300      	movs	r3, #0
 800bf76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf7a:	f7ff fea1 	bl	800bcc0 <__multadd>
 800bf7e:	4606      	mov	r6, r0
 800bf80:	10ad      	asrs	r5, r5, #2
 800bf82:	d03d      	beq.n	800c000 <__pow5mult+0xa0>
 800bf84:	69fc      	ldr	r4, [r7, #28]
 800bf86:	b97c      	cbnz	r4, 800bfa8 <__pow5mult+0x48>
 800bf88:	2010      	movs	r0, #16
 800bf8a:	f7ff fd81 	bl	800ba90 <malloc>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	61f8      	str	r0, [r7, #28]
 800bf92:	b928      	cbnz	r0, 800bfa0 <__pow5mult+0x40>
 800bf94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf98:	4b1c      	ldr	r3, [pc, #112]	@ (800c00c <__pow5mult+0xac>)
 800bf9a:	481d      	ldr	r0, [pc, #116]	@ (800c010 <__pow5mult+0xb0>)
 800bf9c:	f000 fc2a 	bl	800c7f4 <__assert_func>
 800bfa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfa4:	6004      	str	r4, [r0, #0]
 800bfa6:	60c4      	str	r4, [r0, #12]
 800bfa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bfac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfb0:	b94c      	cbnz	r4, 800bfc6 <__pow5mult+0x66>
 800bfb2:	f240 2171 	movw	r1, #625	@ 0x271
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	f7ff ff14 	bl	800bde4 <__i2b>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfc4:	6003      	str	r3, [r0, #0]
 800bfc6:	f04f 0900 	mov.w	r9, #0
 800bfca:	07eb      	lsls	r3, r5, #31
 800bfcc:	d50a      	bpl.n	800bfe4 <__pow5mult+0x84>
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4622      	mov	r2, r4
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	f7ff ff1c 	bl	800be10 <__multiply>
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4638      	mov	r0, r7
 800bfde:	f7ff fe4d 	bl	800bc7c <_Bfree>
 800bfe2:	4646      	mov	r6, r8
 800bfe4:	106d      	asrs	r5, r5, #1
 800bfe6:	d00b      	beq.n	800c000 <__pow5mult+0xa0>
 800bfe8:	6820      	ldr	r0, [r4, #0]
 800bfea:	b938      	cbnz	r0, 800bffc <__pow5mult+0x9c>
 800bfec:	4622      	mov	r2, r4
 800bfee:	4621      	mov	r1, r4
 800bff0:	4638      	mov	r0, r7
 800bff2:	f7ff ff0d 	bl	800be10 <__multiply>
 800bff6:	6020      	str	r0, [r4, #0]
 800bff8:	f8c0 9000 	str.w	r9, [r0]
 800bffc:	4604      	mov	r4, r0
 800bffe:	e7e4      	b.n	800bfca <__pow5mult+0x6a>
 800c000:	4630      	mov	r0, r6
 800c002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c006:	bf00      	nop
 800c008:	0800cc74 	.word	0x0800cc74
 800c00c:	0800cb9b 	.word	0x0800cb9b
 800c010:	0800cc1b 	.word	0x0800cc1b

0800c014 <__lshift>:
 800c014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c018:	460c      	mov	r4, r1
 800c01a:	4607      	mov	r7, r0
 800c01c:	4691      	mov	r9, r2
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	6849      	ldr	r1, [r1, #4]
 800c022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c026:	68a3      	ldr	r3, [r4, #8]
 800c028:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c02c:	f108 0601 	add.w	r6, r8, #1
 800c030:	42b3      	cmp	r3, r6
 800c032:	db0b      	blt.n	800c04c <__lshift+0x38>
 800c034:	4638      	mov	r0, r7
 800c036:	f7ff fde1 	bl	800bbfc <_Balloc>
 800c03a:	4605      	mov	r5, r0
 800c03c:	b948      	cbnz	r0, 800c052 <__lshift+0x3e>
 800c03e:	4602      	mov	r2, r0
 800c040:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c044:	4b27      	ldr	r3, [pc, #156]	@ (800c0e4 <__lshift+0xd0>)
 800c046:	4828      	ldr	r0, [pc, #160]	@ (800c0e8 <__lshift+0xd4>)
 800c048:	f000 fbd4 	bl	800c7f4 <__assert_func>
 800c04c:	3101      	adds	r1, #1
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	e7ee      	b.n	800c030 <__lshift+0x1c>
 800c052:	2300      	movs	r3, #0
 800c054:	f100 0114 	add.w	r1, r0, #20
 800c058:	f100 0210 	add.w	r2, r0, #16
 800c05c:	4618      	mov	r0, r3
 800c05e:	4553      	cmp	r3, sl
 800c060:	db33      	blt.n	800c0ca <__lshift+0xb6>
 800c062:	6920      	ldr	r0, [r4, #16]
 800c064:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c068:	f104 0314 	add.w	r3, r4, #20
 800c06c:	f019 091f 	ands.w	r9, r9, #31
 800c070:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c074:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c078:	d02b      	beq.n	800c0d2 <__lshift+0xbe>
 800c07a:	468a      	mov	sl, r1
 800c07c:	2200      	movs	r2, #0
 800c07e:	f1c9 0e20 	rsb	lr, r9, #32
 800c082:	6818      	ldr	r0, [r3, #0]
 800c084:	fa00 f009 	lsl.w	r0, r0, r9
 800c088:	4310      	orrs	r0, r2
 800c08a:	f84a 0b04 	str.w	r0, [sl], #4
 800c08e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c092:	459c      	cmp	ip, r3
 800c094:	fa22 f20e 	lsr.w	r2, r2, lr
 800c098:	d8f3      	bhi.n	800c082 <__lshift+0x6e>
 800c09a:	ebac 0304 	sub.w	r3, ip, r4
 800c09e:	3b15      	subs	r3, #21
 800c0a0:	f023 0303 	bic.w	r3, r3, #3
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	f104 0015 	add.w	r0, r4, #21
 800c0aa:	4584      	cmp	ip, r0
 800c0ac:	bf38      	it	cc
 800c0ae:	2304      	movcc	r3, #4
 800c0b0:	50ca      	str	r2, [r1, r3]
 800c0b2:	b10a      	cbz	r2, 800c0b8 <__lshift+0xa4>
 800c0b4:	f108 0602 	add.w	r6, r8, #2
 800c0b8:	3e01      	subs	r6, #1
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	4621      	mov	r1, r4
 800c0be:	612e      	str	r6, [r5, #16]
 800c0c0:	f7ff fddc 	bl	800bc7c <_Bfree>
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	e7c5      	b.n	800c05e <__lshift+0x4a>
 800c0d2:	3904      	subs	r1, #4
 800c0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d8:	459c      	cmp	ip, r3
 800c0da:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0de:	d8f9      	bhi.n	800c0d4 <__lshift+0xc0>
 800c0e0:	e7ea      	b.n	800c0b8 <__lshift+0xa4>
 800c0e2:	bf00      	nop
 800c0e4:	0800cc0a 	.word	0x0800cc0a
 800c0e8:	0800cc1b 	.word	0x0800cc1b

0800c0ec <__mcmp>:
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	690a      	ldr	r2, [r1, #16]
 800c0f0:	6900      	ldr	r0, [r0, #16]
 800c0f2:	b530      	push	{r4, r5, lr}
 800c0f4:	1a80      	subs	r0, r0, r2
 800c0f6:	d10e      	bne.n	800c116 <__mcmp+0x2a>
 800c0f8:	3314      	adds	r3, #20
 800c0fa:	3114      	adds	r1, #20
 800c0fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c10c:	4295      	cmp	r5, r2
 800c10e:	d003      	beq.n	800c118 <__mcmp+0x2c>
 800c110:	d205      	bcs.n	800c11e <__mcmp+0x32>
 800c112:	f04f 30ff 	mov.w	r0, #4294967295
 800c116:	bd30      	pop	{r4, r5, pc}
 800c118:	42a3      	cmp	r3, r4
 800c11a:	d3f3      	bcc.n	800c104 <__mcmp+0x18>
 800c11c:	e7fb      	b.n	800c116 <__mcmp+0x2a>
 800c11e:	2001      	movs	r0, #1
 800c120:	e7f9      	b.n	800c116 <__mcmp+0x2a>
	...

0800c124 <__mdiff>:
 800c124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	4689      	mov	r9, r1
 800c12a:	4606      	mov	r6, r0
 800c12c:	4611      	mov	r1, r2
 800c12e:	4648      	mov	r0, r9
 800c130:	4614      	mov	r4, r2
 800c132:	f7ff ffdb 	bl	800c0ec <__mcmp>
 800c136:	1e05      	subs	r5, r0, #0
 800c138:	d112      	bne.n	800c160 <__mdiff+0x3c>
 800c13a:	4629      	mov	r1, r5
 800c13c:	4630      	mov	r0, r6
 800c13e:	f7ff fd5d 	bl	800bbfc <_Balloc>
 800c142:	4602      	mov	r2, r0
 800c144:	b928      	cbnz	r0, 800c152 <__mdiff+0x2e>
 800c146:	f240 2137 	movw	r1, #567	@ 0x237
 800c14a:	4b3e      	ldr	r3, [pc, #248]	@ (800c244 <__mdiff+0x120>)
 800c14c:	483e      	ldr	r0, [pc, #248]	@ (800c248 <__mdiff+0x124>)
 800c14e:	f000 fb51 	bl	800c7f4 <__assert_func>
 800c152:	2301      	movs	r3, #1
 800c154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c158:	4610      	mov	r0, r2
 800c15a:	b003      	add	sp, #12
 800c15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c160:	bfbc      	itt	lt
 800c162:	464b      	movlt	r3, r9
 800c164:	46a1      	movlt	r9, r4
 800c166:	4630      	mov	r0, r6
 800c168:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c16c:	bfba      	itte	lt
 800c16e:	461c      	movlt	r4, r3
 800c170:	2501      	movlt	r5, #1
 800c172:	2500      	movge	r5, #0
 800c174:	f7ff fd42 	bl	800bbfc <_Balloc>
 800c178:	4602      	mov	r2, r0
 800c17a:	b918      	cbnz	r0, 800c184 <__mdiff+0x60>
 800c17c:	f240 2145 	movw	r1, #581	@ 0x245
 800c180:	4b30      	ldr	r3, [pc, #192]	@ (800c244 <__mdiff+0x120>)
 800c182:	e7e3      	b.n	800c14c <__mdiff+0x28>
 800c184:	f100 0b14 	add.w	fp, r0, #20
 800c188:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c18c:	f109 0310 	add.w	r3, r9, #16
 800c190:	60c5      	str	r5, [r0, #12]
 800c192:	f04f 0c00 	mov.w	ip, #0
 800c196:	f109 0514 	add.w	r5, r9, #20
 800c19a:	46d9      	mov	r9, fp
 800c19c:	6926      	ldr	r6, [r4, #16]
 800c19e:	f104 0e14 	add.w	lr, r4, #20
 800c1a2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c1a6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	9b01      	ldr	r3, [sp, #4]
 800c1ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1b6:	b281      	uxth	r1, r0
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	fa1f f38a 	uxth.w	r3, sl
 800c1be:	1a5b      	subs	r3, r3, r1
 800c1c0:	0c00      	lsrs	r0, r0, #16
 800c1c2:	4463      	add	r3, ip
 800c1c4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1c8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1d2:	4576      	cmp	r6, lr
 800c1d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1d8:	f849 3b04 	str.w	r3, [r9], #4
 800c1dc:	d8e6      	bhi.n	800c1ac <__mdiff+0x88>
 800c1de:	1b33      	subs	r3, r6, r4
 800c1e0:	3b15      	subs	r3, #21
 800c1e2:	f023 0303 	bic.w	r3, r3, #3
 800c1e6:	3415      	adds	r4, #21
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	42a6      	cmp	r6, r4
 800c1ec:	bf38      	it	cc
 800c1ee:	2304      	movcc	r3, #4
 800c1f0:	441d      	add	r5, r3
 800c1f2:	445b      	add	r3, fp
 800c1f4:	461e      	mov	r6, r3
 800c1f6:	462c      	mov	r4, r5
 800c1f8:	4544      	cmp	r4, r8
 800c1fa:	d30e      	bcc.n	800c21a <__mdiff+0xf6>
 800c1fc:	f108 0103 	add.w	r1, r8, #3
 800c200:	1b49      	subs	r1, r1, r5
 800c202:	f021 0103 	bic.w	r1, r1, #3
 800c206:	3d03      	subs	r5, #3
 800c208:	45a8      	cmp	r8, r5
 800c20a:	bf38      	it	cc
 800c20c:	2100      	movcc	r1, #0
 800c20e:	440b      	add	r3, r1
 800c210:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c214:	b199      	cbz	r1, 800c23e <__mdiff+0x11a>
 800c216:	6117      	str	r7, [r2, #16]
 800c218:	e79e      	b.n	800c158 <__mdiff+0x34>
 800c21a:	46e6      	mov	lr, ip
 800c21c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c220:	fa1f fc81 	uxth.w	ip, r1
 800c224:	44f4      	add	ip, lr
 800c226:	0c08      	lsrs	r0, r1, #16
 800c228:	4471      	add	r1, lr
 800c22a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c22e:	b289      	uxth	r1, r1
 800c230:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c234:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c238:	f846 1b04 	str.w	r1, [r6], #4
 800c23c:	e7dc      	b.n	800c1f8 <__mdiff+0xd4>
 800c23e:	3f01      	subs	r7, #1
 800c240:	e7e6      	b.n	800c210 <__mdiff+0xec>
 800c242:	bf00      	nop
 800c244:	0800cc0a 	.word	0x0800cc0a
 800c248:	0800cc1b 	.word	0x0800cc1b

0800c24c <__d2b>:
 800c24c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c250:	2101      	movs	r1, #1
 800c252:	4690      	mov	r8, r2
 800c254:	4699      	mov	r9, r3
 800c256:	9e08      	ldr	r6, [sp, #32]
 800c258:	f7ff fcd0 	bl	800bbfc <_Balloc>
 800c25c:	4604      	mov	r4, r0
 800c25e:	b930      	cbnz	r0, 800c26e <__d2b+0x22>
 800c260:	4602      	mov	r2, r0
 800c262:	f240 310f 	movw	r1, #783	@ 0x30f
 800c266:	4b23      	ldr	r3, [pc, #140]	@ (800c2f4 <__d2b+0xa8>)
 800c268:	4823      	ldr	r0, [pc, #140]	@ (800c2f8 <__d2b+0xac>)
 800c26a:	f000 fac3 	bl	800c7f4 <__assert_func>
 800c26e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c272:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c276:	b10d      	cbz	r5, 800c27c <__d2b+0x30>
 800c278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	f1b8 0300 	subs.w	r3, r8, #0
 800c282:	d024      	beq.n	800c2ce <__d2b+0x82>
 800c284:	4668      	mov	r0, sp
 800c286:	9300      	str	r3, [sp, #0]
 800c288:	f7ff fd7f 	bl	800bd8a <__lo0bits>
 800c28c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c290:	b1d8      	cbz	r0, 800c2ca <__d2b+0x7e>
 800c292:	f1c0 0320 	rsb	r3, r0, #32
 800c296:	fa02 f303 	lsl.w	r3, r2, r3
 800c29a:	430b      	orrs	r3, r1
 800c29c:	40c2      	lsrs	r2, r0
 800c29e:	6163      	str	r3, [r4, #20]
 800c2a0:	9201      	str	r2, [sp, #4]
 800c2a2:	9b01      	ldr	r3, [sp, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bf0c      	ite	eq
 800c2a8:	2201      	moveq	r2, #1
 800c2aa:	2202      	movne	r2, #2
 800c2ac:	61a3      	str	r3, [r4, #24]
 800c2ae:	6122      	str	r2, [r4, #16]
 800c2b0:	b1ad      	cbz	r5, 800c2de <__d2b+0x92>
 800c2b2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c2b6:	4405      	add	r5, r0
 800c2b8:	6035      	str	r5, [r6, #0]
 800c2ba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c0:	6018      	str	r0, [r3, #0]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	b002      	add	sp, #8
 800c2c6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c2ca:	6161      	str	r1, [r4, #20]
 800c2cc:	e7e9      	b.n	800c2a2 <__d2b+0x56>
 800c2ce:	a801      	add	r0, sp, #4
 800c2d0:	f7ff fd5b 	bl	800bd8a <__lo0bits>
 800c2d4:	9b01      	ldr	r3, [sp, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	6163      	str	r3, [r4, #20]
 800c2da:	3020      	adds	r0, #32
 800c2dc:	e7e7      	b.n	800c2ae <__d2b+0x62>
 800c2de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c2e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c2e6:	6030      	str	r0, [r6, #0]
 800c2e8:	6918      	ldr	r0, [r3, #16]
 800c2ea:	f7ff fd2f 	bl	800bd4c <__hi0bits>
 800c2ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2f2:	e7e4      	b.n	800c2be <__d2b+0x72>
 800c2f4:	0800cc0a 	.word	0x0800cc0a
 800c2f8:	0800cc1b 	.word	0x0800cc1b

0800c2fc <__sfputc_r>:
 800c2fc:	6893      	ldr	r3, [r2, #8]
 800c2fe:	b410      	push	{r4}
 800c300:	3b01      	subs	r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	6093      	str	r3, [r2, #8]
 800c306:	da07      	bge.n	800c318 <__sfputc_r+0x1c>
 800c308:	6994      	ldr	r4, [r2, #24]
 800c30a:	42a3      	cmp	r3, r4
 800c30c:	db01      	blt.n	800c312 <__sfputc_r+0x16>
 800c30e:	290a      	cmp	r1, #10
 800c310:	d102      	bne.n	800c318 <__sfputc_r+0x1c>
 800c312:	bc10      	pop	{r4}
 800c314:	f7fe bbf1 	b.w	800aafa <__swbuf_r>
 800c318:	6813      	ldr	r3, [r2, #0]
 800c31a:	1c58      	adds	r0, r3, #1
 800c31c:	6010      	str	r0, [r2, #0]
 800c31e:	7019      	strb	r1, [r3, #0]
 800c320:	4608      	mov	r0, r1
 800c322:	bc10      	pop	{r4}
 800c324:	4770      	bx	lr

0800c326 <__sfputs_r>:
 800c326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c328:	4606      	mov	r6, r0
 800c32a:	460f      	mov	r7, r1
 800c32c:	4614      	mov	r4, r2
 800c32e:	18d5      	adds	r5, r2, r3
 800c330:	42ac      	cmp	r4, r5
 800c332:	d101      	bne.n	800c338 <__sfputs_r+0x12>
 800c334:	2000      	movs	r0, #0
 800c336:	e007      	b.n	800c348 <__sfputs_r+0x22>
 800c338:	463a      	mov	r2, r7
 800c33a:	4630      	mov	r0, r6
 800c33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c340:	f7ff ffdc 	bl	800c2fc <__sfputc_r>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d1f3      	bne.n	800c330 <__sfputs_r+0xa>
 800c348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c34c <_vfiprintf_r>:
 800c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c350:	460d      	mov	r5, r1
 800c352:	4614      	mov	r4, r2
 800c354:	4698      	mov	r8, r3
 800c356:	4606      	mov	r6, r0
 800c358:	b09d      	sub	sp, #116	@ 0x74
 800c35a:	b118      	cbz	r0, 800c364 <_vfiprintf_r+0x18>
 800c35c:	6a03      	ldr	r3, [r0, #32]
 800c35e:	b90b      	cbnz	r3, 800c364 <_vfiprintf_r+0x18>
 800c360:	f7fe fae2 	bl	800a928 <__sinit>
 800c364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c366:	07d9      	lsls	r1, r3, #31
 800c368:	d405      	bmi.n	800c376 <_vfiprintf_r+0x2a>
 800c36a:	89ab      	ldrh	r3, [r5, #12]
 800c36c:	059a      	lsls	r2, r3, #22
 800c36e:	d402      	bmi.n	800c376 <_vfiprintf_r+0x2a>
 800c370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c372:	f7fe fcd4 	bl	800ad1e <__retarget_lock_acquire_recursive>
 800c376:	89ab      	ldrh	r3, [r5, #12]
 800c378:	071b      	lsls	r3, r3, #28
 800c37a:	d501      	bpl.n	800c380 <_vfiprintf_r+0x34>
 800c37c:	692b      	ldr	r3, [r5, #16]
 800c37e:	b99b      	cbnz	r3, 800c3a8 <_vfiprintf_r+0x5c>
 800c380:	4629      	mov	r1, r5
 800c382:	4630      	mov	r0, r6
 800c384:	f7fe fbf8 	bl	800ab78 <__swsetup_r>
 800c388:	b170      	cbz	r0, 800c3a8 <_vfiprintf_r+0x5c>
 800c38a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c38c:	07dc      	lsls	r4, r3, #31
 800c38e:	d504      	bpl.n	800c39a <_vfiprintf_r+0x4e>
 800c390:	f04f 30ff 	mov.w	r0, #4294967295
 800c394:	b01d      	add	sp, #116	@ 0x74
 800c396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	0598      	lsls	r0, r3, #22
 800c39e:	d4f7      	bmi.n	800c390 <_vfiprintf_r+0x44>
 800c3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3a2:	f7fe fcbd 	bl	800ad20 <__retarget_lock_release_recursive>
 800c3a6:	e7f3      	b.n	800c390 <_vfiprintf_r+0x44>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ac:	2320      	movs	r3, #32
 800c3ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3b2:	2330      	movs	r3, #48	@ 0x30
 800c3b4:	f04f 0901 	mov.w	r9, #1
 800c3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c568 <_vfiprintf_r+0x21c>
 800c3c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3c4:	4623      	mov	r3, r4
 800c3c6:	469a      	mov	sl, r3
 800c3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3cc:	b10a      	cbz	r2, 800c3d2 <_vfiprintf_r+0x86>
 800c3ce:	2a25      	cmp	r2, #37	@ 0x25
 800c3d0:	d1f9      	bne.n	800c3c6 <_vfiprintf_r+0x7a>
 800c3d2:	ebba 0b04 	subs.w	fp, sl, r4
 800c3d6:	d00b      	beq.n	800c3f0 <_vfiprintf_r+0xa4>
 800c3d8:	465b      	mov	r3, fp
 800c3da:	4622      	mov	r2, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4630      	mov	r0, r6
 800c3e0:	f7ff ffa1 	bl	800c326 <__sfputs_r>
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	f000 80a7 	beq.w	800c538 <_vfiprintf_r+0x1ec>
 800c3ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3ec:	445a      	add	r2, fp
 800c3ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f000 809f 	beq.w	800c538 <_vfiprintf_r+0x1ec>
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c404:	f10a 0a01 	add.w	sl, sl, #1
 800c408:	9304      	str	r3, [sp, #16]
 800c40a:	9307      	str	r3, [sp, #28]
 800c40c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c410:	931a      	str	r3, [sp, #104]	@ 0x68
 800c412:	4654      	mov	r4, sl
 800c414:	2205      	movs	r2, #5
 800c416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c41a:	4853      	ldr	r0, [pc, #332]	@ (800c568 <_vfiprintf_r+0x21c>)
 800c41c:	f7fe fc81 	bl	800ad22 <memchr>
 800c420:	9a04      	ldr	r2, [sp, #16]
 800c422:	b9d8      	cbnz	r0, 800c45c <_vfiprintf_r+0x110>
 800c424:	06d1      	lsls	r1, r2, #27
 800c426:	bf44      	itt	mi
 800c428:	2320      	movmi	r3, #32
 800c42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c42e:	0713      	lsls	r3, r2, #28
 800c430:	bf44      	itt	mi
 800c432:	232b      	movmi	r3, #43	@ 0x2b
 800c434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c438:	f89a 3000 	ldrb.w	r3, [sl]
 800c43c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c43e:	d015      	beq.n	800c46c <_vfiprintf_r+0x120>
 800c440:	4654      	mov	r4, sl
 800c442:	2000      	movs	r0, #0
 800c444:	f04f 0c0a 	mov.w	ip, #10
 800c448:	9a07      	ldr	r2, [sp, #28]
 800c44a:	4621      	mov	r1, r4
 800c44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c450:	3b30      	subs	r3, #48	@ 0x30
 800c452:	2b09      	cmp	r3, #9
 800c454:	d94b      	bls.n	800c4ee <_vfiprintf_r+0x1a2>
 800c456:	b1b0      	cbz	r0, 800c486 <_vfiprintf_r+0x13a>
 800c458:	9207      	str	r2, [sp, #28]
 800c45a:	e014      	b.n	800c486 <_vfiprintf_r+0x13a>
 800c45c:	eba0 0308 	sub.w	r3, r0, r8
 800c460:	fa09 f303 	lsl.w	r3, r9, r3
 800c464:	4313      	orrs	r3, r2
 800c466:	46a2      	mov	sl, r4
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	e7d2      	b.n	800c412 <_vfiprintf_r+0xc6>
 800c46c:	9b03      	ldr	r3, [sp, #12]
 800c46e:	1d19      	adds	r1, r3, #4
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	9103      	str	r1, [sp, #12]
 800c474:	2b00      	cmp	r3, #0
 800c476:	bfbb      	ittet	lt
 800c478:	425b      	neglt	r3, r3
 800c47a:	f042 0202 	orrlt.w	r2, r2, #2
 800c47e:	9307      	strge	r3, [sp, #28]
 800c480:	9307      	strlt	r3, [sp, #28]
 800c482:	bfb8      	it	lt
 800c484:	9204      	strlt	r2, [sp, #16]
 800c486:	7823      	ldrb	r3, [r4, #0]
 800c488:	2b2e      	cmp	r3, #46	@ 0x2e
 800c48a:	d10a      	bne.n	800c4a2 <_vfiprintf_r+0x156>
 800c48c:	7863      	ldrb	r3, [r4, #1]
 800c48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c490:	d132      	bne.n	800c4f8 <_vfiprintf_r+0x1ac>
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	3402      	adds	r4, #2
 800c496:	1d1a      	adds	r2, r3, #4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	9203      	str	r2, [sp, #12]
 800c49c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4a0:	9305      	str	r3, [sp, #20]
 800c4a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c56c <_vfiprintf_r+0x220>
 800c4a6:	2203      	movs	r2, #3
 800c4a8:	4650      	mov	r0, sl
 800c4aa:	7821      	ldrb	r1, [r4, #0]
 800c4ac:	f7fe fc39 	bl	800ad22 <memchr>
 800c4b0:	b138      	cbz	r0, 800c4c2 <_vfiprintf_r+0x176>
 800c4b2:	2240      	movs	r2, #64	@ 0x40
 800c4b4:	9b04      	ldr	r3, [sp, #16]
 800c4b6:	eba0 000a 	sub.w	r0, r0, sl
 800c4ba:	4082      	lsls	r2, r0
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	3401      	adds	r4, #1
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c6:	2206      	movs	r2, #6
 800c4c8:	4829      	ldr	r0, [pc, #164]	@ (800c570 <_vfiprintf_r+0x224>)
 800c4ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4ce:	f7fe fc28 	bl	800ad22 <memchr>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d03f      	beq.n	800c556 <_vfiprintf_r+0x20a>
 800c4d6:	4b27      	ldr	r3, [pc, #156]	@ (800c574 <_vfiprintf_r+0x228>)
 800c4d8:	bb1b      	cbnz	r3, 800c522 <_vfiprintf_r+0x1d6>
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	3307      	adds	r3, #7
 800c4de:	f023 0307 	bic.w	r3, r3, #7
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	9303      	str	r3, [sp, #12]
 800c4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e8:	443b      	add	r3, r7
 800c4ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4ec:	e76a      	b.n	800c3c4 <_vfiprintf_r+0x78>
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	2001      	movs	r0, #1
 800c4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4f6:	e7a8      	b.n	800c44a <_vfiprintf_r+0xfe>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f04f 0c0a 	mov.w	ip, #10
 800c4fe:	4619      	mov	r1, r3
 800c500:	3401      	adds	r4, #1
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	4620      	mov	r0, r4
 800c506:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c50a:	3a30      	subs	r2, #48	@ 0x30
 800c50c:	2a09      	cmp	r2, #9
 800c50e:	d903      	bls.n	800c518 <_vfiprintf_r+0x1cc>
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0c6      	beq.n	800c4a2 <_vfiprintf_r+0x156>
 800c514:	9105      	str	r1, [sp, #20]
 800c516:	e7c4      	b.n	800c4a2 <_vfiprintf_r+0x156>
 800c518:	4604      	mov	r4, r0
 800c51a:	2301      	movs	r3, #1
 800c51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c520:	e7f0      	b.n	800c504 <_vfiprintf_r+0x1b8>
 800c522:	ab03      	add	r3, sp, #12
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	462a      	mov	r2, r5
 800c528:	4630      	mov	r0, r6
 800c52a:	4b13      	ldr	r3, [pc, #76]	@ (800c578 <_vfiprintf_r+0x22c>)
 800c52c:	a904      	add	r1, sp, #16
 800c52e:	f7fd fdb1 	bl	800a094 <_printf_float>
 800c532:	4607      	mov	r7, r0
 800c534:	1c78      	adds	r0, r7, #1
 800c536:	d1d6      	bne.n	800c4e6 <_vfiprintf_r+0x19a>
 800c538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c53a:	07d9      	lsls	r1, r3, #31
 800c53c:	d405      	bmi.n	800c54a <_vfiprintf_r+0x1fe>
 800c53e:	89ab      	ldrh	r3, [r5, #12]
 800c540:	059a      	lsls	r2, r3, #22
 800c542:	d402      	bmi.n	800c54a <_vfiprintf_r+0x1fe>
 800c544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c546:	f7fe fbeb 	bl	800ad20 <__retarget_lock_release_recursive>
 800c54a:	89ab      	ldrh	r3, [r5, #12]
 800c54c:	065b      	lsls	r3, r3, #25
 800c54e:	f53f af1f 	bmi.w	800c390 <_vfiprintf_r+0x44>
 800c552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c554:	e71e      	b.n	800c394 <_vfiprintf_r+0x48>
 800c556:	ab03      	add	r3, sp, #12
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	462a      	mov	r2, r5
 800c55c:	4630      	mov	r0, r6
 800c55e:	4b06      	ldr	r3, [pc, #24]	@ (800c578 <_vfiprintf_r+0x22c>)
 800c560:	a904      	add	r1, sp, #16
 800c562:	f7fe f835 	bl	800a5d0 <_printf_i>
 800c566:	e7e4      	b.n	800c532 <_vfiprintf_r+0x1e6>
 800c568:	0800cd70 	.word	0x0800cd70
 800c56c:	0800cd76 	.word	0x0800cd76
 800c570:	0800cd7a 	.word	0x0800cd7a
 800c574:	0800a095 	.word	0x0800a095
 800c578:	0800c327 	.word	0x0800c327

0800c57c <__sflush_r>:
 800c57c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c582:	0716      	lsls	r6, r2, #28
 800c584:	4605      	mov	r5, r0
 800c586:	460c      	mov	r4, r1
 800c588:	d454      	bmi.n	800c634 <__sflush_r+0xb8>
 800c58a:	684b      	ldr	r3, [r1, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	dc02      	bgt.n	800c596 <__sflush_r+0x1a>
 800c590:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c592:	2b00      	cmp	r3, #0
 800c594:	dd48      	ble.n	800c628 <__sflush_r+0xac>
 800c596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c598:	2e00      	cmp	r6, #0
 800c59a:	d045      	beq.n	800c628 <__sflush_r+0xac>
 800c59c:	2300      	movs	r3, #0
 800c59e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c5a2:	682f      	ldr	r7, [r5, #0]
 800c5a4:	6a21      	ldr	r1, [r4, #32]
 800c5a6:	602b      	str	r3, [r5, #0]
 800c5a8:	d030      	beq.n	800c60c <__sflush_r+0x90>
 800c5aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c5ac:	89a3      	ldrh	r3, [r4, #12]
 800c5ae:	0759      	lsls	r1, r3, #29
 800c5b0:	d505      	bpl.n	800c5be <__sflush_r+0x42>
 800c5b2:	6863      	ldr	r3, [r4, #4]
 800c5b4:	1ad2      	subs	r2, r2, r3
 800c5b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c5b8:	b10b      	cbz	r3, 800c5be <__sflush_r+0x42>
 800c5ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5bc:	1ad2      	subs	r2, r2, r3
 800c5be:	2300      	movs	r3, #0
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c5c4:	6a21      	ldr	r1, [r4, #32]
 800c5c6:	47b0      	blx	r6
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	d106      	bne.n	800c5dc <__sflush_r+0x60>
 800c5ce:	6829      	ldr	r1, [r5, #0]
 800c5d0:	291d      	cmp	r1, #29
 800c5d2:	d82b      	bhi.n	800c62c <__sflush_r+0xb0>
 800c5d4:	4a28      	ldr	r2, [pc, #160]	@ (800c678 <__sflush_r+0xfc>)
 800c5d6:	410a      	asrs	r2, r1
 800c5d8:	07d6      	lsls	r6, r2, #31
 800c5da:	d427      	bmi.n	800c62c <__sflush_r+0xb0>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	6062      	str	r2, [r4, #4]
 800c5e0:	6922      	ldr	r2, [r4, #16]
 800c5e2:	04d9      	lsls	r1, r3, #19
 800c5e4:	6022      	str	r2, [r4, #0]
 800c5e6:	d504      	bpl.n	800c5f2 <__sflush_r+0x76>
 800c5e8:	1c42      	adds	r2, r0, #1
 800c5ea:	d101      	bne.n	800c5f0 <__sflush_r+0x74>
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	b903      	cbnz	r3, 800c5f2 <__sflush_r+0x76>
 800c5f0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c5f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5f4:	602f      	str	r7, [r5, #0]
 800c5f6:	b1b9      	cbz	r1, 800c628 <__sflush_r+0xac>
 800c5f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5fc:	4299      	cmp	r1, r3
 800c5fe:	d002      	beq.n	800c606 <__sflush_r+0x8a>
 800c600:	4628      	mov	r0, r5
 800c602:	f7ff f9fd 	bl	800ba00 <_free_r>
 800c606:	2300      	movs	r3, #0
 800c608:	6363      	str	r3, [r4, #52]	@ 0x34
 800c60a:	e00d      	b.n	800c628 <__sflush_r+0xac>
 800c60c:	2301      	movs	r3, #1
 800c60e:	4628      	mov	r0, r5
 800c610:	47b0      	blx	r6
 800c612:	4602      	mov	r2, r0
 800c614:	1c50      	adds	r0, r2, #1
 800c616:	d1c9      	bne.n	800c5ac <__sflush_r+0x30>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0c6      	beq.n	800c5ac <__sflush_r+0x30>
 800c61e:	2b1d      	cmp	r3, #29
 800c620:	d001      	beq.n	800c626 <__sflush_r+0xaa>
 800c622:	2b16      	cmp	r3, #22
 800c624:	d11d      	bne.n	800c662 <__sflush_r+0xe6>
 800c626:	602f      	str	r7, [r5, #0]
 800c628:	2000      	movs	r0, #0
 800c62a:	e021      	b.n	800c670 <__sflush_r+0xf4>
 800c62c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c630:	b21b      	sxth	r3, r3
 800c632:	e01a      	b.n	800c66a <__sflush_r+0xee>
 800c634:	690f      	ldr	r7, [r1, #16]
 800c636:	2f00      	cmp	r7, #0
 800c638:	d0f6      	beq.n	800c628 <__sflush_r+0xac>
 800c63a:	0793      	lsls	r3, r2, #30
 800c63c:	bf18      	it	ne
 800c63e:	2300      	movne	r3, #0
 800c640:	680e      	ldr	r6, [r1, #0]
 800c642:	bf08      	it	eq
 800c644:	694b      	ldreq	r3, [r1, #20]
 800c646:	1bf6      	subs	r6, r6, r7
 800c648:	600f      	str	r7, [r1, #0]
 800c64a:	608b      	str	r3, [r1, #8]
 800c64c:	2e00      	cmp	r6, #0
 800c64e:	ddeb      	ble.n	800c628 <__sflush_r+0xac>
 800c650:	4633      	mov	r3, r6
 800c652:	463a      	mov	r2, r7
 800c654:	4628      	mov	r0, r5
 800c656:	6a21      	ldr	r1, [r4, #32]
 800c658:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c65c:	47e0      	blx	ip
 800c65e:	2800      	cmp	r0, #0
 800c660:	dc07      	bgt.n	800c672 <__sflush_r+0xf6>
 800c662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c66a:	f04f 30ff 	mov.w	r0, #4294967295
 800c66e:	81a3      	strh	r3, [r4, #12]
 800c670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c672:	4407      	add	r7, r0
 800c674:	1a36      	subs	r6, r6, r0
 800c676:	e7e9      	b.n	800c64c <__sflush_r+0xd0>
 800c678:	dfbffffe 	.word	0xdfbffffe

0800c67c <_fflush_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	690b      	ldr	r3, [r1, #16]
 800c680:	4605      	mov	r5, r0
 800c682:	460c      	mov	r4, r1
 800c684:	b913      	cbnz	r3, 800c68c <_fflush_r+0x10>
 800c686:	2500      	movs	r5, #0
 800c688:	4628      	mov	r0, r5
 800c68a:	bd38      	pop	{r3, r4, r5, pc}
 800c68c:	b118      	cbz	r0, 800c696 <_fflush_r+0x1a>
 800c68e:	6a03      	ldr	r3, [r0, #32]
 800c690:	b90b      	cbnz	r3, 800c696 <_fflush_r+0x1a>
 800c692:	f7fe f949 	bl	800a928 <__sinit>
 800c696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0f3      	beq.n	800c686 <_fflush_r+0xa>
 800c69e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c6a0:	07d0      	lsls	r0, r2, #31
 800c6a2:	d404      	bmi.n	800c6ae <_fflush_r+0x32>
 800c6a4:	0599      	lsls	r1, r3, #22
 800c6a6:	d402      	bmi.n	800c6ae <_fflush_r+0x32>
 800c6a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6aa:	f7fe fb38 	bl	800ad1e <__retarget_lock_acquire_recursive>
 800c6ae:	4628      	mov	r0, r5
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	f7ff ff63 	bl	800c57c <__sflush_r>
 800c6b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	07da      	lsls	r2, r3, #31
 800c6bc:	d4e4      	bmi.n	800c688 <_fflush_r+0xc>
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	059b      	lsls	r3, r3, #22
 800c6c2:	d4e1      	bmi.n	800c688 <_fflush_r+0xc>
 800c6c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6c6:	f7fe fb2b 	bl	800ad20 <__retarget_lock_release_recursive>
 800c6ca:	e7dd      	b.n	800c688 <_fflush_r+0xc>

0800c6cc <__swhatbuf_r>:
 800c6cc:	b570      	push	{r4, r5, r6, lr}
 800c6ce:	460c      	mov	r4, r1
 800c6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d4:	4615      	mov	r5, r2
 800c6d6:	2900      	cmp	r1, #0
 800c6d8:	461e      	mov	r6, r3
 800c6da:	b096      	sub	sp, #88	@ 0x58
 800c6dc:	da0c      	bge.n	800c6f8 <__swhatbuf_r+0x2c>
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6e6:	bf14      	ite	ne
 800c6e8:	2340      	movne	r3, #64	@ 0x40
 800c6ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	6031      	str	r1, [r6, #0]
 800c6f2:	602b      	str	r3, [r5, #0]
 800c6f4:	b016      	add	sp, #88	@ 0x58
 800c6f6:	bd70      	pop	{r4, r5, r6, pc}
 800c6f8:	466a      	mov	r2, sp
 800c6fa:	f000 f849 	bl	800c790 <_fstat_r>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	dbed      	blt.n	800c6de <__swhatbuf_r+0x12>
 800c702:	9901      	ldr	r1, [sp, #4]
 800c704:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c708:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c70c:	4259      	negs	r1, r3
 800c70e:	4159      	adcs	r1, r3
 800c710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c714:	e7eb      	b.n	800c6ee <__swhatbuf_r+0x22>

0800c716 <__smakebuf_r>:
 800c716:	898b      	ldrh	r3, [r1, #12]
 800c718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c71a:	079d      	lsls	r5, r3, #30
 800c71c:	4606      	mov	r6, r0
 800c71e:	460c      	mov	r4, r1
 800c720:	d507      	bpl.n	800c732 <__smakebuf_r+0x1c>
 800c722:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c726:	6023      	str	r3, [r4, #0]
 800c728:	6123      	str	r3, [r4, #16]
 800c72a:	2301      	movs	r3, #1
 800c72c:	6163      	str	r3, [r4, #20]
 800c72e:	b003      	add	sp, #12
 800c730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c732:	466a      	mov	r2, sp
 800c734:	ab01      	add	r3, sp, #4
 800c736:	f7ff ffc9 	bl	800c6cc <__swhatbuf_r>
 800c73a:	9f00      	ldr	r7, [sp, #0]
 800c73c:	4605      	mov	r5, r0
 800c73e:	4639      	mov	r1, r7
 800c740:	4630      	mov	r0, r6
 800c742:	f7ff f9cf 	bl	800bae4 <_malloc_r>
 800c746:	b948      	cbnz	r0, 800c75c <__smakebuf_r+0x46>
 800c748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c74c:	059a      	lsls	r2, r3, #22
 800c74e:	d4ee      	bmi.n	800c72e <__smakebuf_r+0x18>
 800c750:	f023 0303 	bic.w	r3, r3, #3
 800c754:	f043 0302 	orr.w	r3, r3, #2
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	e7e2      	b.n	800c722 <__smakebuf_r+0xc>
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c766:	81a3      	strh	r3, [r4, #12]
 800c768:	9b01      	ldr	r3, [sp, #4]
 800c76a:	6020      	str	r0, [r4, #0]
 800c76c:	b15b      	cbz	r3, 800c786 <__smakebuf_r+0x70>
 800c76e:	4630      	mov	r0, r6
 800c770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c774:	f000 f81e 	bl	800c7b4 <_isatty_r>
 800c778:	b128      	cbz	r0, 800c786 <__smakebuf_r+0x70>
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	f023 0303 	bic.w	r3, r3, #3
 800c780:	f043 0301 	orr.w	r3, r3, #1
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	89a3      	ldrh	r3, [r4, #12]
 800c788:	431d      	orrs	r5, r3
 800c78a:	81a5      	strh	r5, [r4, #12]
 800c78c:	e7cf      	b.n	800c72e <__smakebuf_r+0x18>
	...

0800c790 <_fstat_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	2300      	movs	r3, #0
 800c794:	4d06      	ldr	r5, [pc, #24]	@ (800c7b0 <_fstat_r+0x20>)
 800c796:	4604      	mov	r4, r0
 800c798:	4608      	mov	r0, r1
 800c79a:	4611      	mov	r1, r2
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	f7f5 f935 	bl	8001a0c <_fstat>
 800c7a2:	1c43      	adds	r3, r0, #1
 800c7a4:	d102      	bne.n	800c7ac <_fstat_r+0x1c>
 800c7a6:	682b      	ldr	r3, [r5, #0]
 800c7a8:	b103      	cbz	r3, 800c7ac <_fstat_r+0x1c>
 800c7aa:	6023      	str	r3, [r4, #0]
 800c7ac:	bd38      	pop	{r3, r4, r5, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20001780 	.word	0x20001780

0800c7b4 <_isatty_r>:
 800c7b4:	b538      	push	{r3, r4, r5, lr}
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	4d05      	ldr	r5, [pc, #20]	@ (800c7d0 <_isatty_r+0x1c>)
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	4608      	mov	r0, r1
 800c7be:	602b      	str	r3, [r5, #0]
 800c7c0:	f7f5 f933 	bl	8001a2a <_isatty>
 800c7c4:	1c43      	adds	r3, r0, #1
 800c7c6:	d102      	bne.n	800c7ce <_isatty_r+0x1a>
 800c7c8:	682b      	ldr	r3, [r5, #0]
 800c7ca:	b103      	cbz	r3, 800c7ce <_isatty_r+0x1a>
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	bd38      	pop	{r3, r4, r5, pc}
 800c7d0:	20001780 	.word	0x20001780

0800c7d4 <_sbrk_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	4d05      	ldr	r5, [pc, #20]	@ (800c7f0 <_sbrk_r+0x1c>)
 800c7da:	4604      	mov	r4, r0
 800c7dc:	4608      	mov	r0, r1
 800c7de:	602b      	str	r3, [r5, #0]
 800c7e0:	f7f5 f93a 	bl	8001a58 <_sbrk>
 800c7e4:	1c43      	adds	r3, r0, #1
 800c7e6:	d102      	bne.n	800c7ee <_sbrk_r+0x1a>
 800c7e8:	682b      	ldr	r3, [r5, #0]
 800c7ea:	b103      	cbz	r3, 800c7ee <_sbrk_r+0x1a>
 800c7ec:	6023      	str	r3, [r4, #0]
 800c7ee:	bd38      	pop	{r3, r4, r5, pc}
 800c7f0:	20001780 	.word	0x20001780

0800c7f4 <__assert_func>:
 800c7f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7f6:	4614      	mov	r4, r2
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	4b09      	ldr	r3, [pc, #36]	@ (800c820 <__assert_func+0x2c>)
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68d8      	ldr	r0, [r3, #12]
 800c802:	b954      	cbnz	r4, 800c81a <__assert_func+0x26>
 800c804:	4b07      	ldr	r3, [pc, #28]	@ (800c824 <__assert_func+0x30>)
 800c806:	461c      	mov	r4, r3
 800c808:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c80c:	9100      	str	r1, [sp, #0]
 800c80e:	462b      	mov	r3, r5
 800c810:	4905      	ldr	r1, [pc, #20]	@ (800c828 <__assert_func+0x34>)
 800c812:	f000 f841 	bl	800c898 <fiprintf>
 800c816:	f000 f851 	bl	800c8bc <abort>
 800c81a:	4b04      	ldr	r3, [pc, #16]	@ (800c82c <__assert_func+0x38>)
 800c81c:	e7f4      	b.n	800c808 <__assert_func+0x14>
 800c81e:	bf00      	nop
 800c820:	20000190 	.word	0x20000190
 800c824:	0800cdc6 	.word	0x0800cdc6
 800c828:	0800cd98 	.word	0x0800cd98
 800c82c:	0800cd8b 	.word	0x0800cd8b

0800c830 <_calloc_r>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	fba1 5402 	umull	r5, r4, r1, r2
 800c836:	b93c      	cbnz	r4, 800c848 <_calloc_r+0x18>
 800c838:	4629      	mov	r1, r5
 800c83a:	f7ff f953 	bl	800bae4 <_malloc_r>
 800c83e:	4606      	mov	r6, r0
 800c840:	b928      	cbnz	r0, 800c84e <_calloc_r+0x1e>
 800c842:	2600      	movs	r6, #0
 800c844:	4630      	mov	r0, r6
 800c846:	bd70      	pop	{r4, r5, r6, pc}
 800c848:	220c      	movs	r2, #12
 800c84a:	6002      	str	r2, [r0, #0]
 800c84c:	e7f9      	b.n	800c842 <_calloc_r+0x12>
 800c84e:	462a      	mov	r2, r5
 800c850:	4621      	mov	r1, r4
 800c852:	f7fe f9e7 	bl	800ac24 <memset>
 800c856:	e7f5      	b.n	800c844 <_calloc_r+0x14>

0800c858 <__ascii_mbtowc>:
 800c858:	b082      	sub	sp, #8
 800c85a:	b901      	cbnz	r1, 800c85e <__ascii_mbtowc+0x6>
 800c85c:	a901      	add	r1, sp, #4
 800c85e:	b142      	cbz	r2, 800c872 <__ascii_mbtowc+0x1a>
 800c860:	b14b      	cbz	r3, 800c876 <__ascii_mbtowc+0x1e>
 800c862:	7813      	ldrb	r3, [r2, #0]
 800c864:	600b      	str	r3, [r1, #0]
 800c866:	7812      	ldrb	r2, [r2, #0]
 800c868:	1e10      	subs	r0, r2, #0
 800c86a:	bf18      	it	ne
 800c86c:	2001      	movne	r0, #1
 800c86e:	b002      	add	sp, #8
 800c870:	4770      	bx	lr
 800c872:	4610      	mov	r0, r2
 800c874:	e7fb      	b.n	800c86e <__ascii_mbtowc+0x16>
 800c876:	f06f 0001 	mvn.w	r0, #1
 800c87a:	e7f8      	b.n	800c86e <__ascii_mbtowc+0x16>

0800c87c <__ascii_wctomb>:
 800c87c:	4603      	mov	r3, r0
 800c87e:	4608      	mov	r0, r1
 800c880:	b141      	cbz	r1, 800c894 <__ascii_wctomb+0x18>
 800c882:	2aff      	cmp	r2, #255	@ 0xff
 800c884:	d904      	bls.n	800c890 <__ascii_wctomb+0x14>
 800c886:	228a      	movs	r2, #138	@ 0x8a
 800c888:	f04f 30ff 	mov.w	r0, #4294967295
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	4770      	bx	lr
 800c890:	2001      	movs	r0, #1
 800c892:	700a      	strb	r2, [r1, #0]
 800c894:	4770      	bx	lr
	...

0800c898 <fiprintf>:
 800c898:	b40e      	push	{r1, r2, r3}
 800c89a:	b503      	push	{r0, r1, lr}
 800c89c:	4601      	mov	r1, r0
 800c89e:	ab03      	add	r3, sp, #12
 800c8a0:	4805      	ldr	r0, [pc, #20]	@ (800c8b8 <fiprintf+0x20>)
 800c8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a6:	6800      	ldr	r0, [r0, #0]
 800c8a8:	9301      	str	r3, [sp, #4]
 800c8aa:	f7ff fd4f 	bl	800c34c <_vfiprintf_r>
 800c8ae:	b002      	add	sp, #8
 800c8b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8b4:	b003      	add	sp, #12
 800c8b6:	4770      	bx	lr
 800c8b8:	20000190 	.word	0x20000190

0800c8bc <abort>:
 800c8bc:	2006      	movs	r0, #6
 800c8be:	b508      	push	{r3, lr}
 800c8c0:	f000 f82c 	bl	800c91c <raise>
 800c8c4:	2001      	movs	r0, #1
 800c8c6:	f7f5 f852 	bl	800196e <_exit>

0800c8ca <_raise_r>:
 800c8ca:	291f      	cmp	r1, #31
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	460c      	mov	r4, r1
 800c8d2:	d904      	bls.n	800c8de <_raise_r+0x14>
 800c8d4:	2316      	movs	r3, #22
 800c8d6:	6003      	str	r3, [r0, #0]
 800c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8dc:	bd38      	pop	{r3, r4, r5, pc}
 800c8de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c8e0:	b112      	cbz	r2, 800c8e8 <_raise_r+0x1e>
 800c8e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8e6:	b94b      	cbnz	r3, 800c8fc <_raise_r+0x32>
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f000 f831 	bl	800c950 <_getpid_r>
 800c8ee:	4622      	mov	r2, r4
 800c8f0:	4601      	mov	r1, r0
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8f8:	f000 b818 	b.w	800c92c <_kill_r>
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d00a      	beq.n	800c916 <_raise_r+0x4c>
 800c900:	1c59      	adds	r1, r3, #1
 800c902:	d103      	bne.n	800c90c <_raise_r+0x42>
 800c904:	2316      	movs	r3, #22
 800c906:	6003      	str	r3, [r0, #0]
 800c908:	2001      	movs	r0, #1
 800c90a:	e7e7      	b.n	800c8dc <_raise_r+0x12>
 800c90c:	2100      	movs	r1, #0
 800c90e:	4620      	mov	r0, r4
 800c910:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c914:	4798      	blx	r3
 800c916:	2000      	movs	r0, #0
 800c918:	e7e0      	b.n	800c8dc <_raise_r+0x12>
	...

0800c91c <raise>:
 800c91c:	4b02      	ldr	r3, [pc, #8]	@ (800c928 <raise+0xc>)
 800c91e:	4601      	mov	r1, r0
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	f7ff bfd2 	b.w	800c8ca <_raise_r>
 800c926:	bf00      	nop
 800c928:	20000190 	.word	0x20000190

0800c92c <_kill_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	2300      	movs	r3, #0
 800c930:	4d06      	ldr	r5, [pc, #24]	@ (800c94c <_kill_r+0x20>)
 800c932:	4604      	mov	r4, r0
 800c934:	4608      	mov	r0, r1
 800c936:	4611      	mov	r1, r2
 800c938:	602b      	str	r3, [r5, #0]
 800c93a:	f7f5 f808 	bl	800194e <_kill>
 800c93e:	1c43      	adds	r3, r0, #1
 800c940:	d102      	bne.n	800c948 <_kill_r+0x1c>
 800c942:	682b      	ldr	r3, [r5, #0]
 800c944:	b103      	cbz	r3, 800c948 <_kill_r+0x1c>
 800c946:	6023      	str	r3, [r4, #0]
 800c948:	bd38      	pop	{r3, r4, r5, pc}
 800c94a:	bf00      	nop
 800c94c:	20001780 	.word	0x20001780

0800c950 <_getpid_r>:
 800c950:	f7f4 bff6 	b.w	8001940 <_getpid>

0800c954 <_init>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	bf00      	nop
 800c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95a:	bc08      	pop	{r3}
 800c95c:	469e      	mov	lr, r3
 800c95e:	4770      	bx	lr

0800c960 <_fini>:
 800c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c962:	bf00      	nop
 800c964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c966:	bc08      	pop	{r3}
 800c968:	469e      	mov	lr, r3
 800c96a:	4770      	bx	lr
